{
  "$id": "tmod:@turbot/aws-vpc-core",
  "title": "@turbot/aws-vpc-core",
  "author": "Turbot HQ, Inc",
  "version": "5.10.1",
  "license": "For LICENSE see https://turbot.com/license",
  "peerDependencies": {
    "@turbot/aws": "^5.0.0",
    "@turbot/turbot": "^5.22.0",
    "@turbot/turbot-iam": "^5.1.0",
    "@turbot/aws-iam": "^5.1.0",
    "@turbot/aws-ec2": "^5.0.0",
    "@turbot/aws-kms": "^5.0.0"
  },
  "scripts": {
    "prepack": "./build.sh"
  },
  "data": [
    {
      "permission": "ec2:AcceptTransitGatewayPeeringAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AcceptTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment|transitGatewayAttachmentCrossAccount",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AcceptVpcEndpointConnections",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AcceptVpcPeeringConnection",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AllocateAddress",
      "grant": "Admin",
      "resourceType": "elasticIp",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can allocate new elastic IP addresses; this is considered safe as the proper routing still needs to be configured for public access."
    },
    {
      "permission": "ec2:AssociateAddress",
      "grant": "Admin",
      "resourceType": "elasticIp",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can associate elastic IP addresses; this is considered safe as the proper routing still needs to be configured for public access."
    },
    {
      "permission": "ec2:AssociateDhcpOptions",
      "grant": "Whitelist",
      "resourceType": "dhcpOptions|vpc",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsDhcpOptionsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AssociateRouteTable",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AssociateSubnetCidrBlock",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AssociateTransitGatewayRouteTable",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AssociateVpcCidrBlock",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AttachClassicLinkVpc",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AttachInternetGateway",
      "grant": "Whitelist",
      "resourceType": "internetGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsIgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AttachVpnGateway",
      "grant": "Whitelist",
      "resourceType": "vpnGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AuthorizeSecurityGroupEgress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AuthorizeSecurityGroupIngress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateCustomerGateway",
      "grant": "Whitelist",
      "resourceType": "customerGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsCgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateDefaultSubnet",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateDefaultVpc",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateDhcpOptions",
      "grant": "Whitelist",
      "resourceType": "dhcpOptions",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsDhcpOptionsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateEgressOnlyInternetGateway",
      "grant": "Whitelist",
      "resourceType": "egressOnlyInternetGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateFlowLogs",
      "grant": "Whitelist",
      "resourceType": "flowLog",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsFlowLogsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateInternetGateway",
      "grant": "Whitelist",
      "resourceType": "internetGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsIgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateLocalGatewayRoute",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateLocalGatewayRouteTableVpcAssociation",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateNatGateway",
      "grant": "Whitelist",
      "resourceType": "natGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNatGatewayAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateNetworkAcl",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateNetworkAclEntry",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateRoute",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateRoute",
      "grant": "Whitelist",
      "resourceType": "route",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateRouteTable",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateSecurityGroup",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateSubnet",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateTags",
      "grant": "Operator",
      "resourceType": "vpc|subnet|elasticIp|flowLog|routeTable|securityGroup|internetGateway|vpnGateway|vpcEndpoint|natGateway|dhcpOptions|networkAcl|vpcPeeringConnection|transitGateway|customerGateway|vpnConnection|vpcEndpointService|transitGatewayAttachment|transitGatewayRouteTable|transitGatewayAttachmentCrossAccount",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Tags are low risk for management in Turbot since accounts are the isolation boundary; not tags."
    },
    {
      "permission": "ec2:CreateTransitGateway",
      "grant": "Admin",
      "resourceType": "transitGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateTransitGatewayPeeringAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateTransitGatewayRouteTable",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpc",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpcEndpoint",
      "grant": "Whitelist",
      "resourceType": "vpcEndpoint",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpcEndpointConnectionNotification",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "User is required to also have AWS/SNS/Operator role assigned for this action."
    },
    {
      "permission": "ec2:CreateVpcEndpointServiceConfiguration",
      "grant": "Whitelist",
      "resourceType": "vpcEndpointService",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "Allows cross-account access."
    },
    {
      "permission": "ec2:CreateVpcPeeringConnection",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpnConnection",
      "grant": "Whitelist",
      "resourceType": "vpnConnection|transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpnConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpnConnectionRoute",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpnConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpnGateway",
      "grant": "Whitelist",
      "resourceType": "vpnGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteCustomerGateway",
      "grant": "Whitelist",
      "resourceType": "customerGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsCgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteDhcpOptions",
      "grant": "Whitelist",
      "resourceType": "dhcpOptions",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsDhcpOptionsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteEgressOnlyInternetGateway",
      "grant": "Whitelist",
      "resourceType": "egressOnlyInternetGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteFlowLogs",
      "grant": "Whitelist",
      "resourceType": "flowLog",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsFlowLogsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteInternetGateway",
      "grant": "Whitelist",
      "resourceType": "internetGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsIgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteLocalGatewayRoute",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteNatGateway",
      "grant": "Whitelist",
      "resourceType": "natGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNatGatewayAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteNetworkAcl",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteNetworkAclEntry",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteRoute",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteRoute",
      "grant": "Whitelist",
      "resourceType": "route",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteRouteTable",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteSecurityGroup",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteSubnet",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTags",
      "grant": "Operator",
      "resourceType": "vpc|subnet|elasticIp|flowLog|routeTable|securityGroup|internetGateway|vpnGateway|vpcEndpoint|natGateway|dhcpOptions|networkAcl|vpcPeeringConnection|transitGateway|customerGateway|vpnConnection|vpcEndpointService|transitGatewayAttachment|transitGatewayRouteTable|transitGatewayAttachmentCrossAccount",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Tags are low risk for management in Turbot since accounts are the isolation boundary; not tags. Most deletions are denied to operator but tags are a low risk management activity even for deletion."
    },
    {
      "permission": "ec2:DeleteTransitGateway",
      "grant": "Admin",
      "resourceType": "transitGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTransitGatewayPeeringAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTransitGatewayRouteTable",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment|transitGatewayAttachmentCrossAccount",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpc",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpcEndpointConnectionNotifications",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "User is required to also have AWS/SNS/Operator role assigned for this action."
    },
    {
      "permission": "ec2:DeleteVpcEndpointServiceConfigurations",
      "grant": "Whitelist",
      "resourceType": "vpcEndpointService",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "Allows cross-account access."
    },
    {
      "permission": "ec2:DeleteVpcEndpoints",
      "grant": "Whitelist",
      "resourceType": "vpcEndpoint",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpcPeeringConnection",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpnConnection",
      "grant": "Whitelist",
      "resourceType": "vpnConnection|transitGatewayAttachment",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpnConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpnConnectionRoute",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpnConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpnGateway",
      "grant": "Whitelist",
      "resourceType": "vpnGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DescribeAddresses",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeCustomerGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeDhcpOptions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeEgressOnlyInternetGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeFlowLogs",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeInternetGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayRouteTables",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayVirtualInterfaces",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeMovingAddresses",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeNatGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeNetworkAcls",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribePrefixLists",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeRouteTables",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSecurityGroupReferences",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSecurityGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeStaleSecurityGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSubnets",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeTags",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcAttribute",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcClassicLink",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcClassicLinkDnsSupport",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointConnectionNotifications",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointConnections",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointServiceConfigurations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointServicePermissions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointServices",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpoints",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcPeeringConnection",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcPeeringConnections",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcs",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpnConnections",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpnGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DetachInternetGateway",
      "grant": "Whitelist",
      "resourceType": "internetGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsIgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DetachVpnGateway",
      "grant": "Whitelist",
      "resourceType": "vpnGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DisableVgwRoutePropagation",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DisableVpcClassicLink",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:DisableVpcClassicLinkDnsSupport",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:DisassociateAddress",
      "grant": "Admin",
      "resourceType": "elasticIp",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can disassociate elastic IP addresses."
    },
    {
      "permission": "ec2:DisassociateRouteTable",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DisassociateSubnetCidrBlock",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DisassociateTransitGatewayRouteTable",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DisassociateVpcCidrBlock",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:EnableTransitGatewayRouteTablePropagation",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:EnableVgwRoutePropagation",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:EnableVpcClassicLink",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:EnableVpcClassicLinkDnsSupport",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:ExportTransitGatewayRoutes",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifySubnetAttribute",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment|transitGatewayAttachmentCrossAccount",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpcAttribute",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpcEndpoint",
      "grant": "Whitelist",
      "resourceType": "vpcEndpoint",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpcEndpointConnectionNotification",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "User is required to also have AWS/SNS/Operator role assigned for this action."
    },
    {
      "permission": "ec2:ModifyVpcEndpointServiceConfiguration",
      "grant": "Whitelist",
      "resourceType": "vpcEndpointService",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "Allows cross-account access."
    },
    {
      "permission": "ec2:ModifyVpcEndpointServicePermissions",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "Allows cross-account access."
    },
    {
      "permission": "ec2:ModifyVpcPeeringConnectionOptions",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpcTenancy",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpnConnection",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Allows to create the transit gateway attachment via vpn connection."
    },
    {
      "permission": "ec2:ModifyVpnConnection",
      "grant": "Admin",
      "resourceType": "vpnConnection",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:MoveAddressToVpc",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:RejectTransitGatewayPeeringAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:RejectTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment|transitGatewayAttachmentCrossAccount",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:RejectVpcEndpointConnections",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:RejectVpcPeeringConnection",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ReleaseAddress",
      "grant": "Admin",
      "resourceType": "elasticIp",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can release elastic IP addresses."
    },
    {
      "permission": "ec2:ReplaceNetworkAclAssociation",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ReplaceNetworkAclEntry",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ReplaceRoute",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ReplaceRouteTableAssociation",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:RestoreAddressToClassic",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:RevokeSecurityGroupEgress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:RevokeSecurityGroupIngress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:SearchLocalGatewayRoutes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:SearchTransitGatewayRoutes",
      "grant": "Metadata",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": "Admin can update the description field only."
    },
    {
      "permission": "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": "Admin can update the description field only."
    }
  ],
  "control": {
    "types": {
      "vpcServiceStack": {
        "title": "Stack",
        "icon": "fal-layer-group",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure a custom stack on AWS, per the custom `Stack > Source`.\n\nA Turbot `Stack` is a set of resources configured by Turbot, as specified\nvia Terraform source.  Stacks are responsible for the creation and deletion\nof multiple resources. Once created, stack resources are responsible for\nconfiguring themselves from the stack source via their `Configured` control.\n",
        "flags": [
          "transientStorage"
        ],
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "vpcActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Take an action when an AWS VPC vpc is not active based on the\n`AWS > VPC > VPC > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > VPC > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/vpcActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/vpcCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "vpcApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Take an action when an AWS VPC vpc is not approved based on `AWS > VPC > VPC > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/vpcApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/vpcCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "vpcCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Record and synchronize details for the AWS VPC vpc into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > VPC > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/vpcCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/vpc/cmdb",
          "bundle": "functions/vpc/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "aa9130f524"
        }
      },
      "vpcConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Maintain AWS > VPC > VPC configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "defaultVPC": {
        "title": "Default VPC",
        "icon": "fal-object-group",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/other"
      },
      "defaultVpcApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "description": "Raise an alarm if the default VPC exists in the region.",
        "parent": "#/control/types/defaultVPC",
        "targets": "aws#/resource/types/region",
        "category": "turbot#/control/categories/resourceApproved",
        "help": "#/help/cmdb"
      },
      "vpcDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS VPC vpc resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > VPC > VPC > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/vpcCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/vpcCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/vpc/discovery",
          "bundle": "functions/vpc/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "f754fe0e74"
        }
      },
      "vpcDnsHostnames": {
        "title": "DNS Hostnames",
        "icon": "fal-map-marked-alt",
        "description": "Check if the AWS VPC DNS Hostnames configuration is set correctly.",
        "parent": "#/resource/types/vpc",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/other",
        "help": "#/help/vpcDnsHostnames"
      },
      "vpcDnsResolution": {
        "title": "DNS Resolution",
        "icon": "fal-map-marked-alt",
        "description": "Check if the AWS VPC DNS Resolution configuration is set correctly.",
        "parent": "#/resource/types/vpc",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/other",
        "help": "#/help/vpcDnsResolution"
      },
      "vpcFlowloggingStack": {
        "icon": "fal-file-contract",
        "title": "Flow Logging",
        "description": "Configure a custom stack on the AWS Account, per the `Custom Stack > Source`.\n\nA Turbot `Stack` is a set of resources configured by Turbot, as specified\nvia Terraform source.  Stacks are responsible for the creation and deletion\nof multiple resources. Once created, stack resources are responsible for\nconfiguring themselves from the stack source via their `Configured` control.\n",
        "category": "turbot#/control/categories/configured",
        "flags": [
          "transientStorage"
        ],
        "parent": "#/resource/types/vpc",
        "targets": "#/resource/types/vpc",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "vpcTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/vpc",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Take an action when an AWS VPC vpc tags is not updated based on the `AWS > VPC > VPC > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > VPC > VPC > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/vpcTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "vpcUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS VPC vpc resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > VPC > VPC > Usage` policy, and set the limit with the `AWS > VPC > VPC > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/vpcUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "subnetActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Take an action when an AWS VPC subnet is not active based on the\n`AWS > VPC > Subnet > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Subnet > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/subnetCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "subnetApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Take an action when an AWS VPC subnet is not approved based on `AWS > VPC > Subnet > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/subnetCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "subnetSetAutoAssignPublicIp": {
        "title": "Auto Assign Public IP",
        "icon": "fal-cog",
        "description": "Check if Subnet's Auto-assign Public IP property is enabled for Subnet types in AWS > VPC > Subnet Auto Assign Public IP Types. Subnet types that are not in the AWS > VPC > Subnet Auto Assign Public IP Types will be checked if the Auto-assign Public IP property is disabled.",
        "parent": "#/resource/types/subnet",
        "targets": "#/resource/types/subnet",
        "category": "turbot#/control/categories/configured",
        "help": "#/help/subnetSetAutoAssignPublicIp"
      },
      "subnetCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/subnet"
        ],
        "defaultInterval": {
          "hours": 24
        },
        "description": "Record and synchronize details for the AWS VPC subnet into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Subnet > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n\nThis control will automatically re-run every 24 hours because AWS does not currently support real-time events for all properties of this resource type.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/subnet/cmdb",
          "bundle": "functions/subnet/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "ece01b2ac0"
        }
      },
      "subnetConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Maintain AWS > VPC > Subnet configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "subnetDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Discover all AWS VPC subnet resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > VPC > Subnet > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/subnetCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/subnet/discovery",
          "bundle": "functions/subnet/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "e8ce6f453f"
        }
      },
      "subnetTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/subnet",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Take an action when an AWS VPC subnet tags is not updated based on the `AWS > VPC > Subnet > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > VPC > Subnet > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "subnetUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS VPC subnet resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > VPC > Subnet > Usage` policy, and set the limit with the `AWS > VPC > Subnet > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "routeTableActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Take an action when an AWS VPC route table is not active based on the\n`AWS > VPC > Route Table > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Route Table > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/routeTableActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/routeTableCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "routeTableApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Take an action when an AWS VPC route table is not approved based on `AWS > VPC > Route Table > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/routeTableApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/routeTableCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "routeTableCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Record and synchronize details for the AWS VPC route table into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Route Table > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/routeTableCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/routeTable/cmdb",
          "bundle": "functions/routeTable/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "aefd05139e"
        }
      },
      "routeTableConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Maintain AWS > VPC > Route Table configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "routeTableDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Discover all AWS VPC route table resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > VPC > Route Table > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/routeTableCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/routeTableCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/routeTable/discovery",
          "bundle": "functions/routeTable/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "6d5e30ea74"
        }
      },
      "routeTableTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/routeTable",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Take an action when an AWS VPC route table tags is not updated based on the `AWS > VPC > Route Table > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > VPC > Route Table > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/routeTableTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "routeTableUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS VPC route table resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > VPC > Route Table > Usage` policy, and set the limit with the `AWS > VPC > Route Table > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/routeTableUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "dhcpOptionsActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Take an action when an AWS VPC dhcp options is not active based on the\n`AWS > VPC > DHCP Options > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > DHCP Options > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dhcpOptionsActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dhcpOptionsCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "dhcpOptionsApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Take an action when an AWS VPC dhcp options is not approved based on `AWS > VPC > DHCP Options > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dhcpOptionsApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dhcpOptionsCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dhcpOptionsCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Record and synchronize details for the AWS VPC dhcp options into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > DHCP Options > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dhcpOptionsCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/dhcpOptions/cmdb",
          "bundle": "functions/dhcpOptions/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "836bf5d889"
        }
      },
      "dhcpOptionsConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Maintain AWS > VPC > DHCP Options configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "dhcpOptionsDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS VPC dhcp options resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > VPC > DHCP Options > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dhcpOptionsCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/dhcpOptionsCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/dhcpOptions/discovery",
          "bundle": "functions/dhcpOptions/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "ee4491cdcb"
        }
      },
      "dhcpOptionsTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/dhcpOptions",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Take an action when an AWS VPC dhcp options tags is not updated based on the `AWS > VPC > DHCP Options > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > VPC > DHCP Options > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dhcpOptionsTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "dhcpOptionsUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS VPC dhcp options resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > VPC > DHCP Options > Usage` policy, and set the limit with the `AWS > VPC > DHCP Options > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dhcpOptionsUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "routeCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/route",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/route"
        ],
        "description": "Record and synchronize details for the AWS VPC route table route into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\n**Note**: Setting CMDB to Skip will also pause these changes.\n",
        "function": {
          "src": "functions/route/cmdb",
          "bundle": "functions/route/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "81a083e6c2"
        }
      },
      "routeConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/route",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/route"
        ],
        "description": "Maintain AWS > VPC > Route configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "routeDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/route",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Discover all AWS VPC route table route resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/docs/concepts/guardrails/cmdb) control.\n"
      }
    }
  },
  "definitions": {
    "vpcService": {
      "allOf": [
        {
          "$ref": "turbot#/definitions/service"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "const": "VPC"
            },
            "turbot": {
              "type": "object",
              "properties": {
                "akas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/vpcServiceAka"
                  }
                },
                "title": {
                  "const": "VPC"
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "aws#/definitions/awsMetadata"
                    }
                  }
                }
              }
            }
          },
          "additionalProperties": true,
          "tests": [
            {
              "description": "Valid - all properties provided",
              "input": {
                "name": "VPC",
                "turbot": {
                  "akas": [
                    "arn:aws:vpc::123456789012"
                  ],
                  "title": "VPC",
                  "custom": {
                    "aws": {
                      "accountId": 123456789012
                    }
                  }
                }
              }
            },
            {
              "description": "invalid - service provider name prefixed",
              "input": {
                "name": "AWS VPC",
                "turbot": {
                  "akas": [
                    "arn:aws:vpc::123456789012"
                  ],
                  "title": "VPC",
                  "custom": {
                    "aws": {
                      "accountId": 123456789012
                    }
                  }
                }
              }
            }
          ]
        }
      ]
    },
    "vpcServiceAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}-[a-z]+-[0-9]{1}:[0-9]{12}:vpc$",
      "tests": [
        {
          "description": "base",
          "input": "arn:aws:ec2:us-east-1:123123123123:vpc"
        },
        {
          "description": "Invalid - service name not valid",
          "input": "arn:aws:datasync111::123123123123",
          "expected": false
        },
        {
          "description": "Invalid - account id is not valid",
          "input": "arn:aws:vpc::123382743123123123",
          "expected": false
        }
      ]
    },
    "baseString": {
      "type": "string",
      "tests": [
        {
          "input": "test"
        },
        {
          "input": "foo.bar.baz"
        },
        {
          "input": 111111111
        },
        {
          "input": "00123"
        },
        {
          "input": "ab@cde"
        },
        {
          "input": "Test.The-KitchenSink"
        },
        {
          "description": "empty string",
          "input": ""
        },
        {
          "description": "null value",
          "input": null
        }
      ]
    },
    "genericBoolean": {
      "type": "boolean",
      "tests": [
        {
          "input": true
        },
        {
          "input": false
        },
        {
          "description": "null value",
          "input": null
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - array type",
          "input": [
            true,
            false
          ],
          "expected": false
        }
      ]
    },
    "cidrState": {
      "type": "string",
      "enum": [
        "associating",
        "associated",
        "disassociating",
        "disassociated",
        "failing",
        "failed"
      ],
      "tests": [
        {
          "input": "failed"
        },
        {
          "input": "failing"
        },
        {
          "description": "invalid - not in the list",
          "input": "hello123",
          "expected": false
        },
        {
          "description": "invalid - upper case",
          "input": "ASSOCIATED",
          "expected": false
        },
        {
          "description": "invalid - array type provided",
          "input": [
            "associating",
            "associated"
          ],
          "expected": false
        }
      ]
    },
    "cidrBlockState": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/cidrState"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "state": "associating"
          }
        }
      ]
    },
    "associationId": {
      "type": "string",
      "pattern": "^vpc-cidr-assoc-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "vpc-cidr-assoc-dbd28eb3"
        },
        {
          "input": "vpc-cidr-assoc-0c3e2130d180c9962"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "vpc-cidr-assoc-42d6132bz",
          "expected": false
        },
        {
          "description": "invalid - should always start with vpc-cidr-assoc",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "vpcIpv6CidrBlockAssociationSet": {
      "type": "object",
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/associationId"
        },
        "Ipv6CidrBlock": {
          "$ref": "aws#/definitions/ipv6CidrBlock"
        },
        "Ipv6CidrBlockState": {
          "$ref": "#/definitions/cidrBlockState"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "AssociationId": "vpc-cidr-assoc-0280ab6b",
            "Ipv6CidrBlock": "2001:db8:1234:8800::/56",
            "Ipv6CidrBlockState": {
              "State": "associating"
            }
          }
        }
      ]
    },
    "availableState": {
      "type": "string",
      "enum": [
        "pending",
        "available"
      ],
      "tests": [
        {
          "input": "pending"
        },
        {
          "input": "available"
        },
        {
          "description": "invalid - not in the list",
          "input": "hello123",
          "expected": false
        },
        {
          "description": "invalid - upper case",
          "input": "PENDING",
          "expected": false
        },
        {
          "description": "invalid - array type provided",
          "input": [
            "pending",
            "available"
          ],
          "expected": false
        }
      ]
    },
    "vpcId": {
      "type": "string",
      "pattern": "^vpc-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "vpc-27eb185d"
        },
        {
          "input": "vpc-0563c4222b385087c"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "vpc-b611064z",
          "expected": false
        },
        {
          "description": "invalid - should always start with vpc",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "dhcpOptionsId": {
      "type": "string",
      "pattern": "^dopt-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "dopt-7a8b9c2d"
        },
        {
          "input": "dopt-031e50a9a62a70e91"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "dopt-7a8b9c2z",
          "expected": false
        },
        {
          "description": "invalid - should always start with dopt",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "subnetId": {
      "type": "string",
      "pattern": "^subnet-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "subnet-4204d234"
        },
        {
          "input": "subnet-00c1130ca50e94283"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "subnet-b611064z",
          "expected": false
        },
        {
          "description": "invalid - should always start with subnet",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "natGatewayId": {
      "type": "string",
      "pattern": "^nat-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "nat-1f382e7d"
        },
        {
          "input": "nat-05dba92075d71c408"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "nat-b611064z",
          "expected": false
        },
        {
          "description": "invalid - should always start with nat",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "networkInterfaceId": {
      "type": "string",
      "pattern": "^eni-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "eni-e5aa89a3"
        },
        {
          "input": "eni-f9ba99bf75d71c408"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "eni-b611064z",
          "expected": false
        },
        {
          "description": "invalid - should always start with eni",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "vpcPeeringConnectionId": {
      "type": "string",
      "pattern": "^pcx-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "pcx-111aaa22"
        },
        {
          "input": "pcx-0f98d7f13030ec59f"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "pcx-b611064z",
          "expected": false
        },
        {
          "description": "invalid - should always start with pcx",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "fromPort": {
      "type": "integer"
    },
    "toPort": {
      "type": "integer"
    },
    "routeTableId": {
      "type": "string",
      "pattern": "^rtb-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "rtb-1f382e7d"
        },
        {
          "input": "rtb-0ad0275d05f6020ef"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "rtb-b611064z",
          "expected": false
        },
        {
          "description": "invalid - should always start with rtb",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "securityGroupId": {
      "type": "string",
      "pattern": "^sg-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "sg-cc7a7387"
        },
        {
          "input": "sg-094881c6fa6cea7dc"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "sg-094881c6fa6cea7dz",
          "expected": false
        },
        {
          "description": "invalid - should always start with sg",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "customerGatewayId": {
      "type": "string",
      "pattern": "^cgw-[a-f0-9]{17}$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "cgw-0dd37586ec45dfa2b"
        }
      ]
    },
    "vpnGatewayId": {
      "type": "string",
      "pattern": "^vgw-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "vgw-f211f09b"
        },
        {
          "input": "vgw-9a4cacf3"
        },
        {
          "description": "invalid - should always start with vgw",
          "input": "id-b61106d4",
          "expected": false
        },
        {
          "description": "invalid - too short",
          "input": "vgw-63a540",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "vgw-63a5400a63a5400a63a5400a",
          "expected": false
        }
      ]
    },
    "type": {
      "type": "string",
      "enum": [
        "ipsec.1"
      ],
      "tests": [
        {
          "description": "valid case",
          "input": "ipsec.1"
        },
        {
          "description": "invalid case",
          "input": "Ipsec.1",
          "expected": false
        }
      ]
    },
    "tagString": {
      "type": "string",
      "pattern": "^.*$",
      "tests": [
        {
          "input": "küßî"
        },
        {
          "input": "Peter Dinklage as Tyrion Lannister"
        },
        {
          "input": "Filip Lozić as Young Nobleman"
        },
        {
          "input": "Abc123 !@#$%^&*()_+"
        }
      ]
    },
    "tagKey": {
      "allOf": [
        {
          "$ref": "#/definitions/tagString"
        },
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 127
        }
      ],
      "tests": [
        {
          "description": "valid - min length",
          "input": "a"
        },
        {
          "description": "valid - max length",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345678",
          "expected": false
        }
      ]
    },
    "tagValue": {
      "allOf": [
        {
          "$ref": "#/definitions/tagString"
        },
        {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      ],
      "tests": [
        {
          "description": "valid - empty string",
          "input": ""
        },
        {
          "description": "valid - max length",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345"
        },
        {
          "description": "invalid - too long",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456",
          "expected": false
        }
      ]
    },
    "tag": {
      "type": "object",
      "properties": {
        "Key": {
          "$ref": "#/definitions/tagKey"
        },
        "Value": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "Key": "foo",
            "Value": "bar"
          }
        },
        {
          "description": "invalid - empty key",
          "input": {
            "Key": "",
            "Value": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - no key",
          "input": {
            "Value": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - no value",
          "input": {
            "Key": "foo"
          },
          "expected": false
        }
      ]
    },
    "tagList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tag"
      },
      "minLength": 0,
      "tests": [
        {
          "description": "valid - empty list",
          "input": []
        },
        {
          "description": "valid - single item",
          "input": [
            {
              "Key": "foo",
              "Value": "bar"
            }
          ]
        },
        {
          "description": "valid - multiple items",
          "input": [
            {
              "Key": "one",
              "Value": 1
            },
            {
              "Key": "two",
              "Value": 2
            },
            {
              "Key": "three",
              "Value": 3
            },
            {
              "Key": "four",
              "Value": 4
            }
          ]
        },
        {
          "description": "invalid - missing value",
          "input": [
            {
              "Key": "one"
            },
            {
              "Key": "two",
              "Value": 2
            }
          ],
          "expected": false
        },
        {
          "description": "invalid - empty item",
          "input": [
            {
              "Key": "one",
              "Value": 1
            },
            null,
            {
              "Key": "two",
              "Value": 2
            }
          ],
          "expected": false
        }
      ]
    },
    "tagsMap": {
      "type": "object",
      "patternProperties": {
        "^.{1,127}$": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "additionalProperties": false,
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "foo": "bar"
          }
        },
        {
          "description": "valid - kitchen sink",
          "input": {
            "küßîAbc123!@#$": "küßîAbc123!@#$",
            "test": ""
          }
        },
        {
          "description": "valid - key min length",
          "input": {
            "a": "bar"
          }
        },
        {
          "description": "invalid - empty key",
          "input": {
            "": "bar"
          },
          "expected": false
        },
        {
          "description": "valid - key max length",
          "input": {
            "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567": "bar"
          }
        },
        {
          "description": "invalid - key too long",
          "input": {
            "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345678": "bar"
          },
          "expected": false
        },
        {
          "description": "valid - empty",
          "input": {}
        }
      ]
    },
    "tagsTemplateTag": {
      "type": "object",
      "patternProperties": {
        "^(?!aws:).{1,127}$": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false,
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "foo": "bar"
          }
        },
        {
          "description": "invalid - starts with \"aws:\"",
          "input": {
            "aws:test": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - below min properties",
          "input": {},
          "expected": false
        },
        {
          "description": "invalid - above max properties",
          "input": {
            "foo": "bar",
            "foo1": "bar1"
          },
          "expected": false
        }
      ]
    },
    "tagsTemplateTagList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tagsTemplateTag"
      },
      "minLength": 0,
      "tests": [
        {
          "description": "valid - empty list",
          "input": []
        },
        {
          "description": "valid - single item",
          "input": [
            {
              "foo": "bar"
            }
          ]
        },
        {
          "description": "valid - multiple items",
          "input": [
            {
              "foo": "bar"
            },
            {
              "foo1": "bar1"
            },
            {
              "foo2": "bar2"
            }
          ]
        },
        {
          "description": "invalid - empty item",
          "input": [
            {
              "foo": "bar"
            },
            null,
            {
              "foo2": "bar2"
            }
          ],
          "expected": false
        }
      ]
    },
    "vpcCidrBlockAssociationSet": {
      "type": "object",
      "properties": {
        "AssociationId": {
          "$ref": "#/definitions/associationId"
        },
        "CidrBlock": {
          "$ref": "aws#/definitions/cidrBlock"
        },
        "CidrBlockState": {
          "$ref": "#/definitions/cidrBlockState"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "AssociationId": "vpc-cidr-assoc-0280ab6b",
            "CidrBlock": "10.2.0.0/16",
            "CidrBlockState": {
              "State": "associating"
            }
          }
        }
      ]
    },
    "instanceTenancy": {
      "type": "string",
      "enum": [
        "default",
        "dedicated",
        "host"
      ],
      "tests": [
        {
          "input": "default"
        },
        {
          "input": "host"
        },
        {
          "description": "invalid - not in the list",
          "input": "hello123",
          "expected": false
        },
        {
          "description": "invalid - upper case",
          "input": "HOST",
          "expected": false
        },
        {
          "description": "invalid - array type provided",
          "input": [
            "default",
            "host"
          ],
          "expected": false
        }
      ]
    },
    "vpc": {
      "type": "object",
      "properties": {
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "CidrBlock": {
          "$ref": "aws#/definitions/cidrBlock"
        },
        "CidrBlockAssociationSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpcCidrBlockAssociationSet"
          }
        },
        "DhcpOptionsId": {
          "$ref": "#/definitions/dhcpOptionsId"
        },
        "InstanceTenancy": {
          "$ref": "#/definitions/instanceTenancy"
        },
        "Ipv6CidrBlockAssociationSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpcIpv6CidrBlockAssociationSet"
          }
        },
        "IsDefault": {
          "$ref": "#/definitions/genericBoolean"
        },
        "State": {
          "$ref": "#/definitions/availableState"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "EnableDnsSupport": {
          "$ref": "#/definitions/vpcEnableDnsSupport"
        },
        "EnableDnsHostnames": {
          "$ref": "#/definitions/vpcEnableDnsHostnames"
        },
        "OwnerId": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vpcAka"
              }
            },
            "title": {
              "$ref": "#/definitions/vpcId"
            },
            "tags": {
              "$ref": "#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "VpcId": "vpc-a01106c2",
            "CidrBlock": "172.31.0.0/16",
            "DhcpOptionsId": "dopt-97eb5efa",
            "InstanceTenancy": "dedicated",
            "IsDefault": false,
            "State": "available",
            "CidrBlockAssociationSet": [
              {
                "AssociationId": "vpc-cidr-assoc-0280ab6b",
                "CidrBlock": "172.31.0.0/16",
                "CidrBlockState": {
                  "State": "associating"
                }
              }
            ],
            "Ipv6CidrBlockAssociationSet": [
              {
                "Ipv6CidrBlock": "2001:db8:1234:8800::/56",
                "AssociationId": "vpc-cidr-assoc-0c3e2130d180c9962",
                "Ipv6CidrBlockState": {
                  "State": "associated"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "EnableDnsSupport": {
              "Value": true
            },
            "EnableDnsHostnames": {
              "Value": true
            },
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:vpc/vpc-12345678"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "invalid - Missing VpcId",
          "input": {
            "CidrBlock": "172.31.0.0/16",
            "DhcpOptionsId": "dopt-97eb5efa",
            "InstanceTenancy": "dedicated",
            "IsDefault": false,
            "State": "available",
            "CidrBlockAssociationSet": [
              {
                "AssociationId": "vpc-cidr-assoc-0280ab6b",
                "CidrBlock": "172.31.0.0/16",
                "CidrBlockState": {
                  "State": "associating"
                }
              }
            ],
            "Ipv6CidrBlockAssociationSet": [
              {
                "Ipv6CidrBlock": "2001:db8:1234:8800::/56",
                "AssociationId": "vpc-cidr-assoc-0c3e2130d180c9962",
                "Ipv6CidrBlockState": {
                  "State": "associated"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:vpc/vpc-12345678"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "vpcAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:vpc/vpc-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:111122223333:vpc/vpc-12345678"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:111122223333:vpcs/vpc-12345678",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:us-east-1:111122223333:vpcs/vpc-12345678",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:111122223333hhfh:vpcs/vpc-12345678",
          "expected": false
        }
      ]
    },
    "vpcEnableDnsSupport": {
      "type": "object",
      "properties": {
        "Value": {
          "type": "boolean"
        }
      },
      "tests": [
        {
          "description": "Valid - Base case",
          "input": {
            "Value": true
          }
        },
        {
          "description": "Invalid - not a boolean property",
          "input": {
            "Value": "foo:bar"
          },
          "expected": false
        }
      ]
    },
    "vpcEnableDnsHostnames": {
      "type": "object",
      "properties": {
        "Value": {
          "type": "boolean"
        }
      },
      "tests": [
        {
          "description": "Valid - Base case",
          "input": {
            "Value": true
          }
        },
        {
          "description": "Invalid - not a boolean property",
          "input": {
            "Value": "foo:bar"
          },
          "expected": false
        }
      ]
    },
    "availabilityZone": {
      "type": "string",
      "tests": [
        {
          "input": "eu-central-1a"
        },
        {
          "input": "us-east-2c"
        }
      ]
    },
    "availableIpAddressCount": {
      "type": "integer",
      "minimum": 0,
      "maximum": 16777216,
      "tests": [
        {
          "input": 1
        },
        {
          "description": "invalid - higher than max value",
          "input": 16777217,
          "expected": false
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "input": null
        },
        {
          "description": "invalid - lower than the minimum",
          "input": -2,
          "expected": false
        }
      ]
    },
    "subnet": {
      "type": "object",
      "properties": {
        "AssignIpv6AddressOnCreation": {
          "type": "boolean"
        },
        "AvailabilityZoneId": {
          "type": "string"
        },
        "AvailabilityZone": {
          "$ref": "#/definitions/availabilityZone"
        },
        "AvailableIpAddressCount": {
          "$ref": "#/definitions/availableIpAddressCount"
        },
        "CidrBlock": {
          "$ref": "aws#/definitions/cidrBlock"
        },
        "DefaultForAz": {
          "type": "boolean"
        },
        "Ipv6CidrBlockAssociationSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vpcIpv6CidrBlockAssociationSet"
          }
        },
        "MapPublicIpOnLaunch": {
          "type": "boolean"
        },
        "State": {
          "$ref": "#/definitions/availableState"
        },
        "SubnetId": {
          "$ref": "#/definitions/subnetId"
        },
        "SubnetArn": {
          "$ref": "#/definitions/subnetAka"
        },
        "Tags": {
          "$ref": "aws#/definitions/tagList"
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "OwnerId": {
          "type": "string"
        },
        "OutpostArn": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subnetAka"
              }
            },
            "title": {
              "$ref": "#/definitions/subnetId"
            },
            "tags": {
              "$ref": "#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "SubnetId": "subnet-61f88a2b",
            "AssignIpv6AddressOnCreation": false,
            "AvailabilityZone": "us-east-1b",
            "AvailableIpAddressCount": 4091,
            "CidrBlock": "172.31.32.0/20",
            "DefaultForAz": true,
            "Ipv6CidrBlockAssociationSet": [],
            "MapPublicIpOnLaunch": true,
            "SubnetArn": "arn:aws:ec2:us-east-1:111122223333:subnet/subnet-61f88a2b",
            "State": "available",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:subnet/subnet-61f88a2b"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "Invalid - missing subnetId",
          "input": {
            "AssignIpv6AddressOnCreation": false,
            "AvailabilityZone": "us-east-1b",
            "AvailableIpAddressCount": 4091,
            "CidrBlock": "172.31.32.0/20",
            "DefaultForAz": true,
            "Ipv6CidrBlockAssociationSet": [],
            "MapPublicIpOnLaunch": true,
            "State": "available",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:subnet/subnet-61f88a2b"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "Invalid - missing vpcid",
          "input": {
            "SubnetId": "subnet-61f88a2b",
            "AssignIpv6AddressOnCreation": false,
            "AvailabilityZone": "us-east-1b",
            "AvailableIpAddressCount": 4091,
            "CidrBlock": "172.31.32.0/20",
            "DefaultForAz": true,
            "Ipv6CidrBlockAssociationSet": [],
            "MapPublicIpOnLaunch": true,
            "State": "available",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:subnet/subnet-61f88a2b"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "subnetAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:subnet/subnet-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:111122223333:subnet/subnet-12345678"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:111122223333:subnet/subnets-12345678",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:usa-east-1:111122223333:subnet/subnet-12345678",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:111122223333hhfh:subnet/subnet-12345678",
          "expected": false
        }
      ]
    },
    "routeTableAssociationId": {
      "type": "string",
      "pattern": "^rtbassoc-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "rtbassoc-1f382e7d"
        },
        {
          "input": "rtbassoc-00c1130ca50e94283"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "rtbassoc-b611064z",
          "expected": false
        },
        {
          "description": "invalid - should always start with rtbassoc",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "routeTableAssociationSet": {
      "type": "object",
      "properties": {
        "Main": {
          "$ref": "#/definitions/genericBoolean"
        },
        "RouteTableAssociationId": {
          "$ref": "#/definitions/routeTableAssociationId"
        },
        "RouteTableId": {
          "$ref": "#/definitions/routeTableId"
        },
        "SubnetId": {
          "$ref": "#/definitions/subnetId"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "Main": true,
            "RouteTableAssociationId": "rtbassoc-91fbacf5",
            "RouteTableId": "rtb-1a459c7e",
            "SubnetId": "subnet-b61f49f0"
          }
        }
      ]
    },
    "virtualGatewayId": {
      "type": "string",
      "pattern": "^vgw-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "vgw-f211f09b"
        },
        {
          "input": "vgw-0fcefe5155c9023ce"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "vgw-b611064z",
          "expected": false
        },
        {
          "description": "invalid - should always start with vgw",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "propagatingVgwSet": {
      "type": "object",
      "properties": {
        "GatewayId": {
          "$ref": "#/definitions/virtualGatewayId"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "GatewayId": "vgw-f211f09b"
          }
        }
      ]
    },
    "origin": {
      "type": "string",
      "enum": [
        "CreateRouteTable",
        "CreateRoute",
        "EnableVgwRoutePropagation"
      ],
      "tests": [
        {
          "input": "CreateRoute"
        },
        {
          "description": "invalid - not in the list",
          "input": "hello123",
          "expected": false
        },
        {
          "description": "invalid - upper case",
          "input": "CREATEROUTE",
          "expected": false
        },
        {
          "description": "invalid - array type provided",
          "input": [
            "CreateRouteTable",
            "CreateRoute"
          ],
          "expected": false
        }
      ]
    },
    "routeSetState": {
      "type": "string",
      "enum": [
        "active",
        "blackhole"
      ],
      "tests": [
        {
          "input": "active"
        },
        {
          "input": "blackhole"
        },
        {
          "description": "invalid - not in the list",
          "input": "hello123",
          "expected": false
        },
        {
          "description": "invalid - upper case",
          "input": "ACTIVE",
          "expected": false
        },
        {
          "description": "invalid - array type provided",
          "input": [
            "active",
            "blackhole"
          ],
          "expected": false
        }
      ]
    },
    "routeSet": {
      "type": "object",
      "properties": {
        "DestinationCidrBlock": {
          "$ref": "aws#/definitions/cidrBlock"
        },
        "DestinationIpv6CidrBlock": {
          "$ref": "aws#/definitions/ipv6CidrBlock"
        },
        "EgressOnlyInternetGatewayId": {
          "$ref": "#/definitions/egressOnlyIGId"
        },
        "GatewayId": {
          "$ref": "#/definitions/baseString"
        },
        "InstanceId": {
          "$ref": "aws-ec2#/definitions/instanceId"
        },
        "InstanceOwnerId": {
          "$ref": "aws#/definitions/accountId"
        },
        "NatGatewayId": {
          "$ref": "#/definitions/natGatewayId"
        },
        "NetworkInterfaceId": {
          "$ref": "#/definitions/networkInterfaceId"
        },
        "Origin": {
          "$ref": "#/definitions/origin"
        },
        "State": {
          "$ref": "#/definitions/routeSetState"
        },
        "VpcPeeringConnectionId": {
          "$ref": "#/definitions/vpcPeeringConnectionId"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "DestinationCidrBlock": "172.31.0.0/16",
            "DestinationIpv6CidrBlock": "2600:1f18:2368:f300::/56",
            "GatewayId": "local",
            "InstanceId": "i-1234567890abcdef0",
            "InstanceOwnerId": 123456789012,
            "NatGatewayId": "nat-22574640",
            "NetworkInterfaceId": "eni-f9ba99bf",
            "Origin": "CreateRoute",
            "State": "active",
            "VpcPeeringConnectionId": "pcx-111aaa22"
          }
        }
      ]
    },
    "routeTable": {
      "type": "object",
      "properties": {
        "Associations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/routeTableAssociationSet"
          }
        },
        "PropagatingVgws": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/propagatingVgwSet"
          }
        },
        "Routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/routeSet"
          }
        },
        "RouteTableId": {
          "$ref": "#/definitions/routeTableId"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "OwnerId": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/routeTableAka"
              }
            },
            "title": {
              "$ref": "#/definitions/routeTableId"
            },
            "tags": {
              "$ref": "#/definitions/tagsMap"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "RouteTableId": "rtb-ca5becb5",
            "Associations": [
              {
                "Main": true,
                "RouteTableAssociationId": "rtbassoc-9b4985e5",
                "RouteTableId": "rtb-ca5becb5"
              }
            ],
            "PropagatingVgws": [],
            "Routes": [
              {
                "DestinationCidrBlock": "172.31.0.0/16",
                "GatewayId": "local",
                "Origin": "CreateRouteTable",
                "State": "active"
              },
              {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": "igw-b394bdcb",
                "Origin": "CreateRoute",
                "State": "blackhole"
              },
              {
                "DestinationIpv6CidrBlock": "2600:1f18:2368:f300::/56",
                "GatewayId": "local",
                "Origin": "CreateRouteTable",
                "State": "blackhole"
              }
            ],
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Turbot"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:ap-south-1:123456789012:route-table/rtb-ca5becb5"
              ],
              "tags": {
                "Env": "Test",
                "App": "Turbot"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "invalid - missing required turbot data",
          "input": {
            "RouteTableId": "rtb-ca5becb5",
            "title": "rtb-ca5becb5",
            "VpcId": "vpc-27eb185d",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Turbot"
              }
            ],
            "tagsMap": {
              "Env": "Test",
              "App": "Turbot"
            }
          }
        },
        {
          "description": "invalid - missing required routetableid",
          "input": {
            "title": "rtb-ca5becb5",
            "VpcId": "vpc-27eb185d",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Turbot"
              }
            ],
            "tagsMap": {
              "Env": "Test",
              "App": "Turbot"
            },
            "turbot": {
              "akas": [
                "arn:aws:ec2:ap-south-1:123456789012:route-table/rtb-ca5becb5"
              ],
              "tags": {
                "Env": "Test",
                "App": "Turbot"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "routeTableAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-[0-9]{1}:[0-9]{12}:route-table/rtb-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "test": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:ap-south-1:123456789012:route-table/rtb-ca5becb5"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:ap-south-1:123456789012:routeTable/rtb-ca5becb5",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:asouth-1:123456789012:route-table/rtb-ca5becb5",
          "expected": false
        }
      ]
    },
    "egressOnlyIGId": {
      "type": "string",
      "pattern": "^eigw-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "eigw-0f89a33420c1931d7"
        },
        {
          "input": "eigw-032a826a"
        },
        {
          "description": "invalid - should always start with eigw",
          "input": "id-b61106d4",
          "expected": false
        },
        {
          "description": "invalid - too short",
          "input": "eigw-63a540",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "eigw-63a5400a63a5400a63a5400a",
          "expected": false
        }
      ]
    },
    "dhcpOptions": {
      "type": "object",
      "properties": {
        "DhcpOptionsId": {
          "$ref": "#/definitions/dhcpOptionsId"
        },
        "DhcpConfigurations": {
          "$ref": "#/definitions/DhcpConfigurationList"
        },
        "OwnerId": {
          "type": "string"
        },
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dhcpTags"
          }
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dhcpOptionsIdArn"
              }
            },
            "title": {
              "$ref": "#/definitions/dhcpOptionsId"
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "DhcpOptionsId": "dopt-7a8b9c2d",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:dhcp-options/dopt-a9237aaa"
              ],
              "title": "dopt-7a8b9c2d",
              "tags": {
                "MYDHCP": "bar",
                "MYDHCP2": "bar2"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1",
                  "partition": "aws"
                },
                "createTimestamp": "2019-03-10T05:15:21.493Z"
              }
            }
          }
        }
      ]
    },
    "dhcpTags": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "dhcpOptionsIdArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:dhcp-options/dopt-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "arn:aws:ec2:us-east-1:123456789012:dhcp-options/dopt-a9237aaa"
        },
        {
          "description": "invalid - wrong account id provided",
          "input": "arn:aws:ec2:us-east-1:12356789012:dhcp-options/dopt-a9237aaa",
          "expected": false
        },
        {
          "description": "invalid - too short dhcp options id",
          "input": "arn:aws:ec2:us-east-1:123456789012:dhcp-options/dopt-a923",
          "expected": false
        }
      ]
    },
    "DhcpConfigurationList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DhcpConfiguration"
      }
    },
    "DhcpConfiguration": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Values": {
          "$ref": "#/definitions/DhcpConfigurationValueList"
        }
      }
    },
    "DhcpConfigurationValueList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AttributeValue"
      }
    },
    "AttributeValue": {
      "type": "object",
      "properties": {
        "Value": {
          "$ref": "#/definitions/AttributeType"
        }
      }
    },
    "AttributeType": {
      "type": "string"
    },
    "route": {
      "type": "object",
      "properties": {
        "RouteTableId": {
          "$ref": "#/definitions/routeTableId"
        },
        "DestinationCidrBlock": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "aws#/definitions/cidrBlock"
            }
          ]
        },
        "DestinationIpv6CidrBlock": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "aws#/definitions/ipv6CidrBlock"
            }
          ]
        },
        "EgressOnlyInternetGatewayId": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/egressOnlyIGId"
            }
          ]
        },
        "GatewayId": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/baseString"
            }
          ]
        },
        "InstanceId": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "aws-ec2#/definitions/instanceId"
            }
          ]
        },
        "NatGatewayId": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/natGatewayId"
            }
          ]
        },
        "NetworkInterfaceId": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/networkInterfaceId"
            }
          ]
        },
        "TransitGatewayId": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/vpcPeeringConnectionId"
            }
          ]
        },
        "VpcPeeringConnectionId": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/vpcPeeringConnectionId"
            }
          ]
        },
        "Origin": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/origin"
            }
          ]
        },
        "State": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/definitions/routeSetState"
            }
          ]
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/routeAka"
              }
            },
            "title": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "base case",
          "input": {
            "RouteTableId": "rtb-0a59c28f047dba02f",
            "DestinationCidrBlock": "172.30.0.0/16",
            "GatewayId": "igw-0f210095e0e0c53a3",
            "Origin": "CreateRouteTable",
            "State": "active",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:route-table/rtb-0a59c28f047dba02f:172.30.0.0/16\""
              ],
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "invalid - missing required routetableid",
          "input": {
            "DestinationCidrBlock": "172.30.0.0/16",
            "GatewayId": "igw-0f210095e0e0c53a3",
            "Origin": "CreateRouteTable",
            "State": "active",
            "turbot": {
              "akas": [
                "arn:aws:ec2:ap-south-1:123456789012:route-table/rtb-0a59c28f047dba02f:igw-0f210095e0e0c53a3_172.30.0.016"
              ],
              "tags": {
                "Env": "Test",
                "App": "Turbot"
              },
              "metadata": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          },
          "expected": false
        }
      ]
    },
    "routeAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-[0-9]{1}:[0-9]{12}:route-table/rtb-[0-9a-f]{8}(?:[0-9a-f]{9})?:[/a-z0-9.]+$",
      "test": [
        {
          "description": "Valid - Base case ipv4",
          "input": "arn:aws:ec2:ap-south-1:123456789012:route-table/rtb-ca5becb5:172.30.0.0/16"
        },
        {
          "description": "Valid - Base case ipv6",
          "input": "arn:aws:ec2:ap-south-1:123456789012:route-table/rtb-ca5becb5:172.20.0.0/16"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:ap-south-1:123456789012:routeTable/rtb-ca5becb5",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:asouth-1:123456789012:route-table/rtb-ca5becb5",
          "expected": false
        }
      ]
    }
  },
  "permission": {
    "types": {
      "vpc": {
        "title": "VPC",
        "parent": "aws#/permission/types/aws",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iam"
      }
    }
  },
  "policy": {
    "types": {
      "vpcCoreCustomEventPatterns": {
        "title": "@turbot/aws-vpc-core",
        "icon": "fal-file-invoice",
        "parent": "aws#/policy/types/eventHandlersEventsRulesCustomEventPatterns",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The CloudWatch Events event pattern used by the AWS VPC Core module to specify\nwhich events to forward to the Turbot Event Handlers.\n",
        "category": "turbot#/control/categories/configured",
        "schema": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "vpcServiceEnabled": {
        "title": "Enabled",
        "icon": "fal-traffic-light-go",
        "description": "Enabled VPC.",
        "parent": "#/resource/types/vpcService",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Enabled: Metadata Only",
            "Disabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Disabled"
        }
      },
      "vpcServicePermissions": {
        "title": "Permissions",
        "icon": "fal-traffic-light-go",
        "description": "Configure whether permissions policies are in effect for AWS VPC. This setting does not affect account level permissions\n(AWS/Admin, AWS/Owner, etc).\n\n**Note:** The behavior of this policy depends on the value of `AWS > Permissions`.\n",
        "parent": "#/resource/types/vpcService",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > VPC > Enabled & AWS > EC2 > API Enabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Enabled if AWS > VPC > Enabled & AWS > EC2 > API Enabled"
        }
      },
      "vpcServicePermissionsLockdown": {
        "title": "Lockdown",
        "icon": "fal-lock",
        "parent": "#/policy/types/vpcServicePermissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions"
      },
      "vpcServicePermissionsLevels": {
        "title": "Levels",
        "icon": "fal-layer-group",
        "description": "Define the permissions levels that can be used to grant access to an AWS account.\nPermissions levels defined will appear in the UI to assign access to Turbot users.\nThis policy provides a default for `Permissions > Levels` in each service, however\nyou can explicitly override the setting for each service if desired\n",
        "parent": "#/policy/types/vpcServicePermissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Metadata",
              "ReadOnly",
              "Operator",
              "Admin",
              "Owner"
            ]
          }
        },
        "defaultTemplate": "{% if $.availableLevels.items[0].value | length == 0 %} [] {% endif %}{% for item in $.availableLevels.items[0].value %}- {{ item }}\n{% endfor %}",
        "defaultTemplateInput": [
          "{\n  item: account {\n    turbot{\n      id\n    }\n  }\n}\n",
          "{\n  availableLevels: policyValues(filter:\"policyTypeLevel:self resourceId:{{ $.item.turbot.id }} policyTypeId:'tmod:@turbot/aws-iam#/policy/types/permissionsLevelsDefault'\") {\n    items {\n      value\n    }\n  }\n}\n"
        ]
      },
      "vpcServicePermissionsLevelsModifiers": {
        "title": "Modifiers",
        "icon": "fal-user-edit",
        "description": "A map of AWS API to Turbot Permission Level used to customize Turbot's standard permissions.\nYou can add, remove or redefine the mapping of AWS API operations to Turbot permissions levels here.\n\n**Note:** Modifiers are cumulative - if you add a permission to the Metadata level, it is also added\nto ReadOnly, Operator and Admin. Modifier policies set here apply ONLY to the AWS level\n\n```\nexample:\n  - \"glacier:createvault\": admin\n  - \"glacier:ListVaults\": metadata\n  - \"s3:DeleteBucket\": none\n```\n",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "$ref": "aws-iam#/definitions/awsModifierList"
        }
      },
      "vpcServicePermissionsLevelsCgwAdministration": {
        "title": "CGW Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage CGW Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsSecurityGroupAdministration": {
        "title": "Security Group Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Security Group Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsDhcpOptionsAdministration": {
        "title": "DHCP Options Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage DHCP Options Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsEgwAdministration": {
        "title": "EGW Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage EGW Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsEndpointAdministration": {
        "title": "Endpoint Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Endpoint Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsFlowLogsAdministration": {
        "title": "Flow Logs Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Flow Logs Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsIgwAdministration": {
        "title": "IGW Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage IGW Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsNatGatewayAdministration": {
        "title": "NAT Gateway Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage NAT Gateway Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsNetworkAclAdministration": {
        "title": "Network ACL Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Network ACL Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsPeeringConnectionAdministration": {
        "title": "Peering Connection Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Peering Connection Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsRouteTableAdministration": {
        "title": "Route Table Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Route Table Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsSubnetAdministration": {
        "title": "Subnet Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Subnet Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsVgwAdministration": {
        "title": "VGW Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage VGW Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsVpcAdministration": {
        "title": "VPC Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage VPC Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "vpcServicePermissionsLevelsVpnConnectionAdministration": {
        "title": "VPN Connection Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage VPN Connection Administration.",
        "parent": "#/policy/types/vpcServicePermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "awsCompiledServicePermissions": {
        "title": "@turbot/aws-vpc",
        "icon": "fal-calculator",
        "description": "A calculated policy that Turbot uses to create a compiled list of ALL permissions\nfor AWS VPC that is used as input to the control that manages the IAM stack.\n",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledServicePermissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "$ref": "aws-iam#/definitions/awsRightDefinitionList"
        }
      },
      "awsLevelsCompiled": {
        "title": "@turbot/aws-vpc",
        "description": "A calculated policy that Turbot uses to create a compiled list of ALL permissions for\nAWS VPC that is used as input to the stack that manages the Turbot IAM permissions objects.\n",
        "icon": "fal-calculator",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "$ref": "aws-iam#/definitions/awsLevelDefinitionList"
        }
      },
      "vpcServiceRegionsDefault": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC resources are supported for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS VPC resources' Regions policies.\n",
        "schema": {
          "allOf": [
            {
              "$ref": "aws#/definitions/regionNameMatcherList"
            },
            {
              "default": [
                "af-south-1",
                "ap-east-1",
                "ap-northeast-1",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-south-1",
                "ap-southeast-1",
                "ap-southeast-2",
                "ca-central-1",
                "cn-north-1",
                "cn-northwest-1",
                "eu-central-1",
                "eu-north-1",
                "eu-west-1",
                "eu-west-2",
                "eu-west-3",
                "me-south-1",
                "sa-east-1",
                "us-east-1",
                "us-east-2",
                "us-gov-east-1",
                "us-gov-west-1",
                "us-west-1",
                "us-west-2"
              ]
            }
          ]
        }
      },
      "vpcServiceApprovedRegionsDefault": {
        "title": "Approved Regions [Default]",
        "icon": "fal-check-double",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC resources are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS VPC resources' Approved > Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/approvedRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "vpcServiceStack": {
        "title": "Stack",
        "icon": "fal-layer-group",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure a custom stack on AWS, per the custom `Stack > Source`.\n\nA Turbot `Stack` is a set of resources configured by Turbot, as specified\nvia Terraform source.  Stacks are responsible for the creation and deletion\nof multiple resources. Once created, stack resources are responsible for\nconfiguring themselves from the stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Configured",
            "Enforce: Configured"
          ],
          "default": "Skip"
        }
      },
      "vpcServiceStackSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/vpcServiceStack",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Terraform HCL source used to configure this stack.\n\nA Turbot `Stack` is a set of resources configured by Turbot, as specified\nvia Terraform source.  Stacks are responsible for the creation and deletion\nof multiple resources. Once created, stack resources are responsible for\nconfiguring themselves from the stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "vpcServiceStackVariables": {
        "title": "Variables",
        "icon": "fal-pen",
        "parent": "#/policy/types/vpcServiceStack",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Terraform variables in Terraform HCL that will be used as\ninputs to the stack as a [.tfvars file](https://www.terraform.io/docs/configuration/variables.html#variable-definitions-tfvars-files).\n\nA Turbot `Stack` is a set of resources configured by Turbot,\nas specified  via Terraform source.  Stacks are responsible\nfor the creation and deletion of multiple resources. Once created,\nstack resources are responsible for configuring themselves from\nthe stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "vpcServiceStackSecretVariables": {
        "title": "Secret Variables",
        "icon": "fal-pen",
        "parent": "#/policy/types/vpcServiceStack",
        "category": "turbot#/control/categories/configured",
        "secret": true,
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Terraform secret variables in Terraform HCL that will be used as\ninputs to the stack as a [.tfvars file](https://www.terraform.io/docs/configuration/variables.html#variable-definitions-tfvars-files).\n\nA Turbot `Stack` is a set of resources configured by Turbot,\nas specified  via Terraform source.  Stacks are responsible\nfor the creation and deletion of multiple resources. Once created,\nstack resources are responsible for configuring themselves from\nthe stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "vpcServiceStackTerraformVersion": {
        "title": "Terraform Version",
        "icon": "fal-bring-forward",
        "parent": "#/policy/types/vpcServiceStack",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Version of Terraform to use for this stack.\nSpecify an [npm-style semver](https://docs.npmjs.com/misc/semver) string to\ndetermine which version of the Terraform container\nTurbot will use to run this stack.\n\nA Turbot `Stack` is a set of resources configured by Turbot,\nas specified  via Terraform source.  Stacks are responsible\nfor the creation and deletion of multiple resources. Once created,\nstack resources are responsible for configuring themselves from\nthe stack source via their `Configured` control.\n",
        "schema": {
          "type": "string"
        },
        "defaultTemplate": "{% if $.terraformVersion %}\"{{$.terraformVersion}}\"{% else %}\"\"{% endif %}",
        "defaultTemplateInput": "{\n  terraformVersion: policy(uri:\"tmod:@turbot/turbot#/policy/types/stackTerraformVersion\")\n}\n"
      },
      "vpcServiceTagsTemplate": {
        "title": "Tags Template [Default]",
        "icon": "fal-tags",
        "description": "A template used to generate the keys and values for AWS VPC resources.\n\nBy default, all VPC resource Tags > Template policies will use this value.\n",
        "parent": "#/resource/types/vpcService",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/resourceTags",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws#/policy/types/defaultTagsTemplate\") {\n    value\n  }\n}\n"
      },
      "vpcServiceTrustedAccounts": {
        "title": "Trusted Accounts [Default]",
        "icon": "fal-handshake",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Accounts that are trusted for access in the AWS VPC policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"account\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"013122550996\"\n  - \"560741234067\"\n```\n\n**Note**: Setting the policy to `Empty` array will remove all accounts.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9]{12}|^\\*$"
          }
        },
        "defaultTemplate": "{% if $.trustedAccounts.value | length == 0 %}[]{% else %}{% for item in $.trustedAccounts.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedAccounts: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedAccounts\") {\n    value\n  }\n}\n"
      },
      "vpcServiceTrustedServices": {
        "title": "Trusted Services [Default]",
        "icon": "fal-user-cog",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Services that are trusted for access in the AWS VPC policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"service\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"sns.amazonaws.com\"\n  - \"ec2.amazonaws.com\"\n```\n\n**Note**: Setting the policy to `Empty` array will remove all services.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^\\S*\\.amazonaws\\.com$|^\\*$)"
          }
        },
        "defaultTemplate": "{% if $.trustedServices.value | length == 0 %}[]{% else %}{% for item in $.trustedServices.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedServices: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedServices\") {\n    value\n  }\n}\n"
      },
      "vpcServiceTrustedOrganizations": {
        "title": "Trusted Organizations [Default]",
        "icon": "fal-hands-helping",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Organizations that are trusted for access in the AWS VPC policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"organization\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"o-333333333\"\n  - \"o-c3a5y4wd52\"\n```\n\n**Note**: `Trusted Access > Organization Restrictions` are ONLY\napplied to AWS principals.  Services and Federated principals do\nNOT contain the `aws:PrincipalOrgId` condition key, and thus\ncannot be validated against the Organization.\n\nSetting the policy to `Empty` array will remove all organizations.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^o-[a-z0-9]{10,32}$|^\\*$)"
          }
        },
        "defaultTemplate": "{% if $.trustedOrganizations.value | length == 0 %}[]{% else %}{% for item in $.trustedOrganizations.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedOrganizations: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedOrganizations\") {\n    value\n  }\n}\n"
      },
      "vpcActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Determine the action to take when an AWS VPC vpc, based on the `AWS > VPC > VPC > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > VPC > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "vpcActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/vpcActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "The number of days since the AWS VPC vpc\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > VPC > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "vpcActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/vpcActive",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "The age after which the AWS VPC vpc\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > VPC > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "vpcActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/vpcActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nvpcs to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > VPC > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "vpcApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Determine the action to take when an AWS VPC vpc is not approved based on `AWS > VPC > VPC > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "vpcApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/vpcApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "A list of AWS regions in which AWS VPC vpcs are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC vpc is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > VPC > VPC > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceApprovedRegionsDefault\")\n}\n"
      },
      "vpcApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/vpcApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Determine whether the AWS VPC vpc is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC vpc is not approved, it will be subject to the action specified in the `AWS > VPC > VPC > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > VPC > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > VPC > Enabled"
        }
      },
      "vpcApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/vpcApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "The policy allows you to set vpcs to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS VPC vpc is not matched by the approved list, it will be subject to the action specified in the `AWS > VPC > VPC > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "vpcCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC vpc into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > VPC > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "vpcConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "vpcConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/vpcConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "vpcConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/vpcConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "defaultVPC": {
        "title": "Default VPC",
        "icon": "fal-object-group",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/control/categories/resourceApproved"
      },
      "defaultVpcApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "description": "This policy defines whether the default VPC in the region is approved for use.\n",
        "parent": "#/policy/types/defaultVPC",
        "targets": "aws#/resource/types/region",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Force delete unapproved"
          ],
          "example": [
            "Enforce: Force delete unapproved"
          ],
          "default": "Skip"
        }
      },
      "defaultVpcApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "description": "Determine whether the AWS default VPC is allowed to exist in region.\n\nThis policy will be evaluated by the Approved control. If an AWS default VPC is not approved, it will be subject to the action specified in the AWS > VPC > Default VPC > Approved policy.\n\nSee https://turbot.com/docs/concepts/guardrails/approved for more information.\n",
        "parent": "#/policy/types/defaultVpcApproved",
        "targets": "aws#/resource/types/region",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > VPC > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > VPC > Enabled"
        }
      },
      "vpcDnsHostnames": {
        "title": "DNS Hostnames",
        "icon": "fal-map-marked-alt",
        "description": "Check if the AWS VPC DNS Hostnames configuration is set correctly.",
        "parent": "#/resource/types/vpc",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Enforce: Disabled",
            "Enforce: Enabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "vpcDnsResolution": {
        "title": "DNS Resolution",
        "icon": "fal-map-marked-alt",
        "description": "Check if the AWS VPC DNS Resolution configuration is set correctly.",
        "parent": "#/resource/types/vpc",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Enforce: Disabled",
            "Enforce: Enabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "vpcFlowLogging": {
        "icon": "fal-file-contract",
        "title": "Flow Logging",
        "description": "Configure VPC Flow logging for the VPC.\n\nVPC Flow Logs is a feature that enables you to capture information about\nthe IP traffic going to and from network interfaces in your VPC. Flow log\ndata can be published to Amazon CloudWatch Logs and Amazon S3.\n",
        "parent": "#/resource/types/vpc",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Configured per `Flow Logging > *`",
            "Check: Not configured",
            "Enforce: Configured per `Flow Logging > *`",
            "Enforce: Not configured"
          ],
          "default": "Skip"
        }
      },
      "vpcFlowLoggingLogFormat": {
        "icon": "fal-file-contract",
        "title": "Log Record Format",
        "description": "Configure the log record format to specify the fields to include in the flow log record.\n",
        "parent": "#/policy/types/vpcFlowLogging",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "account-id",
              "action",
              "az-id",
              "bytes",
              "dstaddr",
              "dstport",
              "end",
              "flow-direction",
              "instance-id",
              "interface-id",
              "log-status",
              "packets",
              "pkt-dst-aws-service",
              "pkt-dstaddr",
              "pkt-src-aws-service",
              "pkt-srcaddr",
              "protocol",
              "region",
              "srcaddr",
              "srcport",
              "start",
              "sublocation-id",
              "sublocation-type",
              "subnet-id",
              "tcp-flags",
              "traffic-path",
              "type",
              "version",
              "vpc-id"
            ]
          },
          "default": [
            "version",
            "account-id",
            "interface-id",
            "srcaddr",
            "dstaddr",
            "srcport",
            "dstport",
            "protocol",
            "packets",
            "bytes",
            "start",
            "end",
            "action",
            "log-status"
          ]
        }
      },
      "vpcFlowLoggingS3": {
        "icon": "fab-bitbucket",
        "title": "S3",
        "description": "Configure VPC flow logs to be sent to an S3 bucket,\nper the `Flow Logging > S3 > *` policies\n",
        "parent": "#/policy/types/vpcFlowLogging",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "default": "Enabled"
        }
      },
      "vpcFlowLoggingS3TrafficType": {
        "icon": "fab-bitbucket",
        "title": "Traffic Type",
        "description": "The type of traffic to capture in the VPC flow logs.\nYou can log traffic that the resource accepts or rejects, or all traffic.\n",
        "parent": "#/policy/types/vpcFlowLoggingS3",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "Accept",
            "Reject",
            "All"
          ],
          "default": "All"
        }
      },
      "vpcFlowLoggingS3Bucket": {
        "icon": "fab-bitbucket",
        "title": "Bucket",
        "description": "The name of an S3 Bucket to which the VPC flow logs will be delivered.\nThe S3 Bucket must already exist and the log delivery\nservice (delivery.logs.amazonaws.com) must be granted the appropriate access.\nThe bucket can reside in any account but must be in the same region as the VPC.\n",
        "parent": "#/policy/types/vpcFlowLoggingS3",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string"
        },
        "defaultTemplate": "{{ $.bucketName }}",
        "defaultTemplateInput": [
          "{\n  region {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  bucketName: policy(uri: \"aws#/policy/types/loggingBucketDefault\", resourceId: \"{{ $.region.turbot.id }}\")\n}\n"
        ]
      },
      "vpcFlowLoggingS3KeyPrefix": {
        "icon": "fab-bitbucket",
        "title": "Key Prefix",
        "description": "An S3 key prefix to which the VPC flow logs will be written.\nThe file names of the access logs use the following format\n`bucket_ARN/prefix/AWSLogs/aws_account_id/vpcflowlogs/region/year/month/day/log_file_name.log.gz`\n",
        "parent": "#/policy/types/vpcFlowLoggingS3",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string",
          "maxLength": 200,
          "default": "",
          "example": "turbot_"
        }
      },
      "vpcFlowLoggingCloudWatch": {
        "icon": "fal-bell",
        "title": "Cloud Watch",
        "description": "Configure VPC flow logs to be sent to a CloudWatch Log Group,\nper the `Flow Logging > CloudWatch > *` policies\n",
        "parent": "#/policy/types/vpcFlowLogging",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "default": "Disabled"
        }
      },
      "vpcFlowLoggingCloudWatchTrafficType": {
        "icon": "fal-bell",
        "title": "Traffic Type",
        "description": "The type of traffic to capture in the VPC flow logs.\nYou can log traffic that the resource accepts or rejects, or all traffic.\n",
        "parent": "#/policy/types/vpcFlowLoggingCloudWatch",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "Accept",
            "Reject",
            "All"
          ],
          "default": "All"
        }
      },
      "vpcFlowLoggingCloudWatchLogGroup": {
        "icon": "fal-bell",
        "title": "Log Group",
        "description": "The name of a CloudWatch Log Group to which the VPC flow logs will be delivered.\nNote the following\n  - If no log group exists with this name exists, one will be created\n  - If an existing log group exists with the same name, it will be used\n  - The log group will **NOT** be deleted if flow logging is disabled\n",
        "parent": "#/policy/types/vpcFlowLoggingCloudWatch",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string"
        },
        "defaultTemplate": "/turbot/flowlogs/{{ $.vpc.VpcId }}",
        "defaultTemplateInput": "{\n  vpc {\n    VpcId\n  }\n}\n"
      },
      "vpcFlowLoggingCloudWatchRole": {
        "icon": "fal-bell",
        "title": "Role",
        "description": "The name of an IAM role that Flow Logging will assume to write logs to CloudWatch logs.\nIf CloudWatch Log forwarding is enabled, you must also specify a role that CloudTrail can assume to write the logs.  This role must have the correct access for the CloudWatch Log Group, and must allow the CloudTrail Service (cloudtrail.amazonaws.com) the ability to assume the role\nThe role must already exist - the stack wont create it",
        "parent": "#/policy/types/vpcFlowLoggingCloudWatch",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string"
        },
        "defaultTemplate": "{{ $.roleName }}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  roleName: policy(uri:\"aws#/policy/types/serviceRolesFlowLoggingName\", resourceId: \"{{ $.account.turbot.id }}\")\n}\n"
        ]
      },
      "vpcFlowLoggingSource": {
        "icon": "fal-calculator",
        "title": "Source",
        "description": "The Terraform source used to configure VPC Flow logging for the VPC.\n  This policy is read-only, and generated by Turbot based on the\n  `Flow Logging > S3 > *` and  `Flow Logging > CloudWatch > *` policies.\n",
        "parent": "#/policy/types/vpcFlowLogging",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/turbot",
        "schema": {
          "type": "string",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "vpcRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC vpcs are supported for use.\n\nAny vpcs in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "vpcTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Determine the action to take when an AWS VPC vpc tags are not updated based on the `AWS > VPC > VPC > Tags > *` policies.\n\nThe control ensure AWS VPC vpc tags include tags defined in `AWS > VPC > VPC > Tags > Template`.\n\nTags not defined in VPC Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "vpcTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/vpcTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "The template is used to generate the keys and values for AWS VPC vpc.\n\nTags not defined in VPC Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "vpcUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS VPC vpcs that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > VPC > VPC > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "vpcUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/vpcUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 5
        }
      },
      "subnetActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Determine the action to take when an AWS VPC subnet, based on the `AWS > VPC > Subnet > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Subnet > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "subnetActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/subnetActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "The number of days since the AWS VPC subnet\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Subnet > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "subnetActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/subnetActive",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "The age after which the AWS VPC subnet\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Subnet > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "subnetApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Determine the action to take when an AWS VPC subnet is not approved based on `AWS > VPC > Subnet > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "subnetApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/subnetApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "A list of AWS regions in which AWS VPC subnets are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC subnet is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > VPC > Subnet > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceApprovedRegionsDefault\")\n}\n"
      },
      "subnetApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/subnetApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Determine whether the AWS VPC subnet is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC subnet is not approved, it will be subject to the action specified in the `AWS > VPC > Subnet > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > VPC > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > VPC > Enabled"
        }
      },
      "subnetSetAutoAssignPublicIp": {
        "title": "Auto Assign Public IP",
        "icon": "fal-cog",
        "description": "Define the Auto-assign Public IP setting required for `AWS > VPC > Subnet`.\n\nAll subnets have an attribute that determines whether a network interface created in the subnet automatically receives a public IPv4 address (also referred to as a public IP address). Therefore, when you launch an instance into a subnet that has this attribute enabled, a public IP address is assigned to the primary network interface (eth0) that's created for the instance. A public IP address is mapped to the primary private IP address through network address translation (NAT).\n\nThe values `Check: Auto Assign Public IP` and `Enforce: Auto Assign Public IP` have been deprecated and replaced by `Check: Enabled` and `Enforce: Enabled` respectively. The deprecated values will be removed in the next major version, v6.0.0\n",
        "parent": "#/resource/types/subnet",
        "targets": "#/resource/types/subnet",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Auto Assign Public IP",
            "Check: Enabled",
            "Check: Disabled",
            "Enforce: Auto Assign Public IP",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "subnetCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC subnet into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Subnet > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "subnetConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "subnetConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/subnetConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "subnetConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/subnetConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "subnetRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC subnets are supported for use.\n\nAny subnets in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "subnetTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Determine the action to take when an AWS VPC subnet tags are not updated based on the `AWS > VPC > Subnet > Tags > *` policies.\n\nThe control ensure AWS VPC subnet tags include tags defined in `AWS > VPC > Subnet > Tags > Template`.\n\nTags not defined in Subnet Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "subnetTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/subnetTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "The template is used to generate the keys and values for AWS VPC subnet.\n\nTags not defined in Subnet Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "subnetUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS VPC subnets that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > VPC > Subnet > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "subnetUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/subnetUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 1000
        }
      },
      "routeTableActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Determine the action to take when an AWS VPC route table, based on the `AWS > VPC > Route Table > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Route Table > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "routeTableActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/routeTableActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "The number of days since the AWS VPC route table\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Route Table > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "routeTableActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/routeTableActive",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "The age after which the AWS VPC route table\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Route Table > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "routeTableApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Determine the action to take when an AWS VPC route table is not approved based on `AWS > VPC > Route Table > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "routeTableApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/routeTableApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "A list of AWS regions in which AWS VPC route tables are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC route table is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > VPC > Route Table > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceApprovedRegionsDefault\")\n}\n"
      },
      "routeTableApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/routeTableApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Determine whether the AWS VPC route table is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC route table is not approved, it will be subject to the action specified in the `AWS > VPC > Route Table > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > VPC > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > VPC > Enabled"
        }
      },
      "routeTableCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC route table into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Route Table > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "routeTableConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "routeTableConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/routeTableConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "routeTableConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/routeTableConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "routeTableRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC route tables are supported for use.\n\nAny route tables in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "routeTableTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Determine the action to take when an AWS VPC route table tags are not updated based on the `AWS > VPC > Route Table > Tags > *` policies.\n\nThe control ensure AWS VPC route table tags include tags defined in `AWS > VPC > Route Table > Tags > Template`.\n\nTags not defined in Route Table Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "routeTableTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/routeTableTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "The template is used to generate the keys and values for AWS VPC route table.\n\nTags not defined in Route Table Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "routeTableUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS VPC route tables that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > VPC > Route Table > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "routeTableUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/routeTableUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 1000
        }
      },
      "dhcpOptionsActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Determine the action to take when an AWS VPC dhcp options, based on the `AWS > VPC > DHCP Options > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > DHCP Options > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "dhcpOptionsActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dhcpOptionsActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "The number of days since the AWS VPC dhcp options\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > DHCP Options > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "dhcpOptionsActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/dhcpOptionsActive",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "The age after which the AWS VPC dhcp options\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > DHCP Options > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "dhcpOptionsApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Determine the action to take when an AWS VPC dhcp options is not approved based on `AWS > VPC > DHCP Options > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "dhcpOptionsApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dhcpOptionsApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "A list of AWS regions in which AWS VPC dhcp optionss are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC dhcp options is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > VPC > DHCP Options > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceApprovedRegionsDefault\")\n}\n"
      },
      "dhcpOptionsApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dhcpOptionsApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Determine whether the AWS VPC dhcp options is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC dhcp options is not approved, it will be subject to the action specified in the `AWS > VPC > DHCP Options > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > VPC > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > VPC > Enabled"
        }
      },
      "dhcpOptionsCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC dhcp options into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > DHCP Options > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "dhcpOptionsConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "dhcpOptionsConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/dhcpOptionsConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "dhcpOptionsConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/dhcpOptionsConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "dhcpOptionsRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC dhcp optionss are supported for use.\n\nAny dhcp optionss in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "dhcpOptionsTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Determine the action to take when an AWS VPC dhcp options tags are not updated based on the `AWS > VPC > DHCP Options > Tags > *` policies.\n\nThe control ensure AWS VPC dhcp options tags include tags defined in `AWS > VPC > DHCP Options > Tags > Template`.\n\nTags not defined in DHCP Options Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "dhcpOptionsTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/dhcpOptionsTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "The template is used to generate the keys and values for AWS VPC dhcp options.\n\nTags not defined in DHCP Options Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "dhcpOptionsUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS VPC dhcp optionss that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > VPC > DHCP Options > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "dhcpOptionsUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/dhcpOptionsUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 5000
        }
      },
      "routeCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/route",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC route into the CMDB.\n\nThe [CMDB](https://turbot.com/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB. All policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "routeConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/route",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/route"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "routeConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/routeConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/route"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "routeConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/routeConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/route"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      }
    }
  },
  "resource": {
    "types": {
      "vpcService": {
        "title": "VPC",
        "icon": "fal-chart-network",
        "description": "AWS VPC Service.",
        "parent": "aws#/resource/types/aws",
        "category": "turbot#/resource/categories/cloudService",
        "resourceParents": "aws#/resource/types/account",
        "metadataTemplates": {
          "title": "VPC",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:vpc\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:vpc"
              ],
              "title": "VPC",
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/vpcService"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/vpcService"
            },
            {
              "type": "object",
              "required": [
                "name"
              ]
            }
          ]
        }
      },
      "vpc": {
        "title": "VPC",
        "icon": "fal-object-group",
        "description": "VPC in AWS VPC.",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.VpcId }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:vpc/{{ $.VpcId }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "terraform": {
          "type": "aws_vpc",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.VpcId}}",
          "propertyMap": {
            "id": "VpcId"
          },
          "associations": [
            {
              "type": "aws_vpc_dhcp_options_association",
              "stateIdTemplate": "{{ $.DhcpOptionsId }}-{{$.turbot.parent.VpcId}}",
              "propertyMap": {
                "dhcp_options_id": "DhcpOptionsId"
              },
              "metadataMap": {
                "vpc_id": "parent.VpcId"
              },
              "metadataTemplates": {
                "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:vpc/{{ $.turbot.parent.VpcId }}\"\n"
              }
            }
          ]
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "VpcId": "vpc-a01106c2",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:vpc/vpc-a01106c2"
              ],
              "title": "vpc-a01106c2",
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/vpc"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/vpc"
            },
            {
              "type": "object",
              "required": [
                "VpcId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/vpc"
            },
            {
              "type": "object",
              "properties": {
                "VpcId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "subnet": {
        "title": "Subnet",
        "icon": "fal-square",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "#/resource/types/vpc",
        "terraform": {
          "type": "aws_subnet",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.SubnetId }}",
          "propertyMap": {
            "id": "SubnetId",
            "vpc_id": "VpcId"
          }
        },
        "metadataTemplates": {
          "title": "{{ $.SubnetId }}",
          "akas": "- {% if $.SubnetArn %}\"{{ $.SubnetArn }}\"{% else %}\"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:subnet/{{ $.SubnetId }}\"{% endif %}\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:vpc/{{ $.VpcId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "SubnetId": "subnet-01380a49266ef42a3",
              "VpcId": "vpc-a01106c2",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:subnet/subnet-01380a49266ef42a3"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:vpc/vpc-a01106c2",
              "title": "subnet-01380a49266ef42a3"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/subnet"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/subnet"
            },
            {
              "type": "object",
              "required": [
                "SubnetId",
                "VpcId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/subnet"
            },
            {
              "type": "object",
              "properties": {
                "SubnetId": {
                  "type": "null"
                },
                "VpcId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "routeTable": {
        "title": "Route Table",
        "icon": "fal-random",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "#/resource/types/vpc",
        "metadataTemplates": {
          "title": "{{ $.RouteTableId }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:route-table/{{$.RouteTableId}}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:vpc/{{ $.VpcId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "RouteTableId": "rtb-ca5becb5",
              "VpcId": "vpc-0e51422c52ab2464d",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:route-table/rtb-ca5becb5"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:vpc/vpc-0e51422c52ab2464d",
              "title": "rtb-ca5becb5"
            }
          }
        ],
        "terraform": {
          "type": "aws_route_table",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.RouteTableId}}",
          "propertyMap": {
            "id": "RouteTableId",
            "vpc_id": "VpcId"
          },
          "associations": [
            {
              "type": "aws_route_table_association",
              "stateIdTemplate": "{{ $.RouteTableAssociationId }}",
              "parentPath": "Associations",
              "propertyMap": {
                "id": "RouteTableAssociationId",
                "route_table_id": "RouteTableId",
                "subnet_id": "SubnetId"
              },
              "metadataTemplates": {
                "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:route-table/{{$.RouteTableId}}\"\n"
              }
            }
          ]
        },
        "schema": {
          "$ref": "#/definitions/routeTable"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/routeTable"
            },
            {
              "type": "object",
              "required": [
                "RouteTableId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/routeTable"
            },
            {
              "type": "object",
              "properties": {
                "RouteTableId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "dhcpOptions": {
        "title": "DHCP Options",
        "icon": "fal-list-ul",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "aws#/resource/types/region",
        "terraform": {
          "type": "aws_vpc_dhcp_options",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.DhcpOptionsId}}",
          "propertyMap": {
            "id": "DhcpOptionsId"
          }
        },
        "metadataTemplates": {
          "title": "{{ $.DhcpOptionsId }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:dhcp-options/{{ $.DhcpOptionsId }}\"\n",
          "resourceParentAka": "\"arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}\"\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "DhcpOptionsId": "dopt-7a8b9c2d",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "dopt-7a8b9c2d",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:dhcp-options/dopt-7a8b9c2d"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/dhcpOptions"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dhcpOptions"
            },
            {
              "type": "object",
              "required": [
                "DhcpOptionsId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dhcpOptions"
            },
            {
              "type": "object",
              "properties": {
                "DhcpOptionsId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "route": {
        "title": "Route",
        "icon": "fal-random",
        "parent": "#/resource/types/vpcService",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "#/resource/types/routeTable",
        "metadataTemplates": {
          "title": "{{ $.RouteTableId }}_{% if $.DestinationCidrBlock %}{{ $.DestinationCidrBlock }}{% else %}{{ $.DestinationIpv6CidrBlock }}{% endif %}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:route-table/{{ $.RouteTableId }}:{% if $.DestinationCidrBlock %}{{ $.DestinationCidrBlock }}{% else %}{{ $.DestinationIpv6CidrBlock | replace(':', '.') }}{% endif %}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:route-table/{{ $.RouteTableId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "RouteTableId": "rtb-0a59c28f047dba02f",
              "DestinationCidrBlock": "172.30.0.0/16",
              "GatewayId": "igw-0f210095e0e0c53a3",
              "Origin": "CreateRouteTable",
              "State": "active",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:route-table/rtb-0a59c28f047dba02f:172.30.0.0/16"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:route-table/rtb-0a59c28f047dba02f",
              "title": "rtb-0a59c28f047dba02f_172.30.0.0/16"
            }
          }
        ],
        "terraform": {
          "type": "aws_route",
          "stateIdTemplate": "{{ $.turbot.id }}",
          "propertyMap": {
            "route_table_id": "RouteTableId"
          },
          "optionalPropertyMap": {
            "destination_ipv6_cidr_block": "DestinationIpv6CidrBlock",
            "destination_cidr_block": "DestinationCidrBlock",
            "egress_only_gateway_id": "EgressOnlyInternetGatewayId",
            "gateway_id": "GatewayId",
            "instance_id": "InstanceId",
            "nat_gateway_id": "NatGatewayId",
            "network_interface_id": "NetworkInterfaceId",
            "transit_gateway_id": "TransitGatewayId",
            "vpc_peering_connection_id": "VpcPeeringConnectionId"
          }
        },
        "schema": {
          "$ref": "#/definitions/route"
        },
        "createSchema": {
          "oneOf": [
            {
              "$ref": "#/definitions/route"
            },
            {
              "type": "object",
              "required": [
                "RouteTableId",
                "DestinationCidrBlock"
              ]
            },
            {
              "type": "object",
              "required": [
                "RouteTableId",
                "DestinationIpv6CidrBlock"
              ]
            }
          ]
        }
      }
    }
  },
  "action": {
    "types": {
      "vpcDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/vpc",
        "targets": [
          "#/resource/types/vpc"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS VPC vpc from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/vpc/delete",
          "bundle": "functions/vpc/delete/dist/index.zip",
          "memory": 1024,
          "hash": "903eb8f6d8"
        }
      },
      "forceDeleteDefaultVpc": {
        "title": "Force Delete Default VPC",
        "icon": "fal-trash-alt",
        "description": "Force delete the default VPC in region.",
        "parent": "#/resource/types/vpcService",
        "targets": "aws#/resource/types/region",
        "category": "turbot#/control/categories/other",
        "help": "#/help/vpcDelete",
        "function": {
          "src": "functions/vpc/forceDeleteDefaultVpc",
          "bundle": "functions/vpc/forceDeleteDefaultVpc/dist/index.zip",
          "memory": 1024,
          "hash": "194927e68b"
        }
      },
      "vpcRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS VPC service VPC resources.\n\nThe router receives events from the event handler and creates, updates, or deletes VPC resources in the CMDB.\n",
        "events": [
          "ec2:AssociateDhcpOptions",
          "ec2:AssociateVpcCidrBlock",
          "ec2:CreateDefaultVpc",
          "ec2:CreateTags",
          "ec2:CreateVpc",
          "ec2:DeleteTags",
          "ec2:DeleteVpc",
          "ec2:DisassociateVpcCidrBlock",
          "ec2:ModifyVpcAttribute"
        ]
      },
      "vpcSetDnsHostnames": {
        "title": "Set DNS Hostnames",
        "icon": "fal-map-marked-alt",
        "description": "Set the AWS VPC DNS Hostnames configuration.",
        "parent": "#/resource/types/vpc",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/other",
        "help": "#/help/vpcDnsHostnames",
        "function": {
          "src": "functions/vpc/setDnsHostnames",
          "bundle": "functions/vpc/setDnsHostnames/dist/index.zip",
          "memory": 1024,
          "hash": "c2d9b1ddee"
        }
      },
      "vpcSetDnsResolution": {
        "title": "Set DNS Resolution",
        "icon": "fal-map-marked-alt",
        "description": "Set the AWS VPC DNS Resolution configuration.",
        "parent": "#/resource/types/vpc",
        "targets": "#/resource/types/vpc",
        "category": "turbot#/control/categories/other",
        "help": "#/help/vpcSetDnsResolution",
        "function": {
          "src": "functions/vpc/setDnsResolution",
          "bundle": "functions/vpc/setDnsResolution/dist/index.zip",
          "memory": 1024,
          "hash": "9b234affd7"
        }
      },
      "vpcUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/vpc",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/vpc"
        ],
        "description": "Update the tags for AWS VPC vpc tags.",
        "function": {
          "src": "functions/vpc/updateTags",
          "bundle": "functions/vpc/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "13cc3c7d70"
        }
      },
      "subnetDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/subnet",
        "targets": [
          "#/resource/types/subnet"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS VPC subnet from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/subnet/delete",
          "bundle": "functions/subnet/delete/dist/index.zip",
          "memory": 1024,
          "hash": "1bb95a7929"
        }
      },
      "subnetRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS VPC service Subnet resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Subnet resources in the CMDB.\n",
        "events": [
          "ec2:AssociateSubnetCidrBlock",
          "ec2:CreateDefaultSubnet",
          "ec2:CreateSubnet",
          "ec2:CreateTags",
          "ec2:DeleteSubnet",
          "ec2:DeleteTags",
          "ec2:DisassociateSubnetCidrBlock",
          "ec2:ModifySubnetAttribute"
        ]
      },
      "subnetSetAutoAssignPublicIp": {
        "title": "Set Auto Assign Public IP",
        "icon": "fal-cog",
        "description": "Set Auto-Assign public IP",
        "parent": "#/resource/types/subnet",
        "targets": "#/resource/types/subnet",
        "category": "turbot#/control/categories/other",
        "help": "#/help/subnetSetAutoAssignPublicIp",
        "validationIgnoreChildProperties": [
          "params"
        ],
        "function": {
          "src": "functions/subnet/setAutoAssignPublicIp",
          "bundle": "functions/subnet/setAutoAssignPublicIp/dist/index.zip",
          "memory": 1024,
          "hash": "2efd98c334"
        }
      },
      "subnetUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/subnet",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/subnet"
        ],
        "description": "Update the tags for AWS VPC subnet tags.",
        "function": {
          "src": "functions/subnet/updateTags",
          "bundle": "functions/subnet/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "5e349fb0c0"
        }
      },
      "routeTableDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/routeTable",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS VPC route table from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/routeTable/delete",
          "bundle": "functions/routeTable/delete/dist/index.zip",
          "memory": 1024,
          "hash": "8a9246cd77"
        }
      },
      "routeTableRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS VPC service Route Table resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Route Table resources in the CMDB.\n",
        "events": [
          "ec2:AssociateRouteTable",
          "ec2:CreateRoute",
          "ec2:CreateRouteTable",
          "ec2:CreateTags",
          "ec2:DeleteRoute",
          "ec2:DeleteRouteTable",
          "ec2:DeleteTags",
          "ec2:DisableVgwRoutePropagation",
          "ec2:DisassociateRouteTable",
          "ec2:EnableVgwRoutePropagation",
          "ec2:ReplaceRouteTableAssociation"
        ]
      },
      "routeTableUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/routeTable",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/routeTable"
        ],
        "description": "Update the tags for AWS VPC route table tags.",
        "function": {
          "src": "functions/routeTable/updateTags",
          "bundle": "functions/routeTable/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "dfcf7f3c65"
        }
      },
      "dhcpOptionsDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/dhcpOptions",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS VPC dhcp options from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/dhcpOptions/delete",
          "bundle": "functions/dhcpOptions/delete/dist/index.zip",
          "memory": 1024,
          "hash": "ae88c93e44"
        }
      },
      "dhcpOptionsRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS VPC service DHCP Options resources.\n\nThe router receives events from the event handler and creates, updates, or deletes DHCP Options resources in the CMDB.\n",
        "events": [
          "ec2:AssociateDhcpOptions",
          "ec2:CreateDhcpOptions",
          "ec2:CreateTags",
          "ec2:DeleteDhcpOptions",
          "ec2:DeleteTags"
        ]
      },
      "dhcpOptionsUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dhcpOptions",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dhcpOptions"
        ],
        "description": "Update the tags for AWS VPC dhcp options tags.",
        "function": {
          "src": "functions/dhcpOptions/updateTags",
          "bundle": "functions/dhcpOptions/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "d59a2ceeec"
        }
      }
    }
  },
  "build": "20210521115902843"
}