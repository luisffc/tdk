{
  "$id": "tmod:@turbot/aws-ec2",
  "title": "@turbot/aws-ec2",
  "author": "Turbot HQ, Inc",
  "version": "5.21.6",
  "license": "For LICENSE see https://turbot.com/license",
  "peerDependencies": {
    "@turbot/aws": "^5.0.0",
    "@turbot/turbot": "^5.22.0",
    "@turbot/turbot-iam": "^5.1.0",
    "@turbot/aws-iam": "^5.1.0",
    "@turbot/aws-kms": "^5.0.0"
  },
  "scripts": {
    "prepack": "./build.sh"
  },
  "data": [
    {
      "permission": "acm:ListCertificates",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Required for ELB launches."
    },
    {
      "permission": "application-autoscaling:DeleteScalingPolicy",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "application-autoscaling:DeleteScheduledAction",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "application-autoscaling:DeregisterScalableTarget",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "application-autoscaling:DescribeScalableTargets",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "application-autoscaling:DescribeScalingActivities",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "application-autoscaling:DescribeScalingPolicies",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "application-autoscaling:DescribeScheduledActions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "application-autoscaling:PutScalingPolicy",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "application-autoscaling:PutScheduledAction",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "application-autoscaling:RegisterScalableTarget",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:AttachInstances",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:AttachLoadBalancerTargetGroups",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:AttachLoadBalancers",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:BatchDeleteScheduledAction",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "autoscaling:BatchPutScheduledUpdateGroupAction",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "autoscaling:CompleteLifecycleAction",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Allows custom steps in the autoscaling lifecycle process"
    },
    {
      "permission": "autoscaling:CreateAutoScalingGroup",
      "grant": "Whitelist",
      "resourceType": "autoScalingGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": ""
    },
    {
      "permission": "autoscaling:CreateLaunchConfiguration",
      "grant": "Whitelist",
      "resourceType": "launchConfiguration",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": ""
    },
    {
      "permission": "autoscaling:CreateOrUpdateScalingTrigger",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": ""
    },
    {
      "permission": "autoscaling:CreateOrUpdateTags",
      "grant": "Operator",
      "resourceType": "autoScalingGroup",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:CreateScalingPlan",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can create autoscaling plan."
    },
    {
      "permission": "autoscaling:DeleteAutoScalingGroup",
      "grant": "Whitelist",
      "resourceType": "autoScalingGroup",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": ""
    },
    {
      "permission": "autoscaling:DeleteLaunchConfiguration",
      "grant": "Whitelist",
      "resourceType": "launchConfiguration",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": ""
    },
    {
      "permission": "autoscaling:DeleteLifecycleHook",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "autoscaling:DeleteNotificationConfiguration",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can control monitoring & notification of the autoscaling group."
    },
    {
      "permission": "autoscaling:DeletePolicy",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "autoscaling:DeleteScalingPlan",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can delete autoscaling plan."
    },
    {
      "permission": "autoscaling:DeleteScheduledAction",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "autoscaling:DeleteTags",
      "grant": "Operator",
      "resourceType": "autoScalingGroup",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DeleteTrigger",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeAccountLimits",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeAdjustmentTypes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeAutoScalingGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeAutoScalingInstances",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeAutoScalingNotificationTypes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeLaunchConfigurations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeLifecycleHookTypes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeLifecycleHooks",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeLoadBalancerTargetGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeLoadBalancers",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeMetricCollectionTypes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeNotificationConfigurations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribePolicies",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeScalingActivities",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeScalingPlanResources",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Describes the scalable resources in the specified scaling plan."
    },
    {
      "permission": "autoscaling:DescribeScalingPlans",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Describes the specified scaling plans or all of your scaling plans."
    },
    {
      "permission": "autoscaling:DescribeScalingProcessTypes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeScheduledActions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeTags",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeTerminationPolicyTypes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DescribeTriggers",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:DetachInstances",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:DetachLoadBalancerTargetGroups",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:DetachLoadBalancers",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:DisableMetricsCollection",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can control monitoring & notification of the autoscaling group."
    },
    {
      "permission": "autoscaling:EnableMetricsCollection",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can control monitoring & notification of the autoscaling group."
    },
    {
      "permission": "autoscaling:EnterStandby",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:ExecutePolicy",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can execute a policy that was defined by an Admin."
    },
    {
      "permission": "autoscaling:ExitStandby",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:PutLifecycleHook",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "autoscaling:PutNotificationConfiguration",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can control monitoring & notification of the autoscaling group."
    },
    {
      "permission": "autoscaling:PutScalingPolicy",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "autoscaling:PutScheduledUpdateGroupAction",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": "Admins can change the autoscaling process."
    },
    {
      "permission": "autoscaling:RecordLifecycleActionHeartbeat",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:ResumeProcesses",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:SetDesiredCapacity",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": ""
    },
    {
      "permission": "autoscaling:SetInstanceHealth",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:SetInstanceProtection",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage instances in an autoscaling group but not change its config."
    },
    {
      "permission": "autoscaling:SuspendProcesses",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:TerminateInstanceInAutoScalingGroup",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "autoscaling:UpdateAutoScalingGroup",
      "grant": "Whitelist",
      "resourceType": "autoScalingGroup",
      "operationType": "update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAutoScalingAdministration",
      "help": ""
    },
    {
      "permission": "aws-marketplace:BatchMeterUsage",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Administrators may report software usage."
    },
    {
      "permission": "aws-marketplace:GetEntitlements",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Viewing entitlement of a customer to a given product. http://docs.aws.amazon.com/marketplaceentitlement/latest/APIReference/Welcome.html."
    },
    {
      "permission": "aws-marketplace:MeterUsage",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Administrators may report software usage."
    },
    {
      "permission": "aws-marketplace:ResolveCustomer",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Used by SaaS application and returns customer identifier and product code based on registration token."
    },
    {
      "permission": "aws-marketplace:Subscribe",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsMarketplaceSubscriptionAdministration",
      "help": "Administrators may subscribe to marketplace software"
    },
    {
      "permission": "aws-marketplace:Unsubscribe",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsMarketplaceSubscriptionAdministration",
      "help": "Administrators may subscribe to marketplace software"
    },
    {
      "permission": "aws-marketplace:ViewSubscriptions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Viewing marketplace subscriptions is required for server management if the marketplace is used."
    },
    {
      "permission": "cloudwatch:DescribeAlarmHistory",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "For console access per EC2 ReadOnly policy"
    },
    {
      "permission": "cloudwatch:DescribeAlarms",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "For console access per EC2 ReadOnly policy"
    },
    {
      "permission": "cloudwatch:DescribeAlarmsForMetric",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "For console access per EC2 ReadOnly policy"
    },
    {
      "permission": "cloudwatch:GetMetricData",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "This allows GetMetricData API to retrieve as many as metrics data and to perform mathematical expressions on this data."
    },
    {
      "permission": "cloudwatch:GetMetricStatistics",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "For console access per EC2 ReadOnly policy"
    },
    {
      "permission": "cloudwatch:ListMetrics",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "For console access per EC2 ReadOnly policy"
    },
    {
      "permission": "ec2-reports:ViewInstanceUsageReport",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Obscure permission http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/usage-reports.html#iam-access-ec2-reports"
    },
    {
      "permission": "ec2-reports:ViewReservedInstanceUtilizationReport",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Obscure permission http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/usage-reports.html#iam-access-ec2-reports"
    },
    {
      "permission": "ec2:AcceptReservedInstancesExchangeQuote",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage their own reserved instances (but cannot resell them)."
    },
    {
      "permission": "ec2:AllocateAddress",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can allocate new elastic IP addresses; this is considered safe as the proper routing still needs to be configured for public access."
    },
    {
      "permission": "ec2:AllocateHosts",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AssignIpv6Addresses",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Private IP addresses are within the allocated space to the account so can be safely managed by the account."
    },
    {
      "permission": "ec2:AssignPrivateIpAddresses",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Private IP addresses are within the allocated space to the account so can be safely managed by the account."
    },
    {
      "permission": "ec2:AssociateAddress",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can associate elastic IP addresses; this is considered safe as the proper routing still needs to be configured for public access."
    },
    {
      "permission": "ec2:AssociateIamInstanceProfile",
      "grant": "Admin",
      "resourceType": "instance",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins manage IAM instance profile associations for existing instances."
    },
    {
      "permission": "ec2:AttachNetworkInterface",
      "grant": "Admin",
      "resourceType": "networkInterface",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Network interfaces can be safely used by the account inside the VPC context."
    },
    {
      "permission": "ec2:AttachVolume",
      "grant": "Admin",
      "resourceType": "Volume|instance",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:BundleInstance",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM export"
    },
    {
      "permission": "ec2:BidEvictedEvent",
      "grant": "Admin",
      "resourceType": "instance",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can update or terminate spot instances"
    },
    {
      "permission": "ec2:CancelBundleTask",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM export"
    },
    {
      "permission": "ec2:CancelConversionTask",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM export"
    },
    {
      "permission": "ec2:CancelExportTask",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM export"
    },
    {
      "permission": "ec2:CancelImportTask",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM import"
    },
    {
      "permission": "ec2:CancelReservedInstancesListing",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Reserved instance reselling is at the cluster level."
    },
    {
      "permission": "ec2:CancelSpotFleetRequests",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CancelSpotInstanceRequests",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can safely use spot instances within their VPC."
    },
    {
      "permission": "ec2:ConfirmProductInstance",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Only relevant to AMI marketplace sellers."
    },
    {
      "permission": "ec2:CopyFpgaImage",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Copies the specified Amazon FPGA Image (AFI) to the current region."
    },
    {
      "permission": "ec2:CopyImage",
      "grant": "Whitelist",
      "resourceType": "ami",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional image management. Copies image between regions not across accounts"
    },
    {
      "permission": "ec2:CopySnapshot",
      "grant": "Operator",
      "resourceType": "Snapshot",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Low risk operation to copy data within the same account."
    },
    {
      "permission": "ec2:CreateFpgaImage",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional FPGA image management. https://aws.amazon.com/ec2/instance-types/f1/"
    },
    {
      "permission": "ec2:CreateImage",
      "grant": "Whitelist",
      "resourceType": "ami",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional image management. Creates a new AMI from an instance in the account."
    },
    {
      "permission": "ec2:CreateInstanceExportTask",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM export."
    },
    {
      "permission": "ec2:CreateKeyPair",
      "grant": "Admin",
      "resourceType": "keyPair",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Administrators use key pairs when starting new instances. This should be moved to an option in the future when Turbot supports non-key pair based login."
    },
    {
      "permission": "ec2:CreateLaunchTemplate",
      "grant": "Admin",
      "resourceType": "launchTemplate",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateLaunchTemplateVersion",
      "grant": "Admin",
      "resourceType": "launchTemplateVersion",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateNetworkInterface",
      "grant": "Admin",
      "resourceType": "networkInterface",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Network interfaces can be safely used by the account inside the VPC context."
    },
    {
      "permission": "ec2:CreatePlacementGroup",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Servers can be safely placed within cluster managed networks."
    },
    {
      "permission": "ec2:CreateReservedInstancesListing",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Reserved instance reselling is at the cluster level."
    },
    {
      "permission": "ec2:CreateSnapshot",
      "grant": "Operator",
      "resourceType": "Snapshot",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Low risk operation to backup data within the same account."
    },
    {
      "permission": "ec2:CreateSnapshots",
      "grant": "Operator",
      "resourceType": "Snapshot",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Low risk operation to backup data within the same account."
    },
    {
      "permission": "ec2:CreateSpotDatafeedSubscription",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can safely use spot instances within their VPC."
    },
    {
      "permission": "ec2:CreateTags",
      "grant": "Operator",
      "resourceType": "Instance|Snapshot|Volume|launchTemplate|ami|networkInterface|keyPair",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Tags are low risk for management in Turbot since accounts are the isolation boundary; not tags."
    },
    {
      "permission": "ec2:CreateVolume",
      "grant": "Admin",
      "resourceType": "Volume",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Storage management is safe within the account."
    },
    {
      "permission": "ec2:DeleteFpgaImage",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Deletes the specified Amazon FPGA Image."
    },
    {
      "permission": "ec2:DeleteKeyPair",
      "grant": "Admin",
      "resourceType": "keyPair",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteLaunchTemplate",
      "grant": "Admin",
      "resourceType": "launchTemplate",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteLaunchTemplateVersions",
      "grant": "Admin",
      "resourceType": "launchTemplateVersion",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteNetworkInterface",
      "grant": "Admin",
      "resourceType": "networkInterface",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Network interfaces can be safely used by the account inside the VPC context."
    },
    {
      "permission": "ec2:DeletePlacementGroup",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteSnapshot",
      "grant": "Admin",
      "resourceType": "Snapshot",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Deletion of snapshots is limited to Admin though creation is open to Operator."
    },
    {
      "permission": "ec2:DeleteSpotDatafeedSubscription",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTags",
      "grant": "Operator",
      "resourceType": "Instance|Snapshot|Volume|launchTemplate|ami|networkInterface|keyPair",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Tags are low risk for management in Turbot since accounts are the isolation boundary; not tags. Most deletions are denied to operator but tags are a low risk management activity even for deletion."
    },
    {
      "permission": "ec2:DeleteVolume",
      "grant": "Admin",
      "resourceType": "Volume",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeregisterImage",
      "grant": "Whitelist",
      "resourceType": "ami",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional image management. Deregisters an image preventing further launches"
    },
    {
      "permission": "ec2:DescribeAccountAttributes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeAddresses",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeAvailabilityZones",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeBundleTasks",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeClassicLinkInstances",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeConversionTasks",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeElasticGpus",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeExportTasks",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeFpgaImageAttribute",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Describes the specified attribute of the specified Amazon FPGA Image."
    },
    {
      "permission": "ec2:DescribeFpgaImages",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeHostReservationOfferings",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeHostReservations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeHosts",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeIamInstanceProfileAssociations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeIdFormat",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeIdentityIdFormat",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeImageAttribute",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeImages",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeImportImageTasks",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeImportSnapshotTasks",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeInstanceAttribute",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeInstanceStatus",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeInstances",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeKeyPairs",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLaunchTemplateVersions",
      "grant": "Metadata",
      "resourceType": "launchTemplateVersion",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLaunchTemplates",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLicenses",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Note: Not currently in use by AWS - http://aws.amazon.com/blogs/aws/bring_your_own_ea_windows_server_license_to_ec2/"
    },
    {
      "permission": "ec2:DescribeMovingAddresses",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeNetworkInterfaceAttribute",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeNetworkInterfacePermissions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Describes the permissions of network interfaces."
    },
    {
      "permission": "ec2:DescribeNetworkInterfaces",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribePlacementGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeRegions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeReservedInstances",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeReservedInstancesListings",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeReservedInstancesModifications",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeReservedInstancesOfferings",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeScheduledInstanceAvailability",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeScheduledInstances",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSecurityGroupReferences",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSecurityGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSnapshotAttribute",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSnapshots",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSpotDatafeedSubscription",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSpotFleetInstances",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSpotFleetRequestHistory",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSpotFleetRequests",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSpotInstanceRequests",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSpotPriceHistory",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeStaleSecurityGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeTags",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVolumeAttribute",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVolumeStatus",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVolumes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVolumesModifications",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DetachClassicLinkVpc",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DetachNetworkInterface",
      "grant": "Admin",
      "resourceType": "networkInterface",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Network interfaces can be safely used by the account inside the VPC context."
    },
    {
      "permission": "ec2:DetachVolume",
      "grant": "Admin",
      "resourceType": "Volume|instance",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DisassociateAddress",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can disassociate elastic IP addresses."
    },
    {
      "permission": "ec2:DisassociateIamInstanceProfile",
      "grant": "Admin",
      "resourceType": "instance",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins manage IAM instance profile associations for existing instances."
    },
    {
      "permission": "ec2:EnableVolumeIO",
      "grant": "Admin",
      "resourceType": "Volume",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:GetConsoleOutput",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Allows viewing of console data from machines; helpful for monitoring & investigating system during bootup. Considered to be metadata not ReadOnly since systems should not be logging sensitive information and it's a key part of troubleshooting before needing access to the actual machine (which would obviously be at least ReadOnly)."
    },
    {
      "permission": "ec2:GetConsoleScreenshot",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Allows viewing of on-demand screenshot of instance console for machines which is helpful for monitoring & investigating systems when they become unreachable via RDS and SSH. Considered to be metadata and not ReadOnly since it's a key part of troubleshooting when the instance is unreachable."
    },
    {
      "permission": "ec2:GetHostReservationPurchasePreview",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Allows preview of host reservation purchase but does not result in offering being purchased."
    },
    {
      "permission": "ec2:GetLaunchTemplateData",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Launch template data contains metadata about the EC2 instance."
    },
    {
      "permission": "ec2:GetPasswordData",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Required for launch of Windows machines and used with key pairs."
    },
    {
      "permission": "ec2:GetReservedInstancesExchangeQuote",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ImportImage",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM import"
    },
    {
      "permission": "ec2:ImportInstance",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM import"
    },
    {
      "permission": "ec2:ImportKeyPair",
      "grant": "Admin",
      "resourceType": "keyPair",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Administrators use key pairs when starting new instances. This should be moved to an option in the future when Turbot supports non-key pair based login."
    },
    {
      "permission": "ec2:ImportSnapshot",
      "grant": "Whitelist",
      "resourceType": "Snapshot",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM import"
    },
    {
      "permission": "ec2:ImportVolume",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional VM import"
    },
    {
      "permission": "ec2:ModifyFpgaImageAttribute",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Modifies the specified attributes(description | name | loadPermission | productCodes) of the specified Amazon FPGA Image."
    },
    {
      "permission": "ec2:ModifyHosts",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyIdFormat",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyIdentityIdFormat",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyImageAttribute",
      "grant": "Whitelist",
      "resourceType": "ami",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAmiPublishingAdministration",
      "help": "Optional image attribute management"
    },
    {
      "permission": "ec2:ModifyInstanceAttribute",
      "grant": "Admin",
      "resourceType": "Instance",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage their own instances."
    },
    {
      "permission": "ec2:ModifyInstanceMetadataOptions",
      "grant": "Admin",
      "resourceType": "Instance",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyInstancePlacement",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyLaunchTemplate",
      "grant": "Admin",
      "resourceType": "launchTemplate",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyNetworkInterfaceAttribute",
      "grant": "Admin",
      "resourceType": "networkInterface",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Network interfaces can be safely used by the account inside the VPC context."
    },
    {
      "permission": "ec2:ModifyReservedInstances",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage their own reserved instances (but cannot resell them)."
    },
    {
      "permission": "ec2:ModifySnapshotAttribute",
      "grant": "Admin",
      "resourceType": "Snapshot",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Allows for cross-account access."
    },
    {
      "permission": "ec2:ModifySpotFleetRequest",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVolume",
      "grant": "Admin",
      "resourceType": "Volume",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Within account storage performance changes."
    },
    {
      "permission": "ec2:ModifyVolumeAttribute",
      "grant": "Admin",
      "resourceType": "Volume",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Within account storage performance changes."
    },
    {
      "permission": "ec2:MonitorInstances",
      "grant": "Admin",
      "resourceType": "Instance",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Monitoring frequency is managed by accounts."
    },
    {
      "permission": "ec2:MoveAddressToVpc",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:PurchaseHostReservation",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage their own dedicated hosts."
    },
    {
      "permission": "ec2:PurchaseReservedInstancesOffering",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage their own reserved instances (but cannot resell them)."
    },
    {
      "permission": "ec2:PurchaseScheduledInstances",
      "grant": "Owner",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Long term subscriptions are managed by owners."
    },
    {
      "permission": "ec2:RebootInstances",
      "grant": "Operator",
      "resourceType": "Instance",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can start stop and reboot existing instances."
    },
    {
      "permission": "ec2:RegisterImage",
      "grant": "Whitelist",
      "resourceType": "ami",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsLocalAmisAdministration",
      "help": "Optional image management. Registers an AMI for launching; typically done automatically as part of CreateImage"
    },
    {
      "permission": "ec2:ReleaseAddress",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can release elastic IP addresses."
    },
    {
      "permission": "ec2:ReleaseHosts",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ReplaceIamInstanceProfileAssociation",
      "grant": "Admin",
      "resourceType": "instance",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins manage IAM instance profile associations for existing instances."
    },
    {
      "permission": "ec2:ReportInstanceStatus",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can report bad instances to AWS support."
    },
    {
      "permission": "ec2:RequestSpotFleet",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:RequestSpotInstances",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can safely use spot instances within their VPC."
    },
    {
      "permission": "ec2:ResetFpgaImageAttribute",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Resets the the load permission attribute."
    },
    {
      "permission": "ec2:ResetImageAttribute",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "ec2PermissionsLevelsAmiPublishingAdministration",
      "help": "Optional image attribute management"
    },
    {
      "permission": "ec2:ResetInstanceAttribute",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Instances are managed by accounts."
    },
    {
      "permission": "ec2:ResetNetworkInterfaceAttribute",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Network interfaces can be safely used by the account inside the VPC context."
    },
    {
      "permission": "ec2:ResetSnapshotAttribute",
      "grant": "Admin",
      "resourceType": "Snapshot",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:RestoreAddressToClassic",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:RunInstances",
      "grant": "Admin",
      "resourceType": "Instance|networkInterface|volume",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Only Admin can create new instances."
    },
    {
      "permission": "ec2:RunScheduledInstances",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:StartInstances",
      "grant": "Operator",
      "resourceType": "Instance",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can start stop and reboot existing instances."
    },
    {
      "permission": "ec2:StopInstances",
      "grant": "Operator",
      "resourceType": "Instance",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can start stop and reboot existing instances."
    },
    {
      "permission": "ec2:TerminateInstances",
      "grant": "Admin",
      "resourceType": "Instance|networkInterface",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Only Admin can terminate instances."
    },
    {
      "permission": "ec2:UnassignIpv6Addresses",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Private IP addresses are within the allocated space to the account so can be safely managed by the account."
    },
    {
      "permission": "ec2:UnassignPrivateIpAddresses",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Private IP addresses are within the allocated space to the account so can be safely managed by the account."
    },
    {
      "permission": "ec2:UnmonitorInstances",
      "grant": "Admin",
      "resourceType": "Instance",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Monitoring frequency is managed by accounts."
    },
    {
      "permission": "elasticloadbalancing:AddListenerCertificates",
      "grant": "Admin",
      "resourceType": "loadBalancerListener",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Admin can add specified certificate to the specified secure listener."
    },
    {
      "permission": "elasticloadbalancing:AddTags",
      "grant": "Operator",
      "resourceType": "classicLoadBalancer|applicationLoadBalancer|networkLoadBalancer|targetGroup|gatewayLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage tags metadata about ELB."
    },
    {
      "permission": "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:AttachLoadBalancerToSubnets",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:ConfigureHealthCheck",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateAppCookieStickinessPolicy",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateLBCookieStickinessPolicy",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateListener",
      "grant": "Admin",
      "resourceType": "loadBalancerListener",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateLoadBalancer",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer|applicationLoadBalancer|networkLoadBalancer|gatewayLoadBalancer",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateLoadBalancerListeners",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateLoadBalancerListeners",
      "grant": "Admin",
      "resourceType": "classicLoadBalancerListener",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateLoadBalancerPolicy",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateRule",
      "grant": "Admin",
      "resourceType": "listenerRule",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:CreateTargetGroup",
      "grant": "Admin",
      "resourceType": "targetGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:DeleteListener",
      "grant": "Admin",
      "resourceType": "loadBalancerListener",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:DeleteLoadBalancer",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer|applicationLoadBalancer|networkLoadBalancer|gatewayLoadBalancer",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:DeleteLoadBalancerListeners",
      "grant": "Admin",
      "resourceType": "classicLoadBalancerListener",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:DeleteLoadBalancerPolicy",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:DeleteRule",
      "grant": "Admin",
      "resourceType": "listenerRule",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:DeleteTargetGroup",
      "grant": "Admin",
      "resourceType": "targetGroup",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage individual instances on the ELB as part of being able to stop start and reboot servers."
    },
    {
      "permission": "elasticloadbalancing:DeregisterTargets",
      "grant": "Operator",
      "resourceType": "targetGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage individual instances on the ALB as part of being able to stop start and reboot servers."
    },
    {
      "permission": "elasticloadbalancing:DescribeAccountLimits",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeInstanceHealth",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeListenerCertificates",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeListeners",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeLoadBalancerAttributes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeLoadBalancerPolicies",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeLoadBalancers",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeRules",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeSSLPolicies",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeTags",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeTargetGroupAttributes",
      "grant": "Metadata",
      "resourceType": "targetGroup",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeTargetGroups",
      "grant": "Metadata",
      "resourceType": "targetGroup",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DescribeTargetHealth",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:DetachLoadBalancerFromSubnets",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:ModifyListener",
      "grant": "Admin",
      "resourceType": "loadBalancerListener",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:ModifyLoadBalancerAttributes",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer|applicationLoadBalancer|networkLoadBalancer|gatewayLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:ModifyRule",
      "grant": "Admin",
      "resourceType": "listenerRule",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:ModifyTargetGroup",
      "grant": "Admin",
      "resourceType": "targetGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:ModifyTargetGroupAttributes",
      "grant": "Admin",
      "resourceType": "targetGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
      "grant": "Operator",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage individual instances on the ELB as part of being able to stop start and reboot servers."
    },
    {
      "permission": "elasticloadbalancing:RegisterTargets",
      "grant": "Operator",
      "resourceType": "targetGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage individual instances on the ELB as part of being able to stop start and reboot servers."
    },
    {
      "permission": "elasticloadbalancing:RemoveListenerCertificates",
      "grant": "Admin",
      "resourceType": "loadBalancerListener",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Admin can remove the specified certificate from the specified secure listener."
    },
    {
      "permission": "elasticloadbalancing:RemoveTags",
      "grant": "Operator",
      "resourceType": "classicLoadBalancer|applicationLoadBalancer|networkLoadBalancer|targetGroup|gatewayLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Operators can manage tags metadata about ELB."
    },
    {
      "permission": "elasticloadbalancing:SetIpAddressType",
      "grant": "Admin",
      "resourceType": "applicationLoadBalancer|networkLoadBalancer|gatewayLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
      "grant": "Admin",
      "resourceType": "classicLoadBalancerListener",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
      "grant": "Admin",
      "resourceType": "classicLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
      "grant": "Admin",
      "resourceType": "classicLoadBalancerListener",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ELB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:SetRulePriorities",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:SetSecurityGroups",
      "grant": "Admin",
      "resourceType": "applicationLoadBalancer|networkLoadBalancer|gatewayLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:SetSubnets",
      "grant": "Admin",
      "resourceType": "applicationLoadBalancer|networkLoadBalancer|gatewayLoadBalancer",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Accounts can manage ALB configuration within cluster defined network boundaries."
    },
    {
      "permission": "elasticloadbalancing:SetWebAcl",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "iam:PassRole",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "marketplacecommerceanalytics:GenerateDataSet",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Administrators may access product and customer data on the AWS Marketplace."
    },
    {
      "permission": "marketplacecommerceanalytics:StartSupportDataExport",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Administrators may access product and customer data on the AWS Marketplace."
    }
  ],
  "action": {
    "types": {
      "amiDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/ami",
        "targets": [
          "#/resource/types/ami"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 ami from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/ami/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "607f77e4de",
          "handler": "index.amiDelete"
        }
      },
      "amiRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service AMI resources.\n\nThe router receives events from the event handler and creates, updates, or deletes AMI resources in the CMDB.\n",
        "events": [
          "ec2:CopyImage",
          "ec2:CreateImage",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:DeregisterImage",
          "ec2:ModifyImageAttribute",
          "ec2:RegisterImage"
        ]
      },
      "amiSetTrustedAccess": {
        "title": "Set Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/ami",
        "targets": [
          "#/resource/types/ami"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Set Trusted Access for AWS > EC2 > AMI.",
        "function": {
          "src": "functions/ami/setTrustedAccess",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "254c4a16cc",
          "handler": "index.amiSetTrustedAccess"
        }
      },
      "amiUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Update the tags for AWS EC2 ami tags.",
        "function": {
          "src": "functions/ami/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "5a393e59d8",
          "handler": "index.amiUpdateTags"
        }
      },
      "applicationLoadBalancerDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/applicationLoadBalancer",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 application load balancer from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/applicationLoadBalancer/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "054492e260",
          "handler": "index.applicationLoadBalancerDelete"
        }
      },
      "applicationLoadBalancerRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Application Load Balancer resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Application Load Balancer resources in the CMDB.\n",
        "events": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateLoadBalancer",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:ModifyLoadBalancerAttributes",
          "elasticloadbalancing:RemoveTags",
          "elasticloadbalancing:SetIpAddressType",
          "elasticloadbalancing:SetSecurityGroups",
          "elasticloadbalancing:SetSubnets"
        ]
      },
      "applicationLoadBalancerUpdateAccessLogging": {
        "title": "Update Access Logging",
        "icon": "eye",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Configure access logging for the load balancer.\n\nElastic Load Balancing provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n",
        "function": {
          "src": "functions/applicationLoadBalancer/updateAccessLogging",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "14426b3968",
          "handler": "index.applicationLoadBalancerUpdateAccessLogging"
        }
      },
      "applicationLoadBalancerUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Update the tags for AWS EC2 application load balancer tags.",
        "function": {
          "src": "functions/applicationLoadBalancer/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "1dc129a3bd",
          "handler": "index.applicationLoadBalancerUpdateTags"
        }
      },
      "autoScalingGroupDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/autoScalingGroup",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 auto scaling group from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/autoScalingGroup/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "0357577ad6",
          "handler": "index.autoScalingGroupDelete"
        }
      },
      "autoScalingGroupRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Auto Scaling Group resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Auto Scaling Group resources in the CMDB.\n",
        "events": [
          "autoscaling:CreateAutoScalingGroup",
          "autoscaling:CreateOrUpdateTags",
          "autoscaling:DeleteAutoScalingGroup",
          "autoscaling:DeleteTags",
          "autoscaling:UpdateAutoScalingGroup"
        ]
      },
      "autoScalingGroupUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Update the tags for AWS EC2 auto scaling group tags.",
        "function": {
          "src": "functions/autoScalingGroup/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "0a8988a3ee",
          "handler": "index.autoScalingGroupUpdateTags"
        }
      },
      "classicLoadBalancerDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/classicLoadBalancer",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 classic load balancer from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/classicLoadBalancer/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "5e4ceb6494",
          "handler": "index.classicLoadBalancerDelete"
        }
      },
      "classicLoadBalancerRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Classic Load Balancer resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Classic Load Balancer resources in the CMDB.\n",
        "events": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
          "elasticloadbalancing:AttachLoadBalancerToSubnets",
          "elasticloadbalancing:ConfigureHealthCheck",
          "elasticloadbalancing:CreateAppCookieStickinessPolicy",
          "elasticloadbalancing:CreateLBCookieStickinessPolicy",
          "elasticloadbalancing:CreateLoadBalancer",
          "elasticloadbalancing:CreateLoadBalancerListeners",
          "elasticloadbalancing:CreateLoadBalancerPolicy",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:DetachLoadBalancerFromSubnets",
          "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer",
          "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer",
          "elasticloadbalancing:ModifyLoadBalancerAttributes",
          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
          "elasticloadbalancing:RemoveTags",
          "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
          "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
        ]
      },
      "classicLoadBalancerUpdateAccessLogging": {
        "title": "Update Access Logging",
        "icon": "eye",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Configure access logging for the load balancer.\n\nElastic Load Balancing provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n",
        "function": {
          "src": "functions/classicLoadBalancer/updateAccessLogging",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "edcbd5367d",
          "handler": "index.classicLoadBalancerUpdateAccessLogging"
        }
      },
      "classicLoadBalancerUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Update the tags for AWS EC2 classic load balancer tags.",
        "function": {
          "src": "functions/classicLoadBalancer/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "eb0b909105",
          "handler": "index.classicLoadBalancerUpdateTags"
        }
      },
      "instanceDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 instance from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/instance/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "a776af7b77",
          "handler": "index.instanceDelete"
        }
      },
      "instanceRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Instance resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Instance resources in the CMDB.\n",
        "events": [
          "ec2:AssociateIamInstanceProfile",
          "ec2:AttachVolume",
          "ec2:BidEvictedEvent",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "ec2:DetachVolume",
          "ec2:DisassociateIamInstanceProfile",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifyInstanceMetadataOptions",
          "ec2:MonitorInstances",
          "ec2:ReplaceIamInstanceProfileAssociation",
          "ec2:RunInstances",
          "ec2:StartInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances",
          "ec2:UnmonitorInstances"
        ]
      },
      "instanceSetInstanceProfile": {
        "title": "Set Instance Profile",
        "icon": "fal-user-tag",
        "description": "Configure whether the IAM instance profile is attached to instance.",
        "parent": "#/resource/types/instance",
        "targets": "#/resource/types/instance",
        "category": "turbot#/control/categories/other",
        "help": "#/help/instanceSetInstanceProfile",
        "validationIgnoreChildProperties": [
          "params"
        ],
        "function": {
          "src": "functions/instance/setInstanceProfile",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "4ebba1f9db",
          "handler": "index.instanceSetInstanceProfile"
        }
      },
      "instanceStart": {
        "title": "Start",
        "icon": "fal-play",
        "description": "Start AWS > EC2 > Instance.",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceSchedule",
        "targets": [
          "#/resource/types/instance"
        ],
        "function": {
          "src": "functions/instance/start",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "89e69cf032",
          "handler": "index.instanceStart"
        }
      },
      "instanceStop": {
        "title": "Stop",
        "icon": "fal-stop",
        "description": "Stops AWS EC2 Instance.",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceSchedule",
        "targets": [
          "#/resource/types/instance"
        ],
        "function": {
          "src": "functions/instance/stop",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "1f9ac4b7fa",
          "handler": "index.instanceStop"
        }
      },
      "instanceUpdateDetailedMonitoring": {
        "title": "Update Detailed Monitoring",
        "icon": "fal-monitor-heart-rate",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceLogging",
        "description": "Update the Detailed Monitoring setting for EC2 instance.\n",
        "function": {
          "src": "functions/instance/updateDetailedMonitoring",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "a0673ac46e",
          "handler": "index.instanceUpdateDetailedMonitoring"
        }
      },
      "instanceUpdateMetadataService": {
        "title": "Update Metadata Service",
        "icon": "fal-coins",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Instance metadata is data about your instance that you can use to configure or manage the running instance.\nInstance metadata is divided into categories, for example, host name, events, and security groups.\n\nInstance metadata can be accessed from a running instance using one of the following methods:\n\n  Instance Metadata Service Version 1 (IMDSv1) – a request/response method\n\n  Instance Metadata Service Version 2 (IMDSv2) – a session-oriented method\n\nBy default, you can use either IMDSv1 or IMDSv2, or both. However, the instance metadata service can be specifically\nconfigured to use IMDSv2 on each instance. When you specify that IMDSv2 must be used, IMDSv1 no longer works.\n",
        "function": {
          "src": "functions/instance/updateMetadataService",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "dcce48c2df",
          "handler": "index.instanceUpdateMetadataService"
        }
      },
      "instanceUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Update the tags for AWS EC2 instance tags.",
        "function": {
          "src": "functions/instance/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "5a393e59d8",
          "handler": "index.instanceUpdateTags"
        }
      },
      "instanceUpdateTerminationProtection": {
        "title": "Update Termination Protection",
        "icon": "fal-shield",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceDataProtection",
        "description": "Update the Termination Protection setting for EC2 instance.\n",
        "function": {
          "src": "functions/instance/updateTerminationProtection",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "b53138f5a7",
          "handler": "index.instanceUpdateTerminationProtection"
        }
      },
      "keyPairDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/keyPair",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 key pair from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/keyPair/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "25e5b357e6",
          "handler": "index.keyPairDelete"
        }
      },
      "keyPairRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Key Pair resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Key Pair resources in the CMDB.\n",
        "events": [
          "ec2:CreateKeyPair",
          "ec2:CreateTags",
          "ec2:DeleteKeyPair",
          "ec2:DeleteTags",
          "ec2:ImportKeyPair"
        ]
      },
      "keyPairUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Update the tags for AWS EC2 key pair tags.",
        "function": {
          "src": "functions/keyPair/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "5a393e59d8",
          "handler": "index.keyPairUpdateTags"
        }
      },
      "launchConfigurationDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/launchConfiguration",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 launch configuration from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/launchConfiguration/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "fcdd1a360c",
          "handler": "index.launchConfigurationDelete"
        }
      },
      "launchConfigurationRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Launch Configuration resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Launch Configuration resources in the CMDB.\n",
        "events": [
          "autoscaling:CreateLaunchConfiguration",
          "autoscaling:DeleteLaunchConfiguration"
        ]
      },
      "launchTemplateDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/launchTemplate",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 launch template from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/launchTemplate/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "abc6a61e2a",
          "handler": "index.launchTemplateDelete"
        }
      },
      "launchTemplateRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Launch Template resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Launch Template resources in the CMDB.\n",
        "events": [
          "ec2:CreateLaunchTemplate",
          "ec2:CreateTags",
          "ec2:DeleteLaunchTemplate",
          "ec2:DeleteTags",
          "ec2:ModifyLaunchTemplate"
        ]
      },
      "launchTemplateUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Update the tags for AWS EC2 launch template tags.",
        "function": {
          "src": "functions/launchTemplate/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "dc963a7921",
          "handler": "index.launchTemplateUpdateTags"
        }
      },
      "launchTemplateVersionDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/launchTemplateVersion",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 launch template version from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/launchTemplateVersion/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "e4dbb76334",
          "handler": "index.launchTemplateVersionDelete"
        }
      },
      "launchTemplateVersionRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Launch Template Version resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Launch Template Version resources in the CMDB.\n",
        "events": [
          "ec2:CreateLaunchTemplateVersion",
          "ec2:DeleteLaunchTemplateVersions"
        ]
      },
      "networkInterfaceDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/networkInterface",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 network interface from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/networkInterface/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "b36a133506",
          "handler": "index.networkInterfaceDelete"
        }
      },
      "networkInterfaceRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Network Interface resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Network Interface resources in the CMDB.\n",
        "events": [
          "ec2:AttachNetworkInterface",
          "ec2:CreateNetworkInterface",
          "ec2:CreateTags",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteTags",
          "ec2:DetachNetworkInterface",
          "ec2:ModifyNetworkInterfaceAttribute",
          "ec2:RunInstances",
          "ec2:TerminateInstances"
        ]
      },
      "networkInterfaceUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Update the tags for AWS EC2 network interface tags.",
        "function": {
          "src": "functions/networkInterface/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "5b66e76a3b",
          "handler": "index.networkInterfaceUpdateTags"
        }
      },
      "networkLoadBalancerDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/networkLoadBalancer",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 network load balancer from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/networkLoadBalancer/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "2c638ec2bf",
          "handler": "index.networkLoadBalancerDelete"
        }
      },
      "networkLoadBalancerRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Network Load Balancer resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Network Load Balancer resources in the CMDB.\n",
        "events": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateLoadBalancer",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:ModifyLoadBalancerAttributes",
          "elasticloadbalancing:RemoveTags",
          "elasticloadbalancing:SetIpAddressType",
          "elasticloadbalancing:SetSecurityGroups",
          "elasticloadbalancing:SetSubnets"
        ]
      },
      "networkLoadBalancerUpdateAccessLogging": {
        "title": "Update Access Logging",
        "icon": "eye",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Configure access logging for the load balancer.\n\nElastic Load Balancing provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n",
        "function": {
          "src": "functions/networkLoadBalancer/updateAccessLogging",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "dde99d37a5",
          "handler": "index.networkLoadBalancerUpdateAccessLogging"
        }
      },
      "networkLoadBalancerUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Update the tags for AWS EC2 network load balancer tags.",
        "function": {
          "src": "functions/networkLoadBalancer/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "eb0b909105",
          "handler": "index.networkLoadBalancerUpdateTags"
        }
      },
      "snapshotDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/snapshot",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 snapshot from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/snapshot/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "b2e59416d3",
          "handler": "index.snapshotDelete"
        }
      },
      "snapshotRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Snapshot resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Snapshot resources in the CMDB.\n",
        "events": [
          "ec2:CopySnapshot",
          "ec2:CreateSnapshot",
          "ec2:CreateSnapshots",
          "ec2:CreateTags",
          "ec2:DeleteSnapshot",
          "ec2:DeleteTags",
          "ec2:ImportSnapshot",
          "ec2:ModifySnapshotAttribute",
          "ec2:ResetSnapshotAttribute"
        ]
      },
      "snapshotSetTrustedAccess": {
        "title": "Set Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/snapshot",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Set Trusted Access for AWS > EC2 > Snapshot.",
        "function": {
          "src": "functions/snapshot/setTrustedAccess",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "ebb5582f7d",
          "handler": "index.snapshotSetTrustedAccess"
        }
      },
      "snapshotUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Update the tags for AWS EC2 snapshot tags.",
        "function": {
          "src": "functions/snapshot/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "5a393e59d8",
          "handler": "index.snapshotUpdateTags"
        }
      },
      "targetGroupDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/targetGroup",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 target group from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/targetGroup/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "4776a99070",
          "handler": "index.targetGroupDelete"
        }
      },
      "targetGroupRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Target Group resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Target Group resources in the CMDB.\n",
        "events": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateTargetGroup",
          "elasticloadbalancing:DeleteTargetGroup",
          "elasticloadbalancing:DeregisterTargets",
          "elasticloadbalancing:ModifyTargetGroup",
          "elasticloadbalancing:ModifyTargetGroupAttributes",
          "elasticloadbalancing:RegisterTargets",
          "elasticloadbalancing:RemoveTags"
        ]
      },
      "targetGroupUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Update the tags for AWS EC2 target group tags.",
        "function": {
          "src": "functions/targetGroup/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "53e313dc81",
          "handler": "index.targetGroupUpdateTags"
        }
      },
      "volumeDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/volume",
        "targets": [
          "#/resource/types/volume"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 volume from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/volume/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "5bee5ae1fe",
          "handler": "index.volumeDelete"
        }
      },
      "volumeRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Volume resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Volume resources in the CMDB.\n",
        "events": [
          "ec2:AttachVolume",
          "ec2:CreateTags",
          "ec2:CreateVolume",
          "ec2:DeleteTags",
          "ec2:DeleteVolume",
          "ec2:DetachVolume",
          "ec2:ModifyVolume",
          "ec2:ModifyVolumeAttribute",
          "ec2:RunInstances"
        ]
      },
      "volumeUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Update the tags for AWS EC2 volume tags.",
        "function": {
          "src": "functions/volume/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "5a393e59d8",
          "handler": "index.volumeUpdateTags"
        }
      },
      "loadBalancerListenerDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/loadBalancerListener",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 load balancer listener from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/loadBalancerListener/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "28aa417327",
          "handler": "index.loadBalancerListenerDelete"
        }
      },
      "loadBalancerListenerRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Load Balancer Listener resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Load Balancer Listener resources in the CMDB.\n",
        "events": [
          "elasticloadbalancing:AddListenerCertificates",
          "elasticloadbalancing:CreateListener",
          "elasticloadbalancing:DeleteListener",
          "elasticloadbalancing:ModifyListener",
          "elasticloadbalancing:RemoveListenerCertificates"
        ]
      },
      "loadBalancerListenerUpdateSslPolicy": {
        "title": "Update SSL Policy",
        "icon": "fal-lock-alt",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Update the SSL policy for the AWS EC2 load balancer listener.\n",
        "function": {
          "src": "functions/loadBalancerListener/updateSslPolicy",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "4cf729e6ba",
          "handler": "index.loadBalancerListenerUpdateSslPolicy"
        }
      },
      "listenerRuleDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/listenerRule",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 listener rule from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/listenerRule/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "4742618fe8",
          "handler": "index.listenerRuleDelete"
        }
      },
      "listenerRuleRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Listener Rule resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Listener Rule resources in the CMDB.\n",
        "events": [
          "elasticloadbalancing:CreateRule",
          "elasticloadbalancing:DeleteRule",
          "elasticloadbalancing:ModifyRule"
        ]
      },
      "classicLoadBalancerListenerDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 classic load balancer listener from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/classicLoadBalancerListener/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "e754f5b513",
          "handler": "index.classicLoadBalancerListenerDelete"
        }
      },
      "classicLoadBalancerListenerRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Classic Load Balancer Listener resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Classic Load Balancer Listener resources in the CMDB.\n",
        "events": [
          "elasticloadbalancing:CreateLoadBalancerListeners",
          "elasticloadbalancing:DeleteLoadBalancerListeners",
          "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
          "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
        ]
      },
      "classicLoadBalancerListenerUpdateSslPolicy": {
        "title": "Update SSL Policy",
        "icon": "fal-lock-alt",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Update the SSL policy for the AWS EC2 classic load balancer listener.\n",
        "function": {
          "src": "functions/classicLoadBalancerListener/updateSslPolicy",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "f8372f8a62",
          "handler": "index.classicLoadBalancerListenerUpdateSslPolicy"
        }
      },
      "gatewayLoadBalancerDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS EC2 gateway load balancer from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/gatewayLoadBalancer/delete",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "c6839bbdf5",
          "handler": "index.gatewayLoadBalancerDelete"
        }
      },
      "gatewayLoadBalancerRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS EC2 service Gateway Load Balancer resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Gateway Load Balancer resources in the CMDB.\n",
        "events": [
          "elasticloadbalancing:AddTags",
          "elasticloadbalancing:CreateLoadBalancer",
          "elasticloadbalancing:DeleteLoadBalancer",
          "elasticloadbalancing:ModifyLoadBalancerAttributes",
          "elasticloadbalancing:RemoveTags",
          "elasticloadbalancing:SetIpAddressType",
          "elasticloadbalancing:SetSecurityGroups",
          "elasticloadbalancing:SetSubnets"
        ]
      },
      "gatewayLoadBalancerUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Update the tags for AWS EC2 gateway load balancer tags.",
        "function": {
          "src": "functions/gatewayLoadBalancer/updateTags",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 1024,
          "hash": "08c3150e64",
          "handler": "index.gatewayLoadBalancerUpdateTags"
        }
      }
    }
  },
  "control": {
    "types": {
      "amiActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Take an action when an AWS EC2 ami is not active based on the\n`AWS > EC2 > AMI > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > AMI > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/amiActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/amiCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "amiApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Take an action when an AWS EC2 ami is not approved based on `AWS > EC2 > AMI > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/amiApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/amiCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "amiCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Record and synchronize details for the AWS EC2 ami into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > AMI > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/amiCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/ami/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "1e0583d572",
          "handler": "index.amiCmdb"
        }
      },
      "amiConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Maintain AWS > EC2 > AMI configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "amiDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 ami resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > AMI > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/amiCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/amiCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/ami/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "f5152c3092",
          "handler": "index.amiDiscovery"
        }
      },
      "amiTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/ami",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Take an action when an AWS EC2 ami tags is not updated based on the `AWS > EC2 > AMI > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > AMI > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/amiTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "amiTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Manage trusted access for AWS EC2 AMIs.\n\nAWS allows EC2 AMIs to be shared with specific AWS accounts.\nThis control allows you to configure whether such sharing is allowed, and to which accounts.\n\nIf set to `Enforce`, access to non-trusted accounts will be removed.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/amiTrustedAccess",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Trusted Access set to Skip"
          },
          {
            "control": {
              "uri": "tmod:@turbot/aws-ec2#/control/types/amiCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "amiUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 ami resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > AMI > Usage` policy, and set the limit with the `AWS > EC2 > AMI > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/amiUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "applicationLoadBalancerAccessLogging": {
        "title": "Access Logging",
        "icon": "fal-file-download",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Define the Access Logging settings required for `AWS > EC2 > Application Load Balancer`.\n\n`AWS > EC2 > Application Load Balancer` provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n"
      },
      "applicationLoadBalancerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 application load balancer is not active based on the\n`AWS > EC2 > Application Load Balancer > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Application Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/applicationLoadBalancerActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/applicationLoadBalancerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "applicationLoadBalancerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 application load balancer is not approved based on `AWS > EC2 > Application Load Balancer > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/applicationLoadBalancerApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/applicationLoadBalancerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "applicationLoadBalancerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Record and synchronize details for the AWS EC2 application load balancer into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Application Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/applicationLoadBalancerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/applicationLoadBalancer/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "da76d79218",
          "handler": "index.applicationLoadBalancerCmdb"
        }
      },
      "applicationLoadBalancerConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Maintain AWS > EC2 > Application Load Balancer configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "applicationLoadBalancerDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 application load balancer resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Application Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/applicationLoadBalancerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/applicationLoadBalancerCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/applicationLoadBalancer/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "af773a2deb",
          "handler": "index.applicationLoadBalancerDiscovery"
        }
      },
      "applicationLoadBalancerTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/applicationLoadBalancer",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 application load balancer tags is not updated based on the `AWS > EC2 > Application Load Balancer > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Application Load Balancer > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/applicationLoadBalancerTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "applicationLoadBalancerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 application load balancer resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Application Load Balancer > Usage` policy, and set the limit with the `AWS > EC2 > Application Load Balancer > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/applicationLoadBalancerUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "autoScalingGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Take an action when an AWS EC2 auto scaling group is not active based on the\n`AWS > EC2 > Auto Scaling Group > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Auto Scaling Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/autoScalingGroupActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/autoScalingGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "autoScalingGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Take an action when an AWS EC2 auto scaling group is not approved based on `AWS > EC2 > Auto Scaling Group > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/autoScalingGroupApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/autoScalingGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "autoScalingGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Record and synchronize details for the AWS EC2 auto scaling group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Auto Scaling Group > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/autoScalingGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/autoScalingGroup/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "a13f4258de",
          "handler": "index.autoScalingGroupCmdb"
        }
      },
      "autoScalingGroupDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 auto scaling group resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Auto Scaling Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/autoScalingGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/autoScalingGroupCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/autoScalingGroup/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "9efba6adac",
          "handler": "index.autoScalingGroupDiscovery"
        }
      },
      "autoScalingGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/autoScalingGroup",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Take an action when an AWS EC2 auto scaling group tags is not updated based on the `AWS > EC2 > Auto Scaling Group > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Auto Scaling Group > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/autoScalingGroupTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "autoScalingGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 auto scaling group resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Auto Scaling Group > Usage` policy, and set the limit with the `AWS > EC2 > Auto Scaling Group > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/autoScalingGroupUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "classicLoadBalancerAccessLogging": {
        "title": "Access Logging",
        "icon": "fal-file-download",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Define the Access Logging settings required for `AWS > EC2 > Classic Load Balancer`.\n\n`AWS > EC2 > Classic Load Balancer` provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n"
      },
      "classicLoadBalancerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 classic load balancer is not active based on the\n`AWS > EC2 > Classic Load Balancer > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/classicLoadBalancerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "classicLoadBalancerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 classic load balancer is not approved based on `AWS > EC2 > Classic Load Balancer > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/classicLoadBalancerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "classicLoadBalancerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Record and synchronize details for the AWS EC2 classic load balancer into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Classic Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/classicLoadBalancer/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "20eb1bc9b0",
          "handler": "index.classicLoadBalancerCmdb"
        }
      },
      "classicLoadBalancerConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Maintain AWS > EC2 > Classic Load Balancer configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "classicLoadBalancerDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 classic load balancer resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Classic Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/classicLoadBalancer/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "76a1030cac",
          "handler": "index.classicLoadBalancerDiscovery"
        }
      },
      "classicLoadBalancerTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/classicLoadBalancer",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 classic load balancer tags is not updated based on the `AWS > EC2 > Classic Load Balancer > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Classic Load Balancer > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "classicLoadBalancerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 classic load balancer resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Classic Load Balancer > Usage` policy, and set the limit with the `AWS > EC2 > Classic Load Balancer > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "instanceActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Take an action when an AWS EC2 instance is not active based on the\n`AWS > EC2 > Instance > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Instance > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/instanceActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/instanceCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "instanceApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Take an action when an AWS EC2 instance is not approved based on `AWS > EC2 > Instance > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/instanceApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/instanceCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "instanceCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Record and synchronize details for the AWS EC2 instance into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Instance > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/instanceCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/instance/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "6945b1a401",
          "handler": "index.instanceCmdb"
        }
      },
      "instanceConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Maintain AWS > EC2 > Instance configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "instanceDetailedMonitoring": {
        "title": "Detailed Monitoring",
        "icon": "fal-monitor-heart-rate",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceLogging",
        "description": "Define the Detailed Monitoring settings required for `AWS > EC2 > Instance > Detailed Monitoring`.\n\nIf detailed monitoring is enabled then Amazon EC2 console displays monitoring graphs with a 1-minute period for the instance.\n\n**Note**: Enabling detailed monitoring will incur additional charges.\n"
      },
      "instanceDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 instance resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Instance > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/instanceCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/instanceCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/instance/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "e8e9f137de",
          "handler": "index.instanceDiscovery"
        }
      },
      "instanceInstanceProfile": {
        "title": "Instance Profile",
        "icon": "fal-user-circle",
        "description": "Determine whether the IAM instance profile is attached to instance.\n",
        "parent": "#/resource/types/instance",
        "targets": "#/resource/types/instance",
        "category": "turbot#/control/categories/other",
        "help": "#/help/instanceProfile"
      },
      "instanceMetadataService": {
        "title": "Metadata Service",
        "icon": "file-chart-line",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Instance metadata is data about your instance that you can use to configure or manage the running instance.\nInstance metadata is divided into categories, for example, host name, events, and security groups.\n\nInstance metadata can be accessed from a running instance using one of the following methods:\n\n  * Instance Metadata Service Version 1 (IMDSv1) – a request/response method\n\n  * Instance Metadata Service Version 2 (IMDSv2) – a session-oriented method\n\nBy default, you can use either IMDSv1 or IMDSv2, or both. However, the instance metadata service can be specifically\nconfigured to use IMDSv2 on each instance. When you specify that IMDSv2 must be used, IMDSv1 no longer works.\n"
      },
      "instanceSchedule": {
        "title": "Schedule",
        "icon": "fal-clock",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Set a schedule for starting and stopping an AWS EC2 instance.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\ninstance has a turbot_custom_schedule tag, then the schedule specified by\nthe tag will be in effect.\n",
        "precheck": [
          {
            "control": {
              "uri": "tmod:@turbot/aws-ec2#/control/types/instanceCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "instanceTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Take an action when an AWS EC2 instance tags is not updated based on the `AWS > EC2 > Instance > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Instance > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/instanceTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "instanceTerminationProtection": {
        "title": "Termination Protection",
        "icon": "fal-shield",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceDataProtection",
        "description": "Define the Termination Protection settings required for `AWS > EC2 > Instance > Termination Protection`.\n\nIt allows to prevent an instance from being terminated accidentally by someone using the AWS Management Console, the CLI, and the API.\n"
      },
      "instanceUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 instance resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Instance > Usage` policy, and set the limit with the `AWS > EC2 > Instance > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/instanceUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "keyPairActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Take an action when an AWS EC2 key pair is not active based on the\n`AWS > EC2 > Key Pair > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Key Pair > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyPairActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/keyPairCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "keyPairApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Take an action when an AWS EC2 key pair is not approved based on `AWS > EC2 > Key Pair > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyPairApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/keyPairCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "keyPairCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Record and synchronize details for the AWS EC2 key pair into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Key Pair > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyPairCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/keyPair/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "2daeb5cb6a",
          "handler": "index.keyPairCmdb"
        }
      },
      "keyPairDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 key pair resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Key Pair > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyPairCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/keyPairCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/keyPair/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "0df7da5865",
          "handler": "index.keyPairDiscovery"
        }
      },
      "keyPairTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/keyPair",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Take an action when an AWS EC2 key pair tags is not updated based on the `AWS > EC2 > Key Pair > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Key Pair > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyPairTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "keyPairUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 key pair resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Key Pair > Usage` policy, and set the limit with the `AWS > EC2 > Key Pair > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyPairUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "launchConfigurationActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "Take an action when an AWS EC2 launch configuration is not active based on the\n`AWS > EC2 > Launch Configuration > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Configuration > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchConfigurationActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/launchConfigurationCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "launchConfigurationApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "Take an action when an AWS EC2 launch configuration is not approved based on `AWS > EC2 > Launch Configuration > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchConfigurationApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/launchConfigurationCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "launchConfigurationCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "Record and synchronize details for the AWS EC2 launch configuration into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Launch Configuration > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchConfigurationCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/launchConfiguration/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "22fe2cc4de",
          "handler": "index.launchConfigurationCmdb"
        }
      },
      "launchConfigurationDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 launch configuration resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Launch Configuration > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchConfigurationCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/launchConfigurationCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/launchConfiguration/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "8dc8252e5d",
          "handler": "index.launchConfigurationDiscovery"
        }
      },
      "launchConfigurationUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 launch configuration resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Launch Configuration > Usage` policy, and set the limit with the `AWS > EC2 > Launch Configuration > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchConfigurationUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "launchTemplateActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Take an action when an AWS EC2 launch template is not active based on the\n`AWS > EC2 > Launch Template > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Template > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/launchTemplateCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "launchTemplateApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Take an action when an AWS EC2 launch template is not approved based on `AWS > EC2 > Launch Template > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/launchTemplateCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "launchTemplateCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Record and synchronize details for the AWS EC2 launch template into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Launch Template > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/launchTemplate/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "f47c1e595e",
          "handler": "index.launchTemplateCmdb"
        }
      },
      "launchTemplateDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 launch template resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Launch Template > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/launchTemplate/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "554b1e61f6",
          "handler": "index.launchTemplateDiscovery"
        }
      },
      "launchTemplateTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/launchTemplate",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Take an action when an AWS EC2 launch template tags is not updated based on the `AWS > EC2 > Launch Template > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Launch Template > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "launchTemplateUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 launch template resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Launch Template > Usage` policy, and set the limit with the `AWS > EC2 > Launch Template > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "launchTemplateVersionActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "Take an action when an AWS EC2 launch template version is not active based on the\n`AWS > EC2 > Launch Template Version > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Template Version > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateVersionActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/launchTemplateVersionCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "launchTemplateVersionApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "Take an action when an AWS EC2 launch template version is not approved based on `AWS > EC2 > Launch Template Version > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateVersionApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/launchTemplateVersionCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "launchTemplateVersionCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "Record and synchronize details for the AWS EC2 launch template version into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Launch Template Version > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateVersionCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/launchTemplateVersion/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "9fec554957",
          "handler": "index.launchTemplateVersionCmdb"
        }
      },
      "launchTemplateVersionDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Discover all AWS EC2 launch template version resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Launch Template Version > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateVersionCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateVersionCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/launchTemplateVersion/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "e30f5b114d",
          "handler": "index.launchTemplateVersionDiscovery"
        }
      },
      "launchTemplateVersionUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 launch template version resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Launch Template Version > Usage` policy, and set the limit with the `AWS > EC2 > Launch Template Version > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/launchTemplateVersionUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "networkInterfaceActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Take an action when an AWS EC2 network interface is not active based on the\n`AWS > EC2 > Network Interface > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Interface > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkInterfaceActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/networkInterfaceCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "networkInterfaceApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Take an action when an AWS EC2 network interface is not approved based on `AWS > EC2 > Network Interface > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkInterfaceApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/networkInterfaceCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "networkInterfaceCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Record and synchronize details for the AWS EC2 network interface into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Network Interface > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkInterfaceCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/networkInterface/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "95a388c480",
          "handler": "index.networkInterfaceCmdb"
        }
      },
      "networkInterfaceConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Maintain AWS > EC2 > Network Interface configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "networkInterfaceDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 network interface resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Network Interface > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkInterfaceCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/networkInterfaceCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/networkInterface/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "e54c882647",
          "handler": "index.networkInterfaceDiscovery"
        }
      },
      "networkInterfaceTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/networkInterface",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Take an action when an AWS EC2 network interface tags is not updated based on the `AWS > EC2 > Network Interface > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Network Interface > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkInterfaceTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "networkInterfaceUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 network interface resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Network Interface > Usage` policy, and set the limit with the `AWS > EC2 > Network Interface > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkInterfaceUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "networkLoadBalancerAccessLogging": {
        "title": "Access Logging",
        "icon": "fal-file-download",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Define the Access Logging settings required for `AWS > EC2 > Network Load Balancer`.\n\n`AWS > EC2 > Network Load Balancer` provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n"
      },
      "networkLoadBalancerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 network load balancer is not active based on the\n`AWS > EC2 > Network Load Balancer > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkLoadBalancerActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/networkLoadBalancerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "networkLoadBalancerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 network load balancer is not approved based on `AWS > EC2 > Network Load Balancer > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkLoadBalancerApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/networkLoadBalancerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "networkLoadBalancerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Record and synchronize details for the AWS EC2 network load balancer into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Network Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkLoadBalancerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/networkLoadBalancer/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "8a19f07217",
          "handler": "index.networkLoadBalancerCmdb"
        }
      },
      "networkLoadBalancerConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Maintain AWS > EC2 > Network Load Balancer configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "networkLoadBalancerDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 network load balancer resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Network Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkLoadBalancerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/networkLoadBalancerCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/networkLoadBalancer/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "c5eea9fd4e",
          "handler": "index.networkLoadBalancerDiscovery"
        }
      },
      "networkLoadBalancerTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/networkLoadBalancer",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 network load balancer tags is not updated based on the `AWS > EC2 > Network Load Balancer > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Network Load Balancer > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkLoadBalancerTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "networkLoadBalancerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 network load balancer resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Network Load Balancer > Usage` policy, and set the limit with the `AWS > EC2 > Network Load Balancer > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkLoadBalancerUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "snapshotActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Take an action when an AWS EC2 snapshot is not active based on the\n`AWS > EC2 > Snapshot > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Snapshot > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/snapshotActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/snapshotCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "snapshotApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Take an action when an AWS EC2 snapshot is not approved based on `AWS > EC2 > Snapshot > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/snapshotApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/snapshotCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "snapshotCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Record and synchronize details for the AWS EC2 snapshot into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Snapshot > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/snapshotCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/snapshot/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "3b9af82359",
          "handler": "index.snapshotCmdb"
        }
      },
      "snapshotConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Maintain AWS > EC2 > Snapshot configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "snapshotDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 snapshot resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Snapshot > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/snapshotCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/snapshotCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/snapshot/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 2048,
          "timeout": 900,
          "hash": "58ffdb6a72",
          "handler": "index.snapshotDiscovery"
        }
      },
      "snapshotTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/snapshot",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Take an action when an AWS EC2 snapshot tags is not updated based on the `AWS > EC2 > Snapshot > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Snapshot > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/snapshotTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "snapshotTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Manage trusted access for AWS EC2 Snapshots.\n\nAWS allows EC2 Snapshots to be shared with specific AWS accounts.\nThis control allows you to configure whether such sharing is allowed, and to which accounts.\n\nIf set to `Enforce`, access to non-trusted accounts will be removed.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/snapshotTrustedAccess",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Trusted Access set to Skip"
          },
          {
            "control": {
              "uri": "tmod:@turbot/aws-ec2#/control/types/snapshotCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "snapshotUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 snapshot resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Snapshot > Usage` policy, and set the limit with the `AWS > EC2 > Snapshot > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/snapshotUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "targetGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Take an action when an AWS EC2 target group is not active based on the\n`AWS > EC2 > Target Group > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Target Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/targetGroupActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/targetGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "targetGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Take an action when an AWS EC2 target group is not approved based on `AWS > EC2 > Target Group > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/targetGroupApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/targetGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "targetGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Record and synchronize details for the AWS EC2 target group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Target Group > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/targetGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/targetGroup/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "35a14a367b",
          "handler": "index.targetGroupCmdb"
        }
      },
      "targetGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Maintain AWS > EC2 > Target Group configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "targetGroupDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 target group resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Target Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/targetGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/targetGroupCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/targetGroup/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "9369aa4172",
          "handler": "index.targetGroupDiscovery"
        }
      },
      "targetGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/targetGroup",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Take an action when an AWS EC2 target group tags is not updated based on the `AWS > EC2 > Target Group > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Target Group > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/targetGroupTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "targetGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 target group resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Target Group > Usage` policy, and set the limit with the `AWS > EC2 > Target Group > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/targetGroupUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "volumeActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Take an action when an AWS EC2 volume is not active based on the\n`AWS > EC2 > Volume > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Volume > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/volumeActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/volumeCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "volumeApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Take an action when an AWS EC2 volume is not approved based on `AWS > EC2 > Volume > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/volumeApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/volumeCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "volumeCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Record and synchronize details for the AWS EC2 volume into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Volume > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/volumeCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/volume/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "b1392c9a00",
          "handler": "index.volumeCmdb"
        }
      },
      "volumeConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Maintain AWS > EC2 > Volume configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "volumeDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 volume resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Volume > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/volumeCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/volumeCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/volume/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "918ac8ef0b",
          "handler": "index.volumeDiscovery"
        }
      },
      "volumeTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/volume",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Take an action when an AWS EC2 volume tags is not updated based on the `AWS > EC2 > Volume > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Volume > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/volumeTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "volumeUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 volume resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Volume > Usage` policy, and set the limit with the `AWS > EC2 > Volume > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/volumeUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "loadBalancerListenerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Take an action when an AWS EC2 load balancer listener is not active based on the\n`AWS > EC2 > Load Balancer Listener > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Load Balancer Listener > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/loadBalancerListenerActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/loadBalancerListenerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "loadBalancerListenerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Take an action when an AWS EC2 load balancer listener is not approved based on `AWS > EC2 > Load Balancer Listener > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/loadBalancerListenerApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/loadBalancerListenerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "loadBalancerListenerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Record and synchronize details for the AWS EC2 load balancer listener into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Load Balancer Listener > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/loadBalancerListenerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/loadBalancerListener/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "175601afe3",
          "handler": "index.loadBalancerListenerCmdb"
        }
      },
      "loadBalancerListenerConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Maintain AWS > EC2 > Load Balancer Listener configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "loadBalancerListenerDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Discover all AWS EC2 load balancer listener resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Load Balancer Listener > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/loadBalancerListenerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/loadBalancerListenerCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/loadBalancerListener/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "067319631c",
          "handler": "index.loadBalancerListenerDiscovery"
        }
      },
      "loadBalancerListenerSslPolicy": {
        "title": "SSL Policy",
        "icon": "fal-lock-alt",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Take an action when an AWS EC2 load balancer listener is not using an allowed SSL policy.\n\nIf the SSL policy specified in the `AWS > EC2 > Load Balancer Listener > SSL Policy > Default` policy is not in the `AWS > EC2 > Load Balancer Listener > SSL Policy > Allowed` policy, the control will move to `invalid` to prevent a conflict.\n"
      },
      "loadBalancerListenerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 load balancer listener resources exceeds the configured usage limit for this applicationLoadBalancer.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Load Balancer Listener > Usage` policy, and set the limit with the `AWS > EC2 > Load Balancer Listener > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/loadBalancerListenerUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "listenerRuleActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "Take an action when an AWS EC2 listener rule is not active based on the\n`AWS > EC2 > Listener Rule > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Listener Rule > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/listenerRuleActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/listenerRuleCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "listenerRuleApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "Take an action when an AWS EC2 listener rule is not approved based on `AWS > EC2 > Listener Rule > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/listenerRuleApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/listenerRuleCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "listenerRuleCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "Record and synchronize details for the AWS EC2 listener rule into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Listener Rule > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/listenerRuleCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/listenerRule/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "506ba661a2",
          "handler": "index.listenerRuleCmdb"
        }
      },
      "listenerRuleConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "Maintain AWS > EC2 > Listener Rule configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "listenerRuleDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Discover all AWS EC2 listener rule resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Listener Rule > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/listenerRuleCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/listenerRuleCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/listenerRule/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "56102fda75",
          "handler": "index.listenerRuleDiscovery"
        }
      },
      "listenerRuleUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 listener rule resources exceeds the configured usage limit for this applicationLoadBalancer.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Listener Rule > Usage` policy, and set the limit with the `AWS > EC2 > Listener Rule > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/listenerRuleUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "classicLoadBalancerListenerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Take an action when an AWS EC2 classic load balancer listener is not active based on the\n`AWS > EC2 > Classic Load Balancer Listener > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer Listener > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerListenerActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/classicLoadBalancerListenerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "classicLoadBalancerListenerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Take an action when an AWS EC2 classic load balancer listener is not approved based on `AWS > EC2 > Classic Load Balancer Listener > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerListenerApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/classicLoadBalancerListenerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "classicLoadBalancerListenerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Record and synchronize details for the AWS EC2 classic load balancer listener into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Classic Load Balancer Listener > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerListenerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/classicLoadBalancerListener/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "b9bb7b60f1",
          "handler": "index.classicLoadBalancerListenerCmdb"
        }
      },
      "classicLoadBalancerListenerDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Discover all AWS EC2 classic load balancer listener resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Classic Load Balancer Listener > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerListenerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerListenerCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/classicLoadBalancerListener/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "51c304b0ef",
          "handler": "index.classicLoadBalancerListenerDiscovery"
        }
      },
      "classicLoadBalancerListenerSslPolicy": {
        "title": "SSL Policy",
        "icon": "fal-lock-alt",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Take an action when an AWS EC2 classic load balancer listener is not using an allowed SSL policy.\n\nIf the SSL policy specified in the `AWS > EC2 > Classic Load Balancer Listener > SSL Policy > Default` policy is not in the `AWS > EC2 > Classic Load Balancer Listener > SSL Policy > Allowed` policy, the control will move to `invalid` to prevent a conflict.\n"
      },
      "classicLoadBalancerListenerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 classic load balancer listener resources exceeds the configured usage limit for this classicLoadBalancer.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Classic Load Balancer Listener > Usage` policy, and set the limit with the `AWS > EC2 > Classic Load Balancer Listener > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/classicLoadBalancerListenerUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "gatewayLoadBalancerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 gateway load balancer is not active based on the\n`AWS > EC2 > Gateway Load Balancer > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Gateway Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/gatewayLoadBalancerActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/gatewayLoadBalancerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "gatewayLoadBalancerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 gateway load balancer is not approved based on `AWS > EC2 > Gateway Load Balancer > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/gatewayLoadBalancerApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/gatewayLoadBalancerCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "gatewayLoadBalancerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Record and synchronize details for the AWS EC2 gateway load balancer into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Gateway Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/gatewayLoadBalancerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/gatewayLoadBalancer/cmdb",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "hash": "bf8e50594f",
          "handler": "index.gatewayLoadBalancerCmdb"
        }
      },
      "gatewayLoadBalancerDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS EC2 gateway load balancer resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > EC2 > Gateway Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/gatewayLoadBalancerCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/gatewayLoadBalancerCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/gatewayLoadBalancer/discovery",
          "bundle": "functions/combined/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "2eabdadb17",
          "handler": "index.gatewayLoadBalancerDiscovery"
        }
      },
      "gatewayLoadBalancerTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Take an action when an AWS EC2 gateway load balancer tags is not updated based on the `AWS > EC2 > Gateway Load Balancer > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > EC2 > Gateway Load Balancer > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/gatewayLoadBalancerTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "gatewayLoadBalancerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS EC2 gateway load balancer resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > EC2 > Gateway Load Balancer > Usage` policy, and set the limit with the `AWS > EC2 > Gateway Load Balancer > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/gatewayLoadBalancerUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      }
    }
  },
  "definitions": {
    "ami": {
      "type": "object",
      "properties": {
        "Architecture": {
          "type": "string"
        },
        "ImageId": {
          "$ref": "#/definitions/imageId"
        },
        "ImageLocation": {
          "type": "string"
        },
        "ImageType": {
          "$ref": "#/definitions/imageType"
        },
        "Public": {
          "$ref": "#/definitions/imagePublic"
        },
        "EnaSupport": {
          "$ref": "#/definitions/imageEnaSupport"
        },
        "Hypervisor": {
          "$ref": "#/definitions/imageHypervisor"
        },
        "Name": {
          "type": "string"
        },
        "RootDeviceName": {
          "type": "string"
        },
        "RootDeviceType": {
          "$ref": "#/definitions/imageRootDeviceType"
        },
        "SriovNetSupport": {
          "type": "string"
        },
        "CreationDate": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "State": {
          "$ref": "#/definitions/amiStatus"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "OwnerId": {
          "$ref": "aws#/definitions/accountId"
        },
        "Platform": {
          "type": "string"
        },
        "ProductCodes": {
          "$ref": "#/definitions/instanceProductCodeList"
        },
        "BlockDeviceMappings": {
          "type": "array"
        },
        "StateReason": {
          "$ref": "#/definitions/stateReason"
        },
        "VirtualizationType": {
          "type": "string"
        },
        "KernelId": {
          "$ref": "#/definitions/instanceAttributeValue"
        },
        "RamdiskId": {
          "$ref": "#/definitions/instanceAttributeValue"
        },
        "Description": {
          "type": "string",
          "description": "The description of the AMI that was provided during image creation."
        },
        "ImageOwnerAlias": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/amiAka"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/imageId"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "all properties given",
          "input": {
            "ImageId": "ami-0022c769",
            "OwnerId": 123456789012,
            "Tags": [
              {
                "Key": "foo",
                "Value": "bar"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:image/ami-0022c769"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "ami-0022c769",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "imageId": {
      "type": "string",
      "pattern": "^ami-[a-f0-9]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "ami-df90ecb0"
        },
        {
          "input": "ami-df8dd2b0df8dd2b01"
        },
        {
          "description": "invalid - image id is invalid if more than 12 char and less than 21",
          "input": "ami-df8dd2b01",
          "expected": false
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - image id beyond the regex",
          "input": "Hello@123",
          "expected": false
        },
        {
          "description": "invalid - $ in image id",
          "input": "Hello$123",
          "expected": false
        },
        {
          "description": "invalid - image id  is invalid if 2 or less chars",
          "input": 12,
          "expected": false
        }
      ]
    },
    "amiStatus": {
      "type": "string",
      "enum": [
        "pending",
        "available",
        "invalid",
        "deregistered",
        "transient",
        "failed",
        "error"
      ],
      "tests": [
        {
          "input": "available"
        },
        {
          "description": "invalid - not listed in options",
          "input": "RUNNABLE",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        }
      ]
    },
    "amiAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:image/ami-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:123456789012:image/ami-0022c769"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:123456789012:images/ami-0022c769",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:use-east-1:123456789012:image/ami-0022c769",
          "expected": false
        }
      ]
    },
    "imageType": {
      "type": "string",
      "enum": [
        "machine",
        "kernel",
        "ramdisk"
      ],
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "machine"
        },
        {
          "description": "Invalid - not listed in options",
          "input": "grey",
          "expected": false
        }
      ]
    },
    "imagePublic": {
      "type": "boolean",
      "tests": [
        {
          "input": true
        },
        {
          "input": false
        },
        {
          "input": "true"
        },
        {
          "input": 0
        },
        {
          "input": "false"
        },
        {
          "description": "invalid - string",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "imageEnaSupport": {
      "type": "boolean",
      "tests": [
        {
          "input": true
        },
        {
          "input": false
        },
        {
          "input": "true"
        },
        {
          "input": 0
        },
        {
          "input": "false"
        },
        {
          "description": "invalid - string",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "imageHypervisor": {
      "type": "string",
      "enum": [
        "ovm",
        "xen"
      ],
      "tests": [
        {
          "input": "xen"
        },
        {
          "input": "ovm"
        },
        {
          "description": "Invalid - not listed in options",
          "input": "grey",
          "expected": false
        }
      ]
    },
    "imageRootDeviceType": {
      "type": "string",
      "enum": [
        "ebs",
        "instance-store"
      ],
      "tests": [
        {
          "input": "instance-store"
        },
        {
          "input": "ebs"
        },
        {
          "description": "Invalid - not listed in options",
          "input": "grey",
          "expected": false
        }
      ]
    },
    "applicationLoadBalancer": {
      "type": "object",
      "properties": {
        "LoadBalancerArn": {
          "$ref": "#/definitions/applicationLoadBalancingArn",
          "description": "The Amazon Resource Name (ARN) of the load balancer."
        },
        "DNSName": {
          "$ref": "#/definitions/dnsName",
          "description": "The public DNS name of the load balancer."
        },
        "CanonicalHostedZoneId": {
          "$ref": "#/definitions/canonicalHostedZoneId",
          "description": "The ID of the Amazon Route 53 hosted zone associated with the load balancer."
        },
        "CreatedTime": {
          "$ref": "#/definitions/createdTime",
          "description": "The date and time the load balancer was created."
        },
        "LoadBalancerName": {
          "$ref": "#/definitions/loadBalancerName",
          "description": "The name of the load balancer."
        },
        "Scheme": {
          "$ref": "#/definitions/scheme",
          "description": "The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer."
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId",
          "description": "The ID of the VPC for the load balancer."
        },
        "State": {
          "$ref": "#/definitions/loadBalanceState",
          "description": "The state of the load balancer."
        },
        "Type": {
          "$ref": "#/definitions/type",
          "description": "The type of load balancer."
        },
        "AvailabilityZones": {
          "$ref": "#/definitions/availabilityZones",
          "description": "The Availability Zones for the load balancer."
        },
        "SecurityGroups": {
          "$ref": "#/definitions/securityGroups",
          "description": "The IDs of the security groups for the load balancer."
        },
        "IpAddressType": {
          "$ref": "#/definitions/ipAddressType",
          "description": "The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses)."
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "LoadBalancerId": {
          "$ref": "#/definitions/loadbalancerId"
        },
        "Attributes": {
          "$ref": "#/definitions/loadBalancerAttributes"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/applicationLoadBalancingArn"
              }
            },
            "title": {
              "$ref": "#/definitions/loadBalancerName"
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                },
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - all properties given",
          "input": {
            "LoadBalancerName": "foo",
            "LoadBalancerId": "50dc6c495c0c9188",
            "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188",
            "CanonicalHostedZoneId": "Z3DZXE0EXAMPLE",
            "DNSName": "my-load-balancer-1234567890.us-west-2.elb.amazonaws.com",
            "SecurityGroups": [
              "sg-a61988c3"
            ],
            "CreatedTime": "2015-03-19T03:24:02.650Z",
            "AvailabilityZones": [
              {
                "ZoneName": "us-west-2a"
              }
            ],
            "Type": "application",
            "Scheme": "internet-facing",
            "IpAddressType": "ipv4",
            "VpcId": "vpc-3ac0fb5f",
            "State": {
              "Code": "active"
            },
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188"
              ],
              "title": "foo",
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "createTimestamp": "2015-03-19T03:24:02.650Z",
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1",
                  "partition": "aws"
                }
              }
            }
          }
        }
      ]
    },
    "applicationLoadBalancingArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:loadbalancer/app/[a-zA-Z0-9-]{1,32}/[0-9a-f]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:loadbalancer/app/my-load-balancer/50dc6c495c0c9188"
        },
        {
          "description": "invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:loadbalancer/app/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        },
        {
          "description": "invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:loadbalancer/app/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        },
        {
          "description": "invalid - load balancer id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:loadbalancer/app/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        }
      ]
    },
    "loadbalancerId": {
      "type": "string",
      "pattern": "^[0-9a-z]{16}$",
      "tests": [
        {
          "input": "50dc6c495c0c9188"
        },
        {
          "description": "Invalid - No special character allowed",
          "input": "50dc6c495c0c918_",
          "expected": false
        },
        {
          "description": "Invalid - Id is too long",
          "input": "jhsdkhfe386842kdkey24823990fkdjnj439u7r3",
          "expected": false
        }
      ]
    },
    "applicationListenerArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:listener/app/[a-zA-Z0-9-]{1,32}/[0-9a-f]{16}/[0-9a-f]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2"
        },
        {
          "description": "invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2",
          "expected": false
        },
        {
          "description": "invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2",
          "expected": false
        },
        {
          "description": "invalid - load balancer id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522",
          "expected": false
        }
      ]
    },
    "loadBalanceState": {
      "type": "object",
      "properties": {
        "Code": {
          "$ref": "#/definitions/loadBalancerCode"
        }
      }
    },
    "loadBalancerCode": {
      "type": "string",
      "enum": [
        "active",
        "provisioning",
        "active_impaired",
        "failed"
      ],
      "tests": [
        {
          "input": "active"
        },
        {
          "description": "invalid - not listed in options",
          "input": "RUNNABLE",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        }
      ]
    },
    "loadBalancerAttributes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/attributes"
      },
      "properties": {
        "CrossZoneLoadBalancing": {
          "$ref": "#/definitions/crossZoneLoadBalancing"
        },
        "AccessLog": {
          "type": "object"
        },
        "ConnectionDraining": {
          "type": "object"
        },
        "ConnectionSettings": {
          "type": "object"
        },
        "AdditionalAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/additionalAttributes"
          }
        }
      }
    },
    "attributes": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "autoScalingGroup": {
      "type": "object",
      "properties": {
        "AutoScalingGroupName": {
          "$ref": "#/definitions/autoScalingGroupName"
        },
        "AutoScalingGroupARN": {
          "$ref": "#/definitions/autoScalingGroupAka"
        },
        "LaunchConfigurationName": {
          "$ref": "#/definitions/launchConfigurationName"
        },
        "LaunchTemplate": {
          "type": "object"
        },
        "MixedInstancesPolicy": {
          "type": "object"
        },
        "MinSize": {
          "type": "integer"
        },
        "MaxSize": {
          "type": "integer"
        },
        "DesiredCapacity": {
          "type": "integer"
        },
        "DefaultCooldown": {
          "type": "integer"
        },
        "AvailabilityZones": {
          "$ref": "#/definitions/availabilityZones"
        },
        "LoadBalancerNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/loadBalancerName"
          }
        },
        "TargetGroupARNs": {
          "type": "array"
        },
        "HealthCheckType": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        "HealthCheckGracePeriod": {
          "type": "integer"
        },
        "Instances": {
          "type": "array"
        },
        "CreatedTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "SuspendedProcesses": {
          "type": "array"
        },
        "PlacementGroup": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "VPCZoneIdentifier": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2047
        },
        "EnabledMetrics": {
          "type": "array"
        },
        "Status": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "TerminationPolicies": {
          "type": "array"
        },
        "NewInstancesProtectedFromScaleIn": {
          "type": "boolean"
        },
        "ServiceLinkedRoleARN": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1600
        },
        "MaxInstanceLifetime": {
          "type": "integer"
        },
        "Tags": {
          "$ref": "aws#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/autoScalingGroupAka"
              }
            },
            "title": {
              "$ref": "#/definitions/autoScalingGroupName"
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "All properties given",
          "input": {
            "AutoScalingGroupName": "test01",
            "AutoScalingGroupARN": "arn:aws:autoscaling:us-west-2:492552618977:autoScalingGroup:402b2ef5-4968-4ccb-9208-c7980983b2bc:autoScalingGroupName/test03",
            "Tags": [
              {
                "Key": "Test01",
                "Value": "Test01"
              },
              {
                "Key": "Test02",
                "Value": "Test02"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:autoscaling:us-west-2:492552618977:autoScalingGroup:402b2ef5-4968-4ccb-9208-c7980983b2bc:autoScalingGroupName/test03"
              ],
              "title": "test01",
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1",
                  "partition": "aws"
                }
              }
            }
          }
        }
      ]
    },
    "autoScalingGroupAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:autoscaling:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:autoScalingGroup:[0-9a-z]{8}-[0-9]{4}-[0-9a-z]{4}-[0-9]{4}-[a-z0-9]{12}:autoScalingGroupName/(.{1,255})$",
      "tests": [
        {
          "description": "base",
          "input": "arn:aws:autoscaling:us-west-2:492552618977:autoScalingGroup:402b2ef5-4968-4ccb-9208-c7980983b2bc:autoScalingGroupName/test03"
        },
        {
          "description": "invalid service name",
          "input": "arn:aws:autoscaling:us-west-2:492552618977:iam:402b2ef5-4968-4ccb-9208-c7980983b2bc:autoScalingGroupName/test03",
          "expected": false
        },
        {
          "description": "invalid account id",
          "input": "arn:aws:autoscaling:us-west-2:49255266573818977:autoScalingGroup:402b2ef5-4968-4ccb-9208-c7980983b2bc:autoScalingGroupName/test03",
          "expected": false
        }
      ]
    },
    "autoScalingGroupName": {
      "type": "string",
      "pattern": "^(.{1,255})$",
      "tests": [
        {
          "input": "Test.The-Kitchen_Sink"
        },
        {
          "description": "invalid - too long",
          "input": "a1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
          "expected": false
        },
        {
          "description": "invalid - line termination is not allowed in regex",
          "input": "\n",
          "expected": false
        }
      ]
    },
    "classicLoadBalancer": {
      "type": "object",
      "properties": {
        "AvailabilityZones": {
          "$ref": "#/definitions/availabilityZones"
        },
        "CanonicalHostedZoneId": {
          "$ref": "#/definitions/canonicalHostedZoneId"
        },
        "CanonicalHostedZoneName": {
          "$ref": "#/definitions/canonicalHostedZoneName"
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "DNSName": {
          "$ref": "#/definitions/dnsName"
        },
        "IpAddressType": {
          "$ref": "#/definitions/ipAddressType"
        },
        "LoadBalancerArn": {
          "$ref": "#/definitions/classicLoadBalancingArn"
        },
        "LoadBalancerName": {
          "$ref": "#/definitions/loadBalancerName"
        },
        "CreatedTime": {
          "$ref": "#/definitions/createdTime"
        },
        "Scheme": {
          "$ref": "#/definitions/scheme"
        },
        "SecurityGroups": {
          "$ref": "#/definitions/securityGroups"
        },
        "Subnets": {
          "$ref": "#/definitions/subnets"
        },
        "Type": {
          "$ref": "#/definitions/type"
        },
        "ListenerDescriptions": {
          "$ref": "#/definitions/listenerDescriptions"
        },
        "Policies": {
          "$ref": "#/definitions/policies"
        },
        "BackendServerDescriptions": {
          "$ref": "#/definitions/backendServerDescriptions"
        },
        "Instances": {
          "type": "object"
        },
        "HealthCheck": {
          "$ref": "#/definitions/healthCheck"
        },
        "SourceSecurityGroup": {
          "$ref": "#/definitions/sourceSecurityGroup"
        },
        "Tags": {
          "$ref": "aws#/definitions/tagList"
        },
        "LoadBalancerAttributes": {
          "$ref": "#/definitions/loadBalancerAttributes"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/classicLoadBalancingArn"
              }
            },
            "title": {
              "$ref": "#/definitions/loadBalancerName"
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "tests": [
        {
          "description": "all properties given",
          "input": {
            "turbot": {
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/my-load-balancer"
              ],
              "title": "my-load-balancer",
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1",
                  "partition": "aws"
                }
              }
            },
            "LoadBalancerName": "foo",
            "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/my-load-balancer",
            "CanonicalHostedZoneId": "Z3DZXE0EXAMPLE",
            "CanonicalHostedZoneName": "my-load-balancer-1234567890.us-west-2.elb.amazonaws.com",
            "VpcId": "vpc-3ac0fb5f",
            "ListenerDescriptions": [
              {
                "Listener": {
                  "InstancePort": 80,
                  "LoadBalancerPort": 80,
                  "Protocol": "HTTP",
                  "InstanceProtocol": "HTTP"
                },
                "PolicyNames": [
                  "hi",
                  "hello"
                ]
              }
            ],
            "DNSName": "my-load-balancer-1234567890.us-west-2.elb.amazonaws.com",
            "SecurityGroups": [
              "sg-a61988c3"
            ],
            "CreatedTime": "2015-03-19T03:24:02.650Z",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "AvailabilityZones": [
              {
                "ZoneName": "us-west-2a"
              }
            ]
          }
        }
      ]
    },
    "classicLoadBalancingArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:loadbalancer/[a-zA-Z0-9](?:[-a-zA-Z0-9]{0,30}[a-zA-Z0-9])?$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/my-load-balancer"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:loadbalancer/my-load-balancer"
        },
        {
          "description": "invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:loadbalancer/my-load-balancer",
          "expected": false
        },
        {
          "description": "invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:loadbalancer/my-load-balancer",
          "expected": false
        },
        {
          "description": "invalid - load balancer id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:loadbalancer/my-load-balancer",
          "expected": false
        }
      ]
    },
    "subnets": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/subnet"
      },
      "tests": [
        {
          "input": [
            "subnet-15aaab61",
            "subnet-15aaab61"
          ]
        }
      ]
    },
    "listenerDescriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/listenerDescription"
      },
      "tests": [
        {
          "description": "base case",
          "input": [
            {
              "Listener": {
                "InstancePort": 80,
                "LoadBalancerPort": 80,
                "Protocol": "HTTP",
                "InstanceProtocol": "HTTP"
              },
              "PolicyNames": [
                "hi",
                "hello"
              ]
            },
            {
              "Listener": {
                "InstancePort": 443,
                "LoadBalancerPort": 443,
                "Protocol": "HTTPS",
                "InstanceProtocol": "HTTPS"
              },
              "PolicyNames": [
                "SSL",
                "SecurePolicy"
              ]
            }
          ]
        }
      ]
    },
    "listenerDescription": {
      "type": "object",
      "properties": {
        "Listener": {
          "$ref": "#/definitions/listener"
        },
        "PolicyNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyName"
          }
        }
      },
      "tests": [
        {
          "input": {
            "Listener": {
              "InstancePort": 80,
              "LoadBalancerPort": 80,
              "Protocol": "HTTP",
              "InstanceProtocol": "HTTP"
            },
            "PolicyNames": [
              "hi",
              "hello"
            ]
          }
        }
      ]
    },
    "policies": {
      "type": "object",
      "properties": {
        "AppCookieStickinessPolicies": {
          "$ref": "#/definitions/appCookieStickinessPolicies"
        },
        "LBCookieStickinessPolicies": {
          "$ref": "#/definitions/lBCookieStickinessPolicies"
        },
        "OtherPolicies": {
          "$ref": "#/definitions/policyNames"
        }
      }
    },
    "appCookieStickinessPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/appCookieStickinessPolicy"
      }
    },
    "appCookieStickinessPolicy": {
      "type": "object",
      "properties": {
        "PolicyName": {
          "type": "string"
        },
        "CookieName": {
          "type": "string"
        }
      }
    },
    "lBCookieStickinessPolicies": {
      "type": "object",
      "properties": {
        "PolicyName": {
          "type": "string"
        },
        "CookieExpirationPeriod": {
          "type": "integer"
        }
      }
    },
    "policyNames": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/policyName"
      }
    },
    "backendServerDescriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/backendServerDescription"
      }
    },
    "backendServerDescription": {
      "type": "object",
      "properties": {
        "InstancePort": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535
        },
        "PolicyNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyName"
          }
        }
      }
    },
    "healthCheck": {
      "type": "object",
      "properties": {
        "Target": {
          "type": "string"
        },
        "Interval": {
          "type": "integer",
          "minimum": 5,
          "maximum": 300
        },
        "Timeout": {
          "type": "integer",
          "minimum": 2,
          "maximum": 60
        },
        "UnhealthyThreshold": {
          "type": "integer",
          "minimum": 2,
          "maximum": 10
        },
        "HealthyThreshold": {
          "type": "integer",
          "minimum": 2,
          "maximum": 10
        }
      }
    },
    "sourceSecurityGroup": {
      "type": "object",
      "properties": {
        "OwnerAlias": {
          "type": "string"
        },
        "GroupName": {
          "type": "string"
        }
      }
    },
    "crossZoneLoadBalancing": {
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean"
        }
      }
    },
    "additionalAttributes": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "ec2": {
      "allOf": [
        {
          "$ref": "turbot#/definitions/service"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "const": "EC2"
            },
            "turbot": {
              "type": "object",
              "properties": {
                "akas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ec2Aka"
                  }
                },
                "title": {
                  "const": "EC2"
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "aws#/definitions/awsMetadata"
                    }
                  }
                }
              }
            }
          },
          "additionalProperties": true,
          "tests": [
            {
              "description": "EC2",
              "input": {
                "name": "EC2",
                "turbot": {
                  "akas": [
                    "arn:aws:ec2:us-east-1:123456789012"
                  ],
                  "title": "EC2",
                  "custom": {
                    "aws": {
                      "accountId": 123456789012,
                      "regionName": "us-east-1"
                    }
                  }
                }
              }
            },
            {
              "description": "Invalid - elasticcomputecloud",
              "input": {
                "name": "elasticcomputecloud",
                "turbot": null,
                "akas": [
                  "arn:aws:ec2:us-east-1:123456789012"
                ],
                "title": "EC2",
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1"
                  }
                }
              },
              "expected": false
            },
            {
              "description": "Invalid - Service name missing",
              "input": {
                "turbot": null,
                "akas": [
                  "arn:aws:ec2:us-east-1:123456789012"
                ],
                "title": "EC2",
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1"
                  }
                }
              },
              "expected": false
            }
          ]
        }
      ]
    },
    "ec2Aka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}$",
      "tests": [
        {
          "description": "base",
          "input": "arn:aws:ec2:us-east-1:123123123123"
        },
        {
          "description": "base",
          "input": "arn:aws-us-gov:ec2:us-gov-east-1:123123123123"
        },
        {
          "description": "invalid service name",
          "input": "arn:aws:xyz:us-east-1:123123123123",
          "expected": false
        },
        {
          "description": "invalid account id",
          "input": "arn:aws:ec2:us-east-1:123382743123123123",
          "expected": false
        },
        {
          "description": "invalid region name",
          "input": "arn:aws:ec2:us-eastdk-74381:123123123123",
          "expected": false
        }
      ]
    },
    "regionName": {
      "type": "string",
      "enum": [
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ap-south-1",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "cn-north-1",
        "cn-northwest-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "sa-east-1",
        "us-east-1",
        "us-east-2",
        "us-gov-west-1",
        "us-west-1",
        "us-west-2"
      ],
      "tests": [
        {
          "input": "us-east-1"
        },
        {
          "description": "invalid - usea1",
          "input": "usea1",
          "expected": false
        },
        {
          "description": "invalid - au-north-1",
          "input": "au-north-1",
          "expected": false
        }
      ]
    },
    "ec2SupportedRegions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/regionName"
      },
      "minItems": 1,
      "example": [
        [
          "us-east-2",
          "us-east-1"
        ]
      ],
      "default": [
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ap-south-1",
        "ap-southeast-1",
        "ap-southeast-2",
        "ca-central-1",
        "cn-north-1",
        "cn-northwest-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "sa-east-1",
        "us-east-1",
        "us-east-2",
        "us-gov-west-1",
        "us-west-1",
        "us-west-2"
      ],
      "tests": [
        {
          "description": "one region",
          "input": [
            "us-east-1"
          ]
        },
        {
          "description": "all supported regions",
          "input": [
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ca-central-1",
            "cn-north-1",
            "cn-northwest-1",
            "eu-central-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "sa-east-1",
            "us-east-1",
            "us-east-2",
            "us-gov-west-1",
            "us-west-1",
            "us-west-2"
          ]
        },
        {
          "description": "invalid - no regions",
          "input": [],
          "expected": false
        }
      ]
    },
    "protocol": {
      "type": "string",
      "enum": [
        "HTTP",
        "HTTPS",
        "TCP"
      ],
      "tests": [
        {
          "input": "HTTP"
        },
        {
          "input": "TCP"
        },
        {
          "description": "invalid - lowercase value",
          "input": "tcp",
          "expected": false
        },
        {
          "description": "invalid - not listed in the options",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "port": {
      "type": "integer",
      "minimum": 1,
      "maximum": 65535,
      "tests": [
        {
          "input": 9999
        },
        {
          "input": 11111
        },
        {
          "description": "minimum",
          "input": 1
        },
        {
          "description": "maximum",
          "input": 65535
        },
        {
          "description": "invalid - decimal value provided",
          "input": 4.5,
          "expected": false
        },
        {
          "description": "invalid - string type provided",
          "input": "three",
          "expected": false
        },
        {
          "description": "invalid - less than minimum",
          "input": 0,
          "expected": false
        },
        {
          "description": "invalid - greater than maximum",
          "input": 65536,
          "expected": false
        }
      ]
    },
    "vpcId": {
      "type": "string",
      "pattern": "^vpc-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "vpc-11111111"
        },
        {
          "input": "vpc-aaaaaaaa"
        },
        {
          "input": "vpc-a2345678"
        },
        {
          "input": "vpc-a2345678901234567"
        },
        {
          "description": "fixed length",
          "input": "vpc-a2345678901234567"
        },
        {
          "input": "invalid - foo$bar",
          "expected": false
        },
        {
          "description": "invalid - must be lowercase",
          "input": "vpc-ABCD1234",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "vpc-a23456789012345678",
          "expected": false
        },
        {
          "description": "invalid - too short",
          "input": "vpc-a234567890123456",
          "expected": false
        },
        {
          "description": "invalid - non hex",
          "input": "vpc-aaaaaaaaaaaaaaaaz",
          "expected": false
        }
      ]
    },
    "availabilityZones": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/availabilityZone"
      }
    },
    "availabilityZone": {
      "type": "object",
      "properties": {
        "ZoneName": {
          "type": "string"
        },
        "SubnetId": {
          "type": "string"
        },
        "LoadBalancerAddresses": {
          "type": "array"
        }
      }
    },
    "canonicalHostedZoneId": {
      "type": "string",
      "maxLength": 32,
      "tests": [
        {
          "input": "hello@hi.com"
        },
        {
          "input": "foo@123"
        },
        {
          "input": "00123"
        },
        {
          "input": "Test.The-Kitchen_Sink"
        },
        {
          "description": "empty string",
          "input": ""
        },
        {
          "description": "max length",
          "input": "12345678901234567890123456789012"
        },
        {
          "description": "route53 example",
          "input": "Z2YQB5RD63NC85"
        },
        {
          "description": "cloudfront distribution example",
          "input": "Z2FDTNDATAQYW2"
        },
        {
          "description": "Elastic Beanstalk example",
          "input": "ZL327KTPIQFUL"
        },
        {
          "description": "ELB load balancer example",
          "input": "ZZZZZZZZZZZ123X"
        },
        {
          "description": "Amazon S3 example",
          "input": "Z2O1EMRO9K5GLX"
        },
        {
          "description": "invalid - too long",
          "input": "1234567890123456789012345678901234567890123456789012345678",
          "expected": false
        }
      ]
    },
    "canonicalHostedZoneName": {
      "type": "string",
      "maxLength": 1024,
      "tests": [
        {
          "input": "hello@hi.com"
        },
        {
          "input": "foo123"
        },
        {
          "input": "images.example.com"
        },
        {
          "input": "example-com-234567890.sa-east-1.elb.amazonaws.com"
        },
        {
          "description": "cloudfront example",
          "input": "d123rk29d0stfj.cloudfront.net"
        },
        {
          "description": "Elastic Beanstalk example",
          "input": "my-env.elasticbeanstalk.com"
        },
        {
          "description": "ELB load balancer example",
          "input": "example-com-987654321.us-west-2.elb.amazonaws.com"
        },
        {
          "description": "Amazon S3 bucket example",
          "input": "s3-website-us-east-2.amazonaws.com"
        },
        {
          "description": "empty string",
          "input": ""
        },
        {
          "description": "null value",
          "input": null
        }
      ]
    },
    "dnsName": {
      "$ref": "#/definitions/canonicalHostedZoneName"
    },
    "ipAddressType": {
      "type": "string",
      "enum": [
        "ipv4",
        "dualstack"
      ],
      "tests": [
        {
          "input": "ipv4"
        },
        {
          "input": "dualstack"
        },
        {
          "description": "invalid - uppercase value",
          "input": "IPV4",
          "expected": false
        },
        {
          "description": "invalid - not listed in the options",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "loadBalancerName": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9](?:[-a-zA-Z0-9]{0,30}[a-zA-Z0-9])?$",
      "tests": [
        {
          "input": "aaabbb111"
        },
        {
          "input": "aaaaaabbbbbb"
        },
        {
          "input": "Test-MeP12lease"
        },
        {
          "description": "max length",
          "input": "12345678123456781234567812345678"
        },
        {
          "description": "route53 example",
          "input": "Z2YQB5RD63NC85"
        },
        {
          "description": "cloudfront distribution example",
          "input": "Z2FDTNDATAQYW2"
        },
        {
          "description": "invalid char",
          "input": "Test.please",
          "expected": false
        },
        {
          "description": "cannot start with hyphens",
          "input": "-aaaaaa-111111",
          "expected": false
        },
        {
          "description": "cannot contain underscore",
          "input": "aaaaaa_bbbbbb",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "123456781234567812345678123456781",
          "expected": false
        }
      ]
    },
    "createdTime": {
      "$ref": "turbot#/definitions/isoTimestamp"
    },
    "scheme": {
      "type": "string",
      "enum": [
        "internet-facing",
        "internal"
      ],
      "tests": [
        {
          "input": "internal"
        },
        {
          "input": "internet-facing"
        },
        {
          "description": "invalid - uppercase value",
          "input": "INTERNAL",
          "expected": false
        },
        {
          "description": "invalid - not listed in the options",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "securityGroups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/securityGroup"
      },
      "tests": [
        {
          "input": [
            "sg-a61988c3"
          ]
        },
        {
          "description": "invalid - string passed",
          "input": "test",
          "expected": false
        }
      ]
    },
    "type": {
      "type": "string",
      "enum": [
        "application",
        "network"
      ],
      "tests": [
        {
          "input": "network"
        },
        {
          "input": "application"
        },
        {
          "description": "invalid - uppercase value",
          "input": "NETWORK",
          "expected": false
        },
        {
          "description": "invalid - not listed in the options",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "sslPolicy": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9-]+$",
      "tests": [
        {
          "input": "ELBSecurityPolicy-2015-05"
        },
        {
          "description": "invalid - at symbol is not in pattern",
          "input": "301@",
          "expected": false
        }
      ]
    },
    "subnet": {
      "type": "string",
      "pattern": "^subnet-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "subnet-15aaab61"
        },
        {
          "input": "subnet-aaaaaaaa"
        },
        {
          "description": "invalid - non hex",
          "input": "subnet-aaaaaaaaaaaaaaaaz",
          "expected": false
        },
        {
          "description": "invalid - too short",
          "input": "subnet-a234567890123456",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "subnet-a23456789012345678",
          "expected": false
        },
        {
          "description": "invalid - must be lowercase",
          "input": "subnet-ABCD1234",
          "expected": false
        }
      ]
    },
    "zoneName": {
      "type": "string",
      "pattern": "^[a-z]{2}(-gov)?-[a-z]+-[0-9a-z]{2}$",
      "tests": [
        {
          "input": "us-east-1a"
        },
        {
          "input": "us-gov-west-1a"
        },
        {
          "description": "invalid - uppercase value",
          "input": "US-EAST-1A",
          "expected": false
        },
        {
          "description": "invalid - region",
          "input": "usa-east-1a",
          "expected": false
        }
      ]
    },
    "allocationId": {
      "type": "string",
      "tests": [
        {
          "input": "foo"
        },
        {
          "input": "usasdss"
        },
        {
          "description": "invalid - passed array instead of string",
          "input": [
            "foo"
          ],
          "expected": false
        }
      ]
    },
    "ipAddress": {
      "type": "string",
      "pattern": "^[0-5]{1,3}\\.[0-5]{1,3}\\.[0-5]{1,3}\\.[0-5]{1,3}$",
      "tests": [
        {
          "input": "0.0.0.0"
        },
        {
          "input": "255.255.255.255"
        },
        {
          "description": "invalid - ip address",
          "input": "298.1.1.1",
          "expected": false
        },
        {
          "description": "invalid - region",
          "input": "1.1.1",
          "expected": false
        }
      ]
    },
    "loadBalancerAddress": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/allocationId"
        },
        {
          "$ref": "#/definitions/ipAddress"
        }
      ],
      "tests": [
        {
          "input": [
            "1.1.1.1"
          ]
        },
        {
          "description": "invalid - not array",
          "input": "1.1.1",
          "expected": false
        }
      ]
    },
    "securityGroup": {
      "type": "string",
      "pattern": "^sg-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "sg-a61988c3"
        },
        {
          "input": "sg-a1199fd4"
        },
        {
          "description": "invalid - uppercase value",
          "input": "sg-A1199FD4",
          "expected": false
        },
        {
          "description": "invalid - missing sg",
          "input": "a1199fd4",
          "expected": false
        }
      ]
    },
    "code": {
      "type": "string",
      "enum": [
        "active",
        "provisioning",
        "active_impaired",
        "failed"
      ],
      "tests": [
        {
          "input": "active"
        },
        {
          "input": "provisioning"
        },
        {
          "description": "invalid - uppercase value",
          "input": "ACTIVE",
          "expected": false
        },
        {
          "description": "invalid - not listed in the options",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "reason": {
      "type": "string",
      "tests": [
        {
          "input": "hgvhjvjg"
        }
      ]
    },
    "state": {
      "type": "object",
      "properties": {
        "Code": {
          "$ref": "#/definitions/code"
        },
        "Reason": {
          "$ref": "#/definitions/reason"
        }
      },
      "tests": [
        {
          "description": "all properties given",
          "input": {
            "Code": "active",
            "Reason": "adfgggh"
          }
        },
        {
          "description": "one property given",
          "input": {
            "Code": "active"
          }
        }
      ]
    },
    "certificateArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:iam::[0-9]{12}:server-certificate/[a-zA-Z0-9-]+$",
      "tests": [
        {
          "input": "arn:aws:iam::123456789012:server-certificate/my-server-cert"
        },
        {
          "input": "arn:aws:iam::123456789012:server-certificate/myservercert1"
        },
        {
          "description": "invalid - region",
          "input": "arn:aws:iam:us-east-1:123456789012:server-certificate/myservercert1",
          "expected": false
        },
        {
          "description": "invalid - missing account id",
          "input": "arn:aws:iam:::server-certificate/myservercert1",
          "expected": false
        }
      ]
    },
    "isDefault": {
      "type": "boolean",
      "tests": [
        {
          "input": false
        },
        {
          "input": true
        },
        {
          "description": "invalid - array",
          "input": [],
          "expected": false
        },
        {
          "description": "invalid - string",
          "input": "",
          "expected": false
        }
      ]
    },
    "policyName": {
      "type": "string",
      "pattern": "^[0-9a-zA-Z-]+$",
      "tests": [
        {
          "input": "ELBSecurityPolicy-2015-03"
        },
        {
          "description": "invalid - character not in pattern",
          "input": "55!%",
          "expected": false
        }
      ]
    },
    "listener": {
      "type": "object",
      "properties": {
        "InstancePort": {
          "$ref": "#/definitions/port"
        },
        "LoadBalancerPort": {
          "$ref": "#/definitions/port"
        },
        "Protocol": {
          "$ref": "#/definitions/protocol"
        },
        "InstanceProtocol": {
          "$ref": "#/definitions/protocol"
        },
        "SSLCertificateId": {
          "$ref": "#/definitions/certificateArn"
        }
      },
      "tests": [
        {
          "description": "all properties given",
          "input": {
            "InstancePort": 80,
            "LoadBalancerPort": 80,
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        },
        {
          "description": "all properties given",
          "input": {
            "InstancePort": 443,
            "LoadBalancerPort": 443,
            "Protocol": "HTTPS",
            "InstanceProtocol": "HTTPS",
            "SSLCertificateId": "arn:aws:iam::123456789012:server-certificate/my-server-cert"
          }
        }
      ]
    },
    "tagString": {
      "type": "string",
      "pattern": "^.*$",
      "tests": [
        {
          "input": "küßî"
        },
        {
          "input": "Peter Dinklage as Tyrion Lannister"
        },
        {
          "input": "Filip Lozić as Young Nobleman"
        },
        {
          "input": "Abc123 !@#$%^&*()_+"
        },
        {
          "input": "{ start: \"something\", stop: \"something else\" }"
        }
      ]
    },
    "tagKey": {
      "allOf": [
        {
          "$ref": "#/definitions/tagString"
        },
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 127
        }
      ],
      "tests": [
        {
          "description": "valid - min length",
          "input": "a"
        },
        {
          "description": "valid - max length",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345678",
          "expected": false
        }
      ]
    },
    "tagValue": {
      "allOf": [
        {
          "$ref": "#/definitions/tagString"
        },
        {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        }
      ],
      "tests": [
        {
          "description": "valid - empty string",
          "input": ""
        },
        {
          "description": "valid - max length",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345"
        },
        {
          "description": "invalid - too long",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456",
          "expected": false
        }
      ]
    },
    "tag": {
      "type": "object",
      "properties": {
        "Key": {
          "$ref": "#/definitions/tagKey"
        },
        "Value": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "Key": "foo",
            "Value": "bar"
          }
        },
        {
          "description": "invalid - empty key",
          "input": {
            "Key": "",
            "Value": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - no key",
          "input": {
            "Value": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - no value",
          "input": {
            "Key": "foo"
          },
          "expected": false
        }
      ]
    },
    "tagList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tag"
      },
      "minLength": 0,
      "tests": [
        {
          "description": "valid - empty list",
          "input": []
        },
        {
          "description": "valid - single item",
          "input": [
            {
              "Key": "foo",
              "Value": "bar"
            }
          ]
        },
        {
          "description": "valid - multiple items",
          "input": [
            {
              "Key": "one",
              "Value": 1
            },
            {
              "Key": "two",
              "Value": 2
            },
            {
              "Key": "three",
              "Value": 3
            },
            {
              "Key": "four",
              "Value": 4
            }
          ]
        },
        {
          "description": "invalid - missing value",
          "input": [
            {
              "Key": "one"
            },
            {
              "Key": "two",
              "Value": 2
            }
          ],
          "expected": false
        },
        {
          "description": "invalid - empty item",
          "input": [
            {
              "Key": "one",
              "Value": 1
            },
            null,
            {
              "Key": "two",
              "Value": 2
            }
          ],
          "expected": false
        }
      ]
    },
    "tagsMap": {
      "type": "object",
      "patternProperties": {
        "^.{1,127}$": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "additionalProperties": false,
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "foo": "bar"
          }
        },
        {
          "description": "valid - kitchen sink",
          "input": {
            "küßîAbc123!@#$": "küßîAbc123!@#$",
            "test": ""
          }
        },
        {
          "description": "valid - key min length",
          "input": {
            "a": "bar"
          }
        },
        {
          "description": "invalid - empty key",
          "input": {
            "": "bar"
          },
          "expected": false
        },
        {
          "description": "valid - key max length",
          "input": {
            "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567": "bar"
          }
        },
        {
          "description": "invalid - key too long",
          "input": {
            "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345678": "bar"
          },
          "expected": false
        },
        {
          "description": "valid - empty",
          "input": {}
        }
      ]
    },
    "tagsTemplateTag": {
      "type": "object",
      "patternProperties": {
        "^(?!aws:).{1,127}$": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false,
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "foo": "bar"
          }
        },
        {
          "description": "invalid - starts with \"aws:\"",
          "input": {
            "aws:test": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - below min properties",
          "input": {},
          "expected": false
        },
        {
          "description": "invalid - above max properties",
          "input": {
            "foo": "bar",
            "foo1": "bar1"
          },
          "expected": false
        }
      ]
    },
    "tagsTemplateTagList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tagsTemplateTag"
      },
      "minLength": 0,
      "tests": [
        {
          "description": "valid - empty list",
          "input": []
        },
        {
          "description": "valid - single item",
          "input": [
            {
              "foo": "bar"
            }
          ]
        },
        {
          "description": "valid - multiple items",
          "input": [
            {
              "foo": "bar"
            },
            {
              "foo1": "bar1"
            },
            {
              "foo2": "bar2"
            }
          ]
        },
        {
          "description": "invalid - empty item",
          "input": [
            {
              "foo": "bar"
            },
            null,
            {
              "foo2": "bar2"
            }
          ],
          "expected": false
        }
      ]
    },
    "launchTemplateId": {
      "type": "string",
      "pattern": "^lt-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "lt-0e06d290751193123"
        },
        {
          "input": "lt-11111111"
        },
        {
          "description": "invalid - must be lowercase",
          "input": "lt-ABCDEFGH",
          "expected": false
        },
        {
          "description": "invalid - should always start with lt",
          "input": "id-0e06d290751193123",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "lt-0e06d2907511931234",
          "expected": false
        }
      ]
    },
    "launchTemplateName": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9\\(\\)\\.-/_]+$",
      "minLength": 3,
      "maxLength": 128,
      "tests": [
        {
          "input": "testingtemplate2"
        },
        {
          "input": "(Launch_Temp/late.0)"
        },
        {
          "description": "invalid - too short",
          "input": "aa",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "a12345678901234567890123456789012345678901234567890123456781234567890123456789012345678901234567890123456789012345678901234567890",
          "expected": false
        }
      ]
    },
    "instance": {
      "type": "object",
      "properties": {
        "AmiLaunchIndex": {
          "type": "integer"
        },
        "ImageId": {
          "type": "string"
        },
        "InstanceId": {
          "$ref": "#/definitions/instanceId"
        },
        "InstanceType": {
          "$ref": "#/definitions/instanceType"
        },
        "EnclaveOptions": {
          "type": "object"
        },
        "KeyName": {
          "type": "string"
        },
        "LaunchTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Monitoring": {
          "$ref": "#/definitions/instanceMonitoring"
        },
        "Placement": {
          "$ref": "#/definitions/instancePlacement"
        },
        "Platform": {
          "type": "string",
          "enum": [
            "Windows"
          ]
        },
        "PrivateDnsName": {
          "type": "string"
        },
        "PrivateIpAddress": {
          "type": "string"
        },
        "ProductCodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/instanceProductCodeList"
          }
        },
        "PublicDnsName": {
          "type": "string"
        },
        "PublicIpAddress": {
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/instanceState"
        },
        "StateTransitionReason": {
          "type": "string"
        },
        "SubnetId": {
          "type": "string"
        },
        "VpcId": {
          "type": "string"
        },
        "Architecture": {
          "type": "string",
          "enum": [
            "i386",
            "x86_64",
            "arm64"
          ]
        },
        "BlockDeviceMappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/instanceBlockDeviceMapping"
          }
        },
        "ClientToken": {
          "type": "string"
        },
        "EbsOptimized": {
          "type": "boolean"
        },
        "EnaSupport": {
          "type": "boolean"
        },
        "Hypervisor": {
          "$ref": "#/definitions/instanceHypervisorType"
        },
        "IamInstanceProfile": {
          "$ref": "#/definitions/iamInstanceProfile"
        },
        "InstanceLifecycle": {
          "$ref": "#/definitions/instanceLifecycleType"
        },
        "ElasticGpuAssociations": {
          "$ref": "#/definitions/elasticGpuAssociationList"
        },
        "ElasticInferenceAcceleratorAssociations": {
          "$ref": "#/definitions/elasticInferenceAcceleratorAssociationList"
        },
        "NetworkInterfaces": {
          "$ref": "#/definitions/instanceNetworkInterfaceList"
        },
        "OutpostArn": {
          "type": "string"
        },
        "RootDeviceName": {
          "type": "string"
        },
        "RootDeviceType": {
          "$ref": "#/definitions/rootDeviceType"
        },
        "SecurityGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sgIdentifierList"
          }
        },
        "SourceDestCheck": {
          "type": "boolean"
        },
        "SpotInstanceRequestId": {
          "type": "string"
        },
        "StateReason": {
          "$ref": "#/definitions/stateReason"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "VirtualizationType": {
          "type": "string",
          "enum": [
            "hvm",
            "paravirtual"
          ]
        },
        "CpuOptions": {
          "$ref": "#/definitions/cpuOptions"
        },
        "CapacityReservationId": {
          "type": "string"
        },
        "CapacityReservationSpecification": {
          "$ref": "#/definitions/capacityReservationSpecificationResponse"
        },
        "HibernationOptions": {
          "$ref": "#/definitions/hibernationOptions"
        },
        "Licenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/licenseConfiguration"
          }
        },
        "MetadataOptions": {
          "$ref": "#/definitions/instanceMetadataOptionsResponse"
        },
        "Groups": {
          "$ref": "#/definitions/groupIdentifierList"
        },
        "DisableApiTermination": {
          "$ref": "#/definitions/attributeBooleanValue"
        },
        "InstanceInitiatedShutdownBehavior": {
          "$ref": "#/definitions/instanceAttributeValue"
        },
        "KernelId": {
          "$ref": "#/definitions/instanceAttributeValue"
        },
        "RamdiskId": {
          "$ref": "#/definitions/instanceAttributeValue"
        },
        "SriovNetSupport": {
          "$ref": "#/definitions/instanceAttributeValue"
        },
        "UserData": {
          "$ref": "#/definitions/instanceAttributeValue"
        },
        "RootDeviceEncrypted": {
          "type": "boolean"
        },
        "Attribute": {
          "$ref": "#/definitions/instanceAttribute"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/instanceAka"
              }
            },
            "tags": {
              "$ref": "#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/instanceId"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "InstanceId": "i-a2345678",
            "InstanceType": "t3.medium",
            "RootDeviceName": "/dev/xvda",
            "RootDeviceType": "ebs",
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/xvda",
                "Ebs": {
                  "AttachTime": "2018-08-16T19:43:39.000Z",
                  "DeleteOnTermination": true,
                  "Status": "attached",
                  "VolumeId": "vol-0b116439a12abc34d"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:instance/i-a2345678"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "i-a2345678",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "instanceId": {
      "type": "string",
      "pattern": "^i-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "i-a2345678"
        },
        {
          "input": "i-1234567890abcdef0"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "i-1234567890abcdefz",
          "expected": false
        },
        {
          "description": "invalid - should always start with i",
          "input": "id-b61106d4",
          "expected": false
        }
      ]
    },
    "instanceAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:instance/i-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:123456789012:instance/i-a2345678"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:123456789012:instances/i-a2345678",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:use-east-1:123456789012:instances/i-a2345678",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:1234567890123:instances/i-a2345678",
          "expected": false
        }
      ]
    },
    "instanceType": {
      "type": "string",
      "pattern": "[0-9a-z]+\\.[0-9a-z]+",
      "tests": [
        {
          "input": "t2.large"
        },
        {
          "input": "m5d.large"
        },
        {
          "description": "invalid - missing period",
          "input": "t2micro",
          "expected": false
        },
        {
          "description": "invalid - missing class",
          "input": ".small",
          "expected": false
        },
        {
          "description": "invalid - missing size",
          "input": "m5.",
          "expected": false
        }
      ]
    },
    "instanceTypeMatcher": {
      "type": "string",
      "pattern": "^[a-z0-9.?*]+$",
      "tests": [
        {
          "input": "*"
        },
        {
          "input": "t2.*"
        },
        {
          "input": "*.medium"
        },
        {
          "input": "m?.medium"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - contains hyphen",
          "input": "t2-large",
          "expected": false
        }
      ]
    },
    "instanceTypeMatcherList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/instanceTypeMatcher"
      },
      "example": [
        [
          "m1.small",
          "t?.large"
        ],
        [
          "*.large",
          "t3.*"
        ]
      ],
      "default": [
        "*"
      ],
      "tests": [
        {
          "description": "one pattern",
          "input": [
            "*.medium"
          ]
        },
        {
          "description": "two patterns",
          "input": [
            "*",
            "t2.*"
          ]
        }
      ]
    },
    "instanceTypeMatcherLockdownList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/instanceTypeMatcher"
      },
      "example": [
        [
          "m1.small",
          "t?.large"
        ],
        [
          "*.large",
          "t3.*"
        ]
      ],
      "tests": [
        {
          "description": "one pattern",
          "input": [
            "*.medium"
          ]
        },
        {
          "description": "two patterns",
          "input": [
            "*",
            "t2.*"
          ]
        }
      ]
    },
    "ebsInstanceBlockDevice": {
      "type": "object",
      "properties": {
        "AttachTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "DeleteOnTermination": {
          "type": "boolean"
        },
        "Status": {
          "$ref": "#/definitions/eniAttachmentStatus"
        },
        "VolumeId": {
          "type": "string"
        }
      }
    },
    "instanceBlockDeviceMapping": {
      "type": "object",
      "properties": {
        "DeviceName": {
          "type": "string"
        },
        "Ebs": {
          "$ref": "#/definitions/ebsInstanceBlockDevice"
        }
      }
    },
    "instanceAttribute": {
      "type": "string",
      "enum": [
        "instanceType",
        "kernel",
        "ramdisk",
        "userData",
        "disableApiTermination",
        "instanceInitiatedShutdownBehavior",
        "rootDeviceName",
        "blockDeviceMapping",
        "productCodes",
        "sourceDestCheck",
        "groupSet",
        "ebsOptimized",
        "sriovNetSupport",
        "enaSupport"
      ],
      "tests": [
        {
          "description": "valid - correct status type",
          "input": "userData"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "instanceProductCodeList": {
      "type": "object",
      "properties": {
        "ProductCodeId": {
          "type": "string"
        },
        "ProductCodeType": {
          "type": "string",
          "enum": [
            "devpay",
            "marketplace"
          ]
        }
      }
    },
    "instanceHypervisorType": {
      "type": "string",
      "enum": [
        "ovm",
        "xen"
      ]
    },
    "iamInstanceProfile": {
      "type": "object",
      "properties": {
        "Arn": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "instanceLifecycleType": {
      "type": "string",
      "enum": [
        "spot",
        "scheduled"
      ]
    },
    "elasticGpuAssociationList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/elasticGpuAssociation"
      }
    },
    "elasticGpuAssociation": {
      "type": "object",
      "properties": {
        "ElasticGpuId": {
          "type": "string"
        },
        "ElasticGpuAssociationId": {
          "type": "string"
        },
        "ElasticGpuAssociationState": {
          "type": "string"
        },
        "ElasticGpuAssociationTime": {
          "type": "string"
        }
      }
    },
    "elasticInferenceAcceleratorAssociationList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/elasticInferenceAcceleratorAssociation"
      }
    },
    "elasticInferenceAcceleratorAssociation": {
      "type": "object",
      "properties": {
        "ElasticInferenceAcceleratorArn": {
          "type": "string"
        },
        "ElasticInferenceAcceleratorAssociationId": {
          "type": "string"
        },
        "ElasticInferenceAcceleratorAssociationState": {
          "type": "string"
        },
        "ElasticInferenceAcceleratorAssociationTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        }
      }
    },
    "instanceNetworkInterfaceList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/instanceNetworkInterface"
      }
    },
    "instanceNetworkInterface": {
      "type": "object",
      "properties": {
        "Association": {
          "$ref": "#/definitions/instanceNetworkInterfaceAssociation"
        },
        "Attachment": {
          "$ref": "#/definitions/instanceNetworkInterfaceAttachment"
        },
        "Description": {
          "type": "string"
        },
        "Groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/groupIdentifier"
          }
        },
        "Ipv6Addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/instanceIpv6Address"
          }
        },
        "MacAddress": {
          "type": "string"
        },
        "NetworkInterfaceId": {
          "type": "string"
        },
        "OwnerId": {
          "type": "string"
        },
        "PrivateDnsName": {
          "type": "string"
        },
        "PrivateIpAddress": {
          "type": "string"
        },
        "PrivateIpAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/instancePrivateIpAddress"
          }
        },
        "SourceDestCheck": {
          "type": "boolean"
        },
        "Status": {
          "$ref": "#/definitions/instanceNetworkInterfaceStatus"
        },
        "SubnetId": {
          "type": "string"
        },
        "VpcId": {
          "type": "string"
        },
        "InterfaceType": {
          "type": "string"
        }
      }
    },
    "instanceNetworkInterfaceAssociation": {
      "type": "object",
      "properties": {
        "IpOwnerId": {
          "type": "string"
        },
        "PublicDnsName": {
          "type": "string"
        },
        "PublicIp": {
          "type": "string"
        }
      }
    },
    "instanceNetworkInterfaceAttachment": {
      "type": "object",
      "properties": {
        "AttachTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "AttachmentId": {
          "type": "string"
        },
        "DeleteOnTermination": {
          "type": "boolean"
        },
        "DeviceIndex": {
          "type": "integer"
        },
        "Status": {
          "$ref": "#/definitions/eniAttachmentStatus"
        }
      }
    },
    "eniAttachmentStatus": {
      "type": "string",
      "enum": [
        "attaching",
        "attached",
        "detaching",
        "detached"
      ]
    },
    "groupIdentifier": {
      "type": "object",
      "properties": {
        "GroupName": {
          "type": "string"
        },
        "GroupId": {
          "type": "string"
        }
      }
    },
    "instanceIpv6Address": {
      "type": "object",
      "properties": {
        "Ipv6Address": {
          "type": "string"
        }
      }
    },
    "instancePrivateIpAddress": {
      "type": "object",
      "properties": {
        "Association": {
          "$ref": "#/definitions/instanceNetworkInterfaceAssociation"
        },
        "Primary": {
          "type": "boolean"
        },
        "PrivateDnsName": {
          "type": "string"
        },
        "PrivateIpAddress": {
          "type": "string"
        }
      }
    },
    "instanceNetworkInterfaceStatus": {
      "type": "string",
      "enum": [
        "available",
        "associated",
        "attaching",
        "in-use",
        "detaching"
      ]
    },
    "InstanceNetworkInterfaceAssociation": {
      "type": "object",
      "properties": {
        "IpOwnerId": {
          "type": "string"
        },
        "PublicDnsName": {
          "type": "string"
        },
        "PublicIp": {
          "type": "string"
        }
      }
    },
    "rootDeviceType": {
      "type": "string",
      "enum": [
        "ebs",
        "instance-store"
      ]
    },
    "sgIdentifierList": {
      "type": "object",
      "properties": {
        "GroupName": {
          "type": "string"
        },
        "GroupId": {
          "type": "string"
        }
      }
    },
    "stateReason": {
      "type": "object",
      "properties": {
        "Code": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "cpuOptions": {
      "type": "object",
      "properties": {
        "CoreCount": {
          "type": "integer"
        },
        "ThreadsPerCore": {
          "type": "integer"
        }
      }
    },
    "instanceState": {
      "type": "object",
      "properties": {
        "Code": {
          "type": "integer"
        },
        "Name": {
          "type": "string",
          "enum": [
            "pending",
            "running",
            "shutting-down",
            "terminated",
            "stopping",
            "stopped"
          ]
        }
      }
    },
    "capacityReservationSpecificationResponse": {
      "type": "object",
      "properties": {
        "CapacityReservationPreference": {
          "type": "string",
          "enum": [
            "open",
            "none"
          ]
        },
        "CapacityReservationTarget": {
          "type": "object",
          "properties": {
            "CapacityReservationId": {
              "type": "string"
            }
          }
        }
      }
    },
    "hibernationOptions": {
      "type": "object",
      "properties": {
        "Configured": {
          "type": "boolean"
        }
      }
    },
    "instanceMonitoring": {
      "type": "object",
      "properties": {
        "State": {
          "type": "string",
          "enum": [
            "disabled",
            "disabling",
            "enabled",
            "pending"
          ]
        }
      }
    },
    "instancePlacement": {
      "type": "object",
      "properties": {
        "AvailabilityZone": {
          "type": "string"
        },
        "Affinity": {
          "type": "string"
        },
        "GroupName": {
          "type": "string"
        },
        "PartitionNumber": {
          "type": "integer"
        },
        "HostId": {
          "type": "string"
        },
        "Tenancy": {
          "type": "string",
          "enum": [
            "default",
            "dedicated",
            "host"
          ]
        }
      }
    },
    "licenseConfiguration": {
      "type": "object",
      "properties": {
        "LicenseConfigurationArn": {
          "type": "string"
        }
      }
    },
    "instanceMetadataOptionsResponse": {
      "type": "object",
      "properties": {
        "State": {
          "$ref": "#/definitions/instanceMetadataOptionsState"
        },
        "HttpTokens": {
          "$ref": "#/definitions/httpTokensState"
        },
        "HttpPutResponseHopLimit": {
          "type": "integer"
        },
        "HttpEndpoint": {
          "$ref": "#/definitions/instanceMetadataEndpointState"
        }
      }
    },
    "instanceMetadataOptionsState": {
      "type": "string",
      "enum": [
        "pending",
        "applied"
      ]
    },
    "httpTokensState": {
      "type": "string",
      "enum": [
        "optional",
        "required"
      ]
    },
    "instanceMetadataEndpointState": {
      "type": "string",
      "enum": [
        "disabled",
        "enabled"
      ]
    },
    "groupIdentifierList": {
      "type": "array",
      "properties": {
        "GroupName": {
          "type": "string"
        },
        "GroupId": {
          "type": "string"
        }
      },
      "items": {
        "$ref": "#/definitions/groupIdentifier"
      }
    },
    "attributeBooleanValue": {
      "type": "object",
      "properties": {
        "Value": {
          "type": "boolean"
        }
      }
    },
    "instanceAttributeValue": {
      "type": "object",
      "properties": {
        "Value": {
          "type": "string"
        }
      }
    },
    "keyPair": {
      "type": "object",
      "properties": {
        "KeyName": {
          "$ref": "#/definitions/keyName"
        },
        "KeyPairId": {
          "type": "string"
        },
        "KeyFingerprint": {
          "type": "string"
        },
        "Tags": {
          "type": "array"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/keyAka"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/keyName"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "KeyName": "tesitng-keypair",
            "turbot": {
              "title": "test01",
              "aws": {
                "AccountId": 123456789012,
                "RegionName": "us-east-1"
              }
            },
            "title": "testing"
          }
        },
        {
          "description": "additional property provided",
          "input": {
            "KeyName": "tesitng-keypair",
            "Name": "test",
            "turbot": {
              "title": "test01",
              "aws": {
                "AccountId": 123456789012,
                "RegionName": "us-east-1"
              }
            }
          }
        },
        {
          "description": "invalid - missing key name",
          "input": {
            "turbot": {
              "title": "test01",
              "aws": {
                "AccountId": 123456789012,
                "RegionName": "us-east-1"
              }
            }
          }
        }
      ]
    },
    "keyName": {
      "type": "string",
      "tests": [
        {
          "input": "key-ec2"
        },
        {
          "input": "aaaaaabbbbbb"
        },
        {
          "input": "Test-MeP12lease"
        },
        {
          "input": "MyKEYEC2"
        }
      ]
    },
    "keyAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key-pair/[a-zA-Z0-9_-]{1,128}$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:123456789012:key-pair/masterkey"
        },
        {
          "description": "Valid - Base case using KeyPairId",
          "input": "arn:aws:ec2:us-east-1:123456789012:key-pair/key-022ad73cb3dface07"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:123456789012:volumes/i-a2345678",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:use-east-1:123456789012:volume/vol-1234567890abcdef0",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:1234567890123:volume/vol-1234567890abcdef0",
          "expected": false
        }
      ]
    },
    "launchConfiguration": {
      "type": "object",
      "properties": {
        "LaunchConfigurationName": {
          "$ref": "#/definitions/launchConfigurationName"
        },
        "LaunchConfigurationARN": {
          "$ref": "#/definitions/launchConfigurationAka"
        },
        "ImageId": {
          "$ref": "#/definitions/imageId"
        },
        "KeyName": {
          "$ref": "#/definitions/keyName"
        },
        "SecurityGroups": {
          "type": "array"
        },
        "ClassicLinkVPCId": {
          "type": "string"
        },
        "ClassicLinkVPCSecurityGroups": {
          "type": "array"
        },
        "UserData": {
          "type": "string"
        },
        "InstanceType": {
          "$ref": "#/definitions/instanceType"
        },
        "BlockDeviceMappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/instanceBlockDeviceMapping"
          }
        },
        "KernelId": {
          "type": "string"
        },
        "RamdiskId": {
          "type": "string"
        },
        "CreatedTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "EbsOptimized": {
          "type": "boolean"
        },
        "AssociatePublicIpAddress": {
          "type": "boolean"
        },
        "InstanceMonitoring": {
          "type": "object"
        },
        "SpotPrice": {
          "type": "string"
        },
        "IamInstanceProfile": {
          "type": "string"
        },
        "PlacementTenancy": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/launchConfigurationAka"
              }
            },
            "title": {
              "$ref": "#/definitions/launchConfigurationName"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "LaunchConfigurationName": "test01",
            "turbot": {
              "akas": [
                "arn:aws:autoscaling:us-west-2:492552618977:launchConfiguration:55770a63-460c-4459-a94c-f3d7c770a40b:launchConfigurationName/test01"
              ],
              "title": "test01",
              "custom": {
                "aws": {
                  "accountId": 492552618977,
                  "regionName": "us-west-2",
                  "partition": "aws"
                }
              }
            }
          }
        }
      ]
    },
    "launchConfigurationName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 1600,
      "tests": [
        {
          "input": "test01"
        },
        {
          "description": "Invalid - Should not be empty",
          "input": "",
          "expected": false
        },
        {
          "description": "Invalid - Name cannot be an array",
          "input": [
            "test01"
          ],
          "expected": false
        }
      ]
    },
    "launchConfigurationAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:autoscaling:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:launchConfiguration:[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}:launchConfigurationName/.{1,1600}$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:autoscaling:us-west-2:492552618977:launchConfiguration:55770a63-460c-4459-a94c-f3d7c770a40b:launchConfigurationName/test01"
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:autoscaling:us76-wessasat-098782:492552618977:launchConfiguration:55770a63-460c-4459-a94c-f3d7c770a40b:launchConfigurationName/test01",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:autoscaling:us-west-2:492552611231343128977:launchConfiguration:55770a63-460c-4459-a94c-f3d7c770a40b:launchConfigurationName/test01",
          "expected": false
        }
      ]
    },
    "launchTemplate": {
      "type": "object",
      "properties": {
        "LaunchTemplateId": {
          "$ref": "#/definitions/launchTemplateId"
        },
        "LaunchTemplateName": {
          "$ref": "#/definitions/launchTemplateName"
        },
        "CreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "CreatedBy": {
          "type": "string"
        },
        "DefaultVersionNumber": {
          "type": "integer"
        },
        "LatestVersionNumber": {
          "type": "integer"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/launchTemplateAka"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/launchTemplateName"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:launch-template/lt-0c45b5e061ec98456"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "DBServersTemplate",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            },
            "LaunchTemplateId": "lt-0c45b5e061ec98456",
            "LaunchTemplateName": "DBServersTemplate",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ]
          }
        }
      ]
    },
    "launchTemplateAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:launch-template/lt-[0-9a-z]{17}$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:123456789012:launch-template/lt-0c45b5e061ec98456"
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:uasds-e1323sadcast-1:123456789012:launch-template/lt-0c45b5e061ec98456",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:123456asd123123789012:launch-template/lt-0c45b5e061ec98456",
          "expected": false
        }
      ]
    },
    "launchTemplateVersion": {
      "type": "object",
      "properties": {
        "LaunchTemplateId": {
          "$ref": "#/definitions/launchTemplateId"
        },
        "LaunchTemplateName": {
          "$ref": "#/definitions/launchTemplateName"
        },
        "VersionNumber": {
          "$ref": "#/definitions/versionNumber"
        },
        "VersionDescription": {
          "type": "string",
          "maxLength": 255
        },
        "CreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "CreatedBy": {
          "type": "string"
        },
        "DefaultVersion": {
          "type": "boolean"
        },
        "LaunchTemplateData": {
          "$ref": "#/definitions/responseLaunchTemplateData"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/launchTemplateVersionAka"
              }
            },
            "title": {
              "$ref": "#/definitions/versionNumber"
            },
            "custom": {
              "type": "object",
              "properties": {
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                },
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "VersionNumber": 1,
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:launch-template/lt-0c45b5e061ec98456:launch-template-version/1"
              ],
              "title": 1,
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "launchTemplateVersionAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(gov)?-[a-z]+-[0-9]:[0-9]{12}:launch-template/lt-[0-9a-z]{17}:launch-template-version/[0-9]+$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:123456789012:launch-template/lt-0c45b5e061ec98456:launch-template-version/1"
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:us-efqopeouigewuqhowu123ast-1:123456789012:launch-template/lt-0c45b5e061ec98456:launch-template-version/1",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:1234567890123143da12:launch-template/lt-0c45b5e061ec98456:launch-template-version/1",
          "expected": false
        }
      ]
    },
    "versionNumber": {
      "type": "integer"
    },
    "responseLaunchTemplateData": {
      "type": "object",
      "properties": {
        "KernelId": {
          "type": "string"
        },
        "EbsOptimized": {
          "type": "boolean"
        },
        "IamInstanceProfile": {
          "$ref": "#/definitions/launchTemplateIamInstanceProfileSpecification"
        },
        "BlockDeviceMappings": {
          "type": "array"
        },
        "NetworkInterfaces": {
          "type": "array"
        },
        "ImageId": {
          "type": "string"
        },
        "InstanceType": {
          "type": "string"
        },
        "KeyName": {
          "type": "string"
        },
        "Monitoring": {
          "type": "object"
        },
        "Placement": {
          "type": "object"
        },
        "RamDiskId": {
          "type": "string"
        },
        "DisableApiTermination": {
          "type": "boolean"
        },
        "InstanceInitiatedShutdownBehavior": {
          "type": "object"
        },
        "UserData": {
          "type": "string"
        },
        "TagSpecifications": {
          "type": "array"
        },
        "ElasticGpuSpecifications": {
          "type": "array"
        },
        "ElasticInferenceAccelerators": {
          "type": "array"
        },
        "SecurityGroupIds": {
          "type": "array"
        },
        "SecurityGroups": {
          "type": "array"
        },
        "InstanceMarketOptions": {
          "type": "object"
        },
        "CreditSpecification": {
          "type": "object"
        },
        "CpuOptions": {
          "type": "object"
        },
        "CapacityReservationSpecification": {
          "type": "object"
        },
        "LicenseSpecifications": {
          "type": "array"
        },
        "HibernationOptions": {
          "type": "object"
        },
        "MetadataOptions": {
          "type": "object"
        }
      }
    },
    "launchTemplateIamInstanceProfileSpecification": {
      "type": "object",
      "properties": {
        "Arn": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "networkInterface": {
      "type": "object",
      "properties": {
        "NetworkInterfaceId": {
          "$ref": "#/definitions/networkInterfaceId"
        },
        "TagSet": {
          "$ref": "#/definitions/tagList"
        },
        "Attachment": {
          "$ref": "#/definitions/attachmentStatus"
        },
        "Association": {
          "$ref": "#/definitions/association"
        },
        "AvailabilityZone": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Groups": {
          "$ref": "#/definitions/groupIdentifierList"
        },
        "InterfaceType": {
          "$ref": "#/definitions/networkInterfaceType"
        },
        "Ipv6Addresses": {
          "$ref": "#/definitions/networkInterfaceIpv6AddressesList"
        },
        "MacAddress": {
          "type": "string"
        },
        "OutpostArn": {
          "type": "string"
        },
        "OwnerId": {
          "type": "string"
        },
        "PrivateDnsName": {
          "type": "string"
        },
        "PrivateIpAddress": {
          "type": "string"
        },
        "RequesterId": {
          "type": "string"
        },
        "RequesterManaged": {
          "type": "boolean"
        },
        "SourceDestCheck": {
          "type": "boolean"
        },
        "Status": {
          "$ref": "#/definitions/eniStatus"
        },
        "SubnetId": {
          "type": "string"
        },
        "VpcId": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/networkInterfaceAka"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/networkInterfaceId"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "NetworkInterfaceId": "eni-068f6677372d4865b",
            "TagSet": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:network-interface/eni-068f6677372d4865b"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "eni-068f6677372d4865b",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "networkInterfaceId": {
      "type": "string",
      "pattern": "^eni-([0-9a-f]{8}|[0-9a-f]{9}|[0-9a-f]{17})$",
      "tests": [
        {
          "input": "eni-068f66773"
        },
        {
          "input": "eni-068f6677"
        },
        {
          "input": "eni-068f6677372123312"
        },
        {
          "description": "invalid - characters allowed from a to f only",
          "input": "eni-068f6677372d4865z",
          "expected": false
        },
        {
          "description": "invalid - should always start with eni",
          "input": "ei-068f6677372d4865b",
          "expected": false
        }
      ]
    },
    "networkInterfaceAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:network-interface/eni-([0-9a-f]{8}|[0-9a-f]{9}|[0-9a-f]{17})$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws-us-gov:ec2:us-gov-east-1:123456789012:network-interface/eni-068f6677372d4865b"
        },
        {
          "description": "Valid - US Gov case",
          "input": "arn:aws:ec2:us-east-1:123456789012:network-interface/eni-068f6677372d4865b"
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:us-eaasd12312st-1:123456789012:network-interface/eni-068f6677372d4865b",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:1234567asd12389012:network-interface/eni-068f6677372d4865b",
          "expected": false
        }
      ]
    },
    "attachmentStatus": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/networkInterfaceStatus"
        }
      }
    },
    "networkInterfaceStatus": {
      "type": "string",
      "enum": [
        "attaching",
        "attached",
        "detaching",
        "detached"
      ],
      "tests": [
        {
          "description": "valid - correct status type",
          "input": "attaching"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "eniStatus": {
      "type": "string",
      "enum": [
        "available",
        "associated",
        "attaching",
        "in-use",
        "detaching"
      ]
    },
    "association": {
      "type": "object",
      "properties": {
        "AllocationId": {
          "type": "string"
        },
        "AssociationId": {
          "type": "string"
        },
        "IpOwnerId": {
          "type": "string"
        },
        "PublicDnsName": {
          "type": "string"
        },
        "PublicIp": {
          "type": "string"
        }
      }
    },
    "networkInterfaceType": {
      "type": "string",
      "enum": [
        "efa",
        "interface"
      ]
    },
    "networkInterfaceIpv6AddressesList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/networkInterfaceIpv6Address"
      }
    },
    "networkInterfaceIpv6Address": {
      "type": "object",
      "properties": {
        "Ipv6Address": {
          "type": "string"
        }
      }
    },
    "networkLoadBalancer": {
      "type": "object",
      "properties": {
        "AvailabilityZones": {
          "$ref": "#/definitions/availabilityZones"
        },
        "CanonicalHostedZoneId": {
          "$ref": "#/definitions/canonicalHostedZoneId"
        },
        "DNSName": {
          "$ref": "#/definitions/dnsName"
        },
        "IpAddressType": {
          "$ref": "#/definitions/ipAddressType"
        },
        "LoadBalancerArn": {
          "$ref": "#/definitions/networkLoadBalancingArn"
        },
        "LoadBalancerName": {
          "$ref": "#/definitions/loadBalancerName"
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "CreatedTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Scheme": {
          "$ref": "#/definitions/scheme"
        },
        "SecurityGroups": {
          "$ref": "#/definitions/securityGroups"
        },
        "Type": {
          "$ref": "#/definitions/type"
        },
        "Tags": {
          "$ref": "aws#/definitions/tagList"
        },
        "State": {
          "$ref": "#/definitions/networkLoadbalancerStatus"
        },
        "Attributes": {
          "$ref": "#/definitions/loadBalancerAttributes"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/networkLoadBalancingArn"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/loadBalancerName"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "turbot": {
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/my-load-balancer/50dc6c495c0c9188"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "foo",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            },
            "LoadBalancerName": "foo",
            "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/my-load-balancer/50dc6c495c0c9188",
            "CanonicalHostedZoneId": "Z3DZXE0EXAMPLE",
            "DNSName": "my-load-balancer-1234567890.us-west-2.elb.amazonaws.com",
            "SecurityGroups": [
              "sg-a61988c3"
            ],
            "CreatedTime": "2015-03-19T03:24:02.650Z",
            "AvailabilityZones": [
              {
                "ZoneName": "us-west-2a"
              }
            ],
            "Type": "application",
            "Scheme": "internet-facing",
            "IpAddressType": "ipv4",
            "VpcId": "vpc-3ac0fb5f",
            "State": {
              "Code": "active"
            },
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ]
          }
        }
      ]
    },
    "networkLoadBalancingArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:loadbalancer/net/[a-zA-Z0-9](?:[-a-zA-Z0-9]{0,30}[a-zA-Z0-9])?/[0-9a-f]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/my-load-balancer/50dc6c495c0c9188"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:loadbalancer/net/my-load-balancer/50dc6c495c0c9188"
        },
        {
          "description": "invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:loadbalancer/net/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        },
        {
          "description": "invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:loadbalancer/net/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        },
        {
          "description": "invalid - load balancer id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:loadbalancer/net/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        }
      ]
    },
    "networkListenerArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:listener/net/[a-zA-Z0-9](?:[-a-zA-Z0-9]{0,30}[a-zA-Z0-9])?/[0-9a-f]{16}/[0-9a-f]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/net/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:listener/net/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2"
        },
        {
          "description": "invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:listener/net/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2",
          "expected": false
        },
        {
          "description": "invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:listener/net/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2",
          "expected": false
        },
        {
          "description": "invalid - load balancer id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:listener/net/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2",
          "expected": false
        }
      ]
    },
    "networkLoadbalancerStatus": {
      "type": "object",
      "properties": {
        "Code": {
          "$ref": "#/definitions/ec2NetworkLoadbalancerStatus"
        }
      }
    },
    "ec2NetworkLoadbalancerStatus": {
      "type": "string",
      "enum": [
        "active",
        "provisioning",
        "active_impaired",
        "failed"
      ],
      "tests": [
        {
          "description": "valid - correct status type",
          "input": "active"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "snapshot": {
      "type": "object",
      "properties": {
        "DataEncryptionKeyId": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Encrypted": {
          "type": "boolean"
        },
        "KmsKeyId": {
          "type": "string"
        },
        "Progress": {
          "type": "string"
        },
        "SnapshotId": {
          "$ref": "#/definitions/snapshotId"
        },
        "StartTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "OwnerId": {
          "$ref": "aws#/definitions/accountId"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "State": {
          "$ref": "#/definitions/snapshotStatus"
        },
        "StateMessage": {
          "type": "string"
        },
        "VolumeId": {
          "type": "string"
        },
        "VolumeSize": {
          "type": "integer"
        },
        "OwnerAlias": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/snapshotAka"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/snapshotId"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "SnapshotId": "snap-1234567890abcdef0",
            "OwnerId": 123456789012,
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:snapshot/snap-a2345678"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "snap-1234567890abcdef0",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1",
                  "partition": "aws"
                }
              }
            }
          }
        }
      ]
    },
    "snapshotId": {
      "type": "string",
      "pattern": "^snap-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "snap-1234567890abcdef0"
        },
        {
          "input": "snap-87e12c93"
        },
        {
          "description": "invalid - pattern mismatch",
          "input": "a1234567812345678123456781234567",
          "expected": false
        },
        {
          "description": "invalid - cannot start with hyphens",
          "input": "-aaaaaa111111",
          "expected": false
        },
        {
          "description": "invalid - cannot contain hyphens",
          "input": "aaaaaa-111111",
          "expected": false
        }
      ]
    },
    "snapshotStatus": {
      "type": "string",
      "enum": [
        "pending",
        "completed",
        "error"
      ],
      "tests": [
        {
          "input": "pending"
        },
        {
          "input": "error"
        },
        {
          "description": "invalid - not listed in options",
          "input": "Reactive",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        }
      ]
    },
    "snapshotAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:snapshot/snap-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:123456789012:snapshot/snap-1234567890abcdef0"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:123456789012:snaps/snap-1234567890abcdef0",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:use-east-1:123456789012:snapshot/snap-1234567890abcdef0",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:1234567890123:snapshot/snap-1234567890abcdef0",
          "expected": false
        }
      ]
    },
    "targetGroup": {
      "type": "object",
      "properties": {
        "TargetGroupName": {
          "$ref": "#/definitions/targetGroupName"
        },
        "TargetGroupArn": {
          "$ref": "#/definitions/targetGroupArn"
        },
        "LoadBalancerArns": {
          "$ref": "#/definitions/loadBalancerArns"
        },
        "Protocol": {
          "$ref": "#/definitions/protocol"
        },
        "Port": {
          "$ref": "#/definitions/port"
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "TargetType": {
          "$ref": "#/definitions/targetType"
        },
        "HealthyThresholdCount": {
          "$ref": "#/definitions/healthyThresholdCount"
        },
        "Matcher": {
          "$ref": "#/definitions/matcher"
        },
        "UnhealthyThresholdCount": {
          "$ref": "#/definitions/unhealthyThresholdCount"
        },
        "HealthCheckPath": {
          "$ref": "#/definitions/healthCheckPath"
        },
        "HealthCheckProtocol": {
          "$ref": "#/definitions/healthCheckProtocol"
        },
        "HealthCheckPort": {
          "$ref": "#/definitions/healthCheckPort"
        },
        "HealthCheckIntervalSeconds": {
          "$ref": "#/definitions/healthCheckIntervalSeconds"
        },
        "HealthCheckTimeoutSeconds": {
          "$ref": "#/definitions/healthCheckTimeoutSeconds"
        },
        "TargetHealthDescriptions": {
          "$ref": "#/definitions/TargetHealthDescriptions"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/targetGroupArn"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/targetGroupName"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties given",
          "input": {
            "turbot": {
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/my-targets/73e2d6bc24d8a067"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "foo",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            },
            "TargetGroupName": "foo",
            "TargetGroupArn": "arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/my-targets/73e2d6bc24d8a067",
            "LoadBalancerArns": [
              "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:loadbalancer/net/my-load-balancer/50dc6c495c0c9188",
              "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:loadbalancer/app/my-load-balancer/50dc6c495c0c9188"
            ],
            "Protocol": "HTTP",
            "Port": 80,
            "VpcId": "vpc-3ac0fb5f",
            "TargetType": "instance",
            "HealthyThresholdCount": 5,
            "Matcher": {
              "HttpCode": 200
            },
            "UnhealthyThresholdCount": 2,
            "HealthCheckPath": "/",
            "HealthCheckProtocol": "HTTP",
            "HealthCheckPort": "traffic-port",
            "HealthCheckIntervalSeconds": 30,
            "HealthCheckTimeoutSeconds": 5,
            "TargetHealthDescriptions": [
              {
                "HealthCheckPort": "80",
                "Target": {
                  "Id": "i-0a94d7d5d9dbd5bcf",
                  "Port": 80
                },
                "TargetHealth": {
                  "Description": "Target is in an Availability Zone that is not enabled for the load balancer",
                  "Reason": "Target.NotInUse",
                  "State": "unused"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ]
          }
        }
      ]
    },
    "targetGroupName": {
      "type": "string",
      "pattern": "^(((?!.*--)[a-zA-Z0-9][a-zA-Z0-9-]{1,28})[a-z0-9])$",
      "tests": [
        {
          "input": "aaAbbb111"
        },
        {
          "input": "11aaaabbbbb"
        },
        {
          "input": "Test-MeP12-lease"
        },
        {
          "description": "Invalid - TargetGroup name cannot begin or end with a dash",
          "input": "-hgfdfg",
          "expected": false
        },
        {
          "description": "Invalid - TargetGroup name cannot contain double dashes",
          "input": "hgf--dfg",
          "expected": false
        },
        {
          "description": "Invalid - TargetGroup name cannot be longer than 32 characters",
          "input": "a12345678123456781234567812345643",
          "expected": false
        },
        {
          "description": "Invalid - TargetGroup name cannot contain characters that are not letters, or digits or the dash",
          "input": "98765432rl;';lkjh",
          "expected": false
        }
      ]
    },
    "targetGroupArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:targetgroup/(((?!.*--)[a-zA-Z0-9][a-zA-Z0-9-]{1,28})[a-z0-9])/[0-9a-f]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/my-targets/73e2d6bc24d8a067"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:targetgroup/my-targets/73e2d6bc24d8a067"
        },
        {
          "description": "Invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:targetgroup/my-targets/73e2d6bc24d8a067",
          "expected": false
        },
        {
          "description": "Invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:targetgroup/my-targets/73e2d6bc24d8a067",
          "expected": false
        },
        {
          "description": "Invalid - target group id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:targetgroup/my-targets/73e2dzd8a067",
          "expected": false
        }
      ]
    },
    "loadBalancerArns": {
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/networkLoadBalancingArn"
          },
          {
            "$ref": "#/definitions/applicationLoadBalancingArn"
          }
        ]
      },
      "tests": [
        {
          "input": [
            "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/my-load-balancer/50dc6c495c0c9188"
          ]
        },
        {
          "description": "invalid not array",
          "input": 5,
          "expected": false
        },
        {
          "description": "invalid ARN",
          "input": [
            "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/50dc6c495c0c9188"
          ],
          "expected": false
        }
      ]
    },
    "targetType": {
      "type": "string",
      "enum": [
        "instance",
        "ip"
      ],
      "tests": [
        {
          "input": "instance"
        },
        {
          "input": "ip"
        },
        {
          "description": "invalid - uppercase value",
          "input": "IP",
          "expected": false
        },
        {
          "description": "invalid - not listed in the options",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "healthyThresholdCount": {
      "type": "integer",
      "minimum": 2,
      "maximum": 10,
      "tests": [
        {
          "input": 5
        },
        {
          "input": 7
        },
        {
          "description": "minimum",
          "input": 2
        },
        {
          "description": "maximum",
          "input": 10
        },
        {
          "description": "invalid - decimal value provided",
          "input": 4.5,
          "expected": false
        },
        {
          "description": "invalid - string tpye provided",
          "input": "three",
          "expected": false
        },
        {
          "description": "invalid - less than minimum",
          "input": 1,
          "expected": false
        },
        {
          "description": "invalid - greater than maximum",
          "input": 11,
          "expected": false
        }
      ]
    },
    "unhealthyThresholdCount": {
      "type": "integer",
      "minimum": 2,
      "maximum": 10,
      "tests": [
        {
          "input": 5
        },
        {
          "input": 7
        },
        {
          "description": "minimum",
          "input": 2
        },
        {
          "description": "maximum",
          "input": 10
        },
        {
          "description": "invalid - decimal value provided",
          "input": 4.5,
          "expected": false
        },
        {
          "description": "invalid - string tpye provided",
          "input": "three",
          "expected": false
        },
        {
          "description": "invalid - less than minimum",
          "input": 1,
          "expected": false
        },
        {
          "description": "invalid - greater than maximum",
          "input": 11,
          "expected": false
        }
      ]
    },
    "matcher": {
      "type": "object",
      "properties": {
        "HttpCode": {
          "$ref": "#/definitions/httpCode"
        }
      },
      "required": [
        "HttpCode"
      ],
      "tests": [
        {
          "description": "all required properties given",
          "input": {
            "HttpCode": 205
          }
        }
      ]
    },
    "healthCheckPath": {
      "type": "string",
      "minLength": 1,
      "maxLength": 1024,
      "tests": [
        {
          "input": "a"
        },
        {
          "input": "gdghdhhd"
        },
        {
          "description": "minimum",
          "input": "/"
        },
        {
          "description": "invalid - null",
          "input": null,
          "expected": false
        },
        {
          "description": "invalid - passed array instead of string",
          "input": [
            "foo"
          ],
          "expected": false
        }
      ]
    },
    "healthCheckProtocol": {
      "type": "string",
      "enum": [
        "HTTP",
        "HTTPS",
        "TCP"
      ],
      "tests": [
        {
          "input": "HTTP"
        },
        {
          "input": "TCP"
        },
        {
          "description": "invalid - lowercase value",
          "input": "tcp",
          "expected": false
        },
        {
          "description": "invalid - not listed in the options",
          "input": "foo",
          "expected": false
        }
      ]
    },
    "healthCheckPort": {
      "type": "string",
      "pattern": "^[a-z0-9-]+$",
      "tests": [
        {
          "input": "traffic-port"
        },
        {
          "input": 80
        },
        {
          "description": "invalid - uppercase value",
          "input": "TRAFFIC-PORT",
          "expected": false
        },
        {
          "description": "invalid - passed array instead of string",
          "input": [],
          "expected": false
        }
      ]
    },
    "healthCheckIntervalSeconds": {
      "type": "integer",
      "minimum": 5,
      "maximum": 300,
      "tests": [
        {
          "input": 10
        },
        {
          "input": 90
        },
        {
          "description": "minimum",
          "input": 5
        },
        {
          "description": "maximum",
          "input": 300
        },
        {
          "description": "invalid - decimal value provided",
          "input": 4.5,
          "expected": false
        },
        {
          "description": "invalid - string tpye provided",
          "input": "three",
          "expected": false
        },
        {
          "description": "invalid - less than minimum",
          "input": 4,
          "expected": false
        },
        {
          "description": "invalid - greater than maximum",
          "input": 301,
          "expected": false
        }
      ]
    },
    "healthCheckTimeoutSeconds": {
      "type": "integer",
      "minimum": 2,
      "maximum": 60,
      "tests": [
        {
          "input": 10
        },
        {
          "input": 30
        },
        {
          "description": "minimum",
          "input": 2
        },
        {
          "description": "maximum",
          "input": 60
        },
        {
          "description": "invalid - decimal value provided",
          "input": 4.5,
          "expected": false
        },
        {
          "description": "invalid - string tpye provided",
          "input": "three",
          "expected": false
        },
        {
          "description": "invalid - less than minimum",
          "input": 1,
          "expected": false
        },
        {
          "description": "invalid - greater than maximum",
          "input": 301,
          "expected": false
        }
      ]
    },
    "httpCode": {
      "type": "string",
      "pattern": "^[0-9]{3}$",
      "tests": [
        {
          "input": 404
        },
        {
          "input": 200
        },
        {
          "description": "invalid - greater than max length",
          "input": 4044,
          "expected": false
        }
      ]
    },
    "TargetHealthDescriptions": {
      "type": "array",
      "properties": {
        "Target": {
          "$ref": "#/definitions/Target"
        },
        "HealthCheckPort": {
          "$ref": "#/definitions/healthCheckPort"
        },
        "TargetHealth": {
          "$ref": "#/definitions/TargetHealth"
        }
      }
    },
    "Target": {
      "type": "array"
    },
    "TargetHealth": {
      "type": "object"
    },
    "volume": {
      "type": "object",
      "properties": {
        "AvailabilityZone": {
          "type": "string"
        },
        "CreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Encrypted": {
          "type": "boolean"
        },
        "OutpostArn": {
          "type": "string"
        },
        "Size": {
          "type": "integer"
        },
        "SnapshotId": {
          "type": "string"
        },
        "Iops": {
          "type": "integer"
        },
        "FastRestored": {
          "type": "boolean"
        },
        "VolumeId": {
          "$ref": "#/definitions/volumeId"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "State": {
          "$ref": "#/definitions/volumeStatus"
        },
        "VolumeType": {
          "$ref": "#/definitions/volumeType"
        },
        "Attachments": {
          "$ref": "#/definitions/volumeAttachments"
        },
        "KmsKeyId": {
          "$ref": "aws-kms#/definitions/keyAka"
        },
        "KeyArn": {
          "$ref": "aws-kms#/definitions/keyAka"
        },
        "AliasName": {
          "type": "string",
          "pattern": "^.{1,256}$"
        },
        "KeyId": {
          "$ref": "aws-kms#/definitions/KeyId"
        },
        "AliasArn": {
          "type": "string",
          "pattern": "^.{20,2048}$"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/volumeAka"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/volumeId"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "all properties given",
          "input": {
            "VolumeId": "vol-1234567890abcdef0",
            "State": "creating",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:volume/vol-1234567890abcdef0"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "vol-1234567890abcdef0",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "volumeId": {
      "type": "string",
      "tests": [
        {
          "description": "base case",
          "input": "vol-1234567890abcdef0"
        },
        {
          "description": "invalid - incorrect type",
          "input": [],
          "expected": false
        }
      ]
    },
    "volumeStatus": {
      "type": "string",
      "enum": [
        "creating",
        "available",
        "in-use",
        "deleting",
        "deleted",
        "error"
      ],
      "tests": [
        {
          "input": "creating"
        },
        {
          "input": "error"
        },
        {
          "description": "invalid - not listed in options",
          "input": "Reactive",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        }
      ]
    },
    "volumeAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:volume/vol-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:123456789012:volume/vol-1234567890abcdef0"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:123456789012:volumes/i-a2345678",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:use-east-1:123456789012:volume/vol-1234567890abcdef0",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:1234567890123:volume/vol-1234567890abcdef0",
          "expected": false
        }
      ]
    },
    "volumeType": {
      "type": "string",
      "enum": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "tests": [
        {
          "input": "gp2"
        },
        {
          "input": "io1"
        },
        {
          "input": "standard"
        },
        {
          "input": "st1"
        }
      ]
    },
    "volumeTypeMatcherList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/volumeTypeMatcher"
      },
      "example": [
        [
          "gp2",
          "standard"
        ],
        [
          "io1",
          "st1"
        ]
      ],
      "default": [
        "*"
      ],
      "tests": [
        {
          "input": [
            "gp2"
          ]
        },
        {
          "input": [
            "io1"
          ]
        },
        {
          "input": [
            "standard"
          ]
        },
        {
          "input": [
            "st1"
          ]
        }
      ]
    },
    "volumeTypeMatcher": {
      "type": "string",
      "enum": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard",
        "*"
      ],
      "tests": [
        {
          "input": "gp2"
        },
        {
          "input": "io1"
        },
        {
          "input": "standard"
        },
        {
          "input": "st1"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - contains hyphen",
          "input": "st-1",
          "expected": false
        }
      ]
    },
    "volumeAttachments": {
      "type": "array",
      "items": {
        "AttachTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Device": {
          "type": "string",
          "tests": []
        },
        "DeleteOnTermination": {
          "type": "string",
          "tests": []
        },
        "InstanceId": {
          "$ref": "#/definitions/instanceId"
        },
        "State": {
          "type": "string",
          "tests": []
        },
        "VolumeId": {
          "$ref": "#/definitions/volumeId"
        }
      }
    },
    "loadBalancerListener": {
      "type": "object",
      "properties": {
        "DefaultActions": {
          "type": "array"
        },
        "Protocol": {
          "type": "string"
        },
        "Port": {
          "$ref": "#/definitions/port"
        },
        "Certificates": {
          "type": "array"
        },
        "ListenerArn": {
          "$ref": "#/definitions/ListenerArn"
        },
        "LoadBalancerArn": {
          "$ref": "#/definitions/loadBalancerArn"
        },
        "SslPolicy": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListenerArn"
              }
            },
            "title": {
              "$ref": "#/definitions/ListenerArn"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties given",
          "input": {
            "Protocol": "HTTP",
            "DefaultActions": [
              {
                "ForwardConfig": {
                  "TargetGroupStickinessConfig": {
                    "Enabled": false
                  },
                  "TargetGroups": [
                    {
                      "TargetGroupArn": "arn:aws:elasticloadbalancing:us-east-2:986325076436:targetgroup/abc-tg/d61098fb74677883",
                      "Weight": 1
                    }
                  ]
                },
                "TargetGroupArn": "arn:aws:elasticloadbalancing:us-east-2:986325076436:targetgroup/abc-tg/d61098fb74677883",
                "Type": "forward"
              }
            ],
            "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-east-2:986325076436:loadbalancer/app/turbot-test-application-LB-IF/05a33d85c8a8db8e",
            "Port": 80,
            "ListenerArn": "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
            "turbot": {
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c"
              ],
              "title": "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
              "custom": {
                "aws": {
                  "accountId": 986325076436,
                  "regionName": "us-east-2"
                }
              }
            }
          }
        }
      ]
    },
    "ListenerArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:listener/[a-z]{3}/[a-zA-Z0-9-]{1,32}/[0-9a-f]{16}/[a-f0-9]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c"
        },
        {
          "description": "Invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
          "expected": false
        },
        {
          "description": "Invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
          "expected": false
        },
        {
          "description": "Invalid - target group id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
          "expected": false
        }
      ]
    },
    "loadBalancerArn": {
      "anyOf": [
        {
          "$ref": "#/definitions/networkLoadBalancingArn"
        },
        {
          "$ref": "#/definitions/applicationLoadBalancingArn"
        }
      ]
    },
    "listenerRule": {
      "type": "object",
      "properties": {
        "RuleArn": {
          "$ref": "#/definitions/listenerRuleArn"
        },
        "ListenerArn": {
          "$ref": "#/definitions/listenerArn"
        },
        "Priority": {
          "type": "string"
        },
        "Conditions": {
          "type": "array"
        },
        "Actions": {
          "type": "array"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/listenerRuleArn"
              }
            },
            "title": {
              "$ref": "#/definitions/listenerRuleArn"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties given",
          "input": {
            "turbot": {
              "akas": [
                "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee"
              ],
              "title": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "listenerRuleArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:listener-rule/[a-z]{3}/[a-zA-Z0-9-]{1,32}/[0-9a-f]{16}/[a-f0-9]{16}/[a-f0-9]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee"
        },
        {
          "description": "Invalid - account id missing",
          "input": "arn:aws:elasticloadbalancing:us-west-2::listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee",
          "expected": false
        }
      ]
    },
    "listenerArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:listener/[a-z]{3}/[a-zA-Z0-9-]{1,32}/[0-9a-f]{16}/[a-f0-9]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c"
        },
        {
          "description": "Invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
          "expected": false
        },
        {
          "description": "Invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
          "expected": false
        },
        {
          "description": "Invalid - target group id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
          "expected": false
        }
      ]
    },
    "classicLoadBalancerListener": {
      "type": "object",
      "properties": {
        "LoadBalancerName": {
          "type": "string"
        },
        "Protocol": {
          "$ref": "#/definitions/Protocol"
        },
        "InstancePort": {
          "type": "integer"
        },
        "InstanceProtocol": {
          "$ref": "#/definitions/InstanceProtocol"
        },
        "LoadBalancerPort": {
          "type": "integer"
        },
        "SSLCertificateId": {
          "type": "string"
        },
        "PolicyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "turbot": {
          "type": "object",
          "properties": {
            "metadata": {
              "type": "object",
              "properties": {
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                },
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true
    },
    "Protocol": {
      "type": "string",
      "enum": [
        "HTTP",
        "HTTPS",
        "TCP",
        "SSL"
      ]
    },
    "InstanceProtocol": {
      "type": "string",
      "enum": [
        "HTTP",
        "HTTPS",
        "TCP",
        "SSL"
      ]
    },
    "gatewayLoadBalancer": {
      "type": "object",
      "properties": {
        "AvailabilityZones": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "CanonicalHostedZoneId": {
          "type": "string"
        },
        "CreatedTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "DNSName": {
          "type": "string"
        },
        "IpAddressType": {
          "$ref": "#/definitions/IpAddressType"
        },
        "LoadBalancerAddresses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "AllocationId": {
                "type": "string"
              },
              "AvailabilityZones": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "SubnetId": {
                      "type": "string"
                    },
                    "ZoneName": {
                      "type": "string"
                    }
                  }
                }
              },
              "IpAddress": {
                "type": "string"
              },
              "PrivateIPv4Address": {
                "type": "string"
              }
            }
          }
        },
        "LoadBalancerArn": {
          "$ref": "#/definitions/gatewayLoadBalancerArn"
        },
        "LoadBalancerName": {
          "$ref": "#/definitions/loadBalancerName"
        },
        "Scheme": {
          "type": "string"
        },
        "SecurityGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "State": {
          "type": "object",
          "properties": {
            "Code": {
              "$ref": "#/definitions/Code"
            },
            "Reason": {
              "type": "string"
            }
          }
        },
        "Type": {
          "$ref": "#/definitions/Type"
        },
        "VpcId": {
          "type": "string"
        },
        "Tags": {
          "$ref": "aws#/definitions/tagList",
          "type": "object",
          "properties": {
            "Value": {
              "type": "string"
            }
          }
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gatewayLoadBalancerArn"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/loadBalancerName"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                },
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true
    },
    "IpAddressType": {
      "type": "string",
      "enum": [
        "ipv4",
        "dualstack"
      ]
    },
    "Code": {
      "type": "string",
      "enum": [
        "active",
        "provisioning",
        "active_impaired",
        "failed"
      ]
    },
    "Type": {
      "type": "string",
      "enum": [
        "application",
        "network",
        "gateway"
      ]
    },
    "gatewayLoadBalancerArn": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:elasticloadbalancing:[a-z]{2}(-gov)?-[a-z]+-[0-9]{1}:[0-9]{12}:loadbalancer/gwy/[a-zA-Z0-9](?:[-a-zA-Z0-9]{0,30}[a-zA-Z0-9])?/[0-9a-f]{16}$",
      "tests": [
        {
          "input": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/gwy/my-load-balancer/50dc6c495c0c9188"
        },
        {
          "input": "arn:aws-us-gov:elasticloadbalancing:us-gov-west-1:123456789101:loadbalancer/gwy/my-load-balancer/50dc6c495c0c9188"
        },
        {
          "description": "invalid - account id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:loadbalancer/gwy/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        },
        {
          "description": "invalid - region",
          "input": "arn:aws:elasticloadbalancing:usa-west-2:12345789101:loadbalancer/gwy/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        },
        {
          "description": "invalid - load balancer id",
          "input": "arn:aws:elasticloadbalancing:us-west-2:12345789101:loadbalancer/gwy/my-load-balancer/50dc6c495c0c9188",
          "expected": false
        }
      ]
    }
  },
  "policy": {
    "types": {
      "amiActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Determine the action to take when an AWS EC2 ami, based on the `AWS > EC2 > AMI > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > AMI > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "amiActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/amiActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "The number of days since the AWS EC2 ami\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > AMI > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "amiActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/amiActive",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "The age after which the AWS EC2 ami\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > AMI > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "amiActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/amiActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\namis to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > AMI > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "amiApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Determine the action to take when an AWS EC2 ami is not approved based on `AWS > EC2 > AMI > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "amiApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/amiApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "A list of AWS regions in which AWS EC2 amis are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 ami is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > AMI > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "amiApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/amiApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Determine whether the AWS EC2 ami is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 ami is not approved, it will be subject to the action specified in the `AWS > EC2 > AMI > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "amiApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/amiApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "The policy allows you to set amis to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 ami is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > AMI > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "amiCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 ami into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > AMI > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "amiConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "amiConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/amiConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "amiConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/amiConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "amiRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 amis are supported for use.\n\nAny amis in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "amiTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "Determine the action to take when an AWS EC2 ami tags are not updated based on the `AWS > EC2 > AMI > Tags > *` policies.\n\nThe control ensure AWS EC2 ami tags include tags defined in `AWS > EC2 > AMI > Tags > Template`.\n\nTags not defined in AMI Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "amiTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/amiTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 ami.\n\nTags not defined in AMI Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "amiTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/ami",
        "targets": [
          "#/resource/types/ami"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Manage trusted access for AWS EC2 AMIs.\n\nAWS allows EC2 AMIs to be shared with specific AWS accounts.\nThis policy allows you to configure whether such sharing is allowed, and to which accounts.\n\nIf set to `Enforce`, access to non-trusted accounts will be removed.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Trusted Access > Accounts",
            "Enforce: Trusted Access > Accounts"
          ],
          "example": [
            "Check: Trusted Access > Accounts"
          ],
          "default": "Skip"
        }
      },
      "amiTrustedAccessAccounts": {
        "title": "Accounts",
        "icon": "fal-user-check",
        "parent": "#/policy/types/amiTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/ami"
        ],
        "description": "A list of AWS account IDs that are allowed to have access",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^[0-9]{12}$|^\\*$|^all$)"
          }
        },
        "defaultTemplate": "{% if $.accounts | length == 0 %}[]{% endif %}{% for item in $.accounts %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  accounts: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2TrustedAccounts\")\n}\n"
      },
      "amiUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/ami",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 amis that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > AMI > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "amiUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/amiUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 1000
        }
      },
      "applicationLoadBalancerAccessLogging": {
        "title": "Access Logging",
        "icon": "fal-file-download",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Define the Access Logging settings required for `AWS > EC2 > Application Load Balancer`.\n\n`AWS > EC2 > Application Load Balancer` provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Check: Enabled to Access Logging > Bucket",
            "Enforce: Disabled",
            "Enforce: Enabled to Access Logging > Bucket"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerAccessLoggingBucket": {
        "title": "Bucket",
        "icon": "fab-bitbucket",
        "parent": "#/policy/types/applicationLoadBalancerAccessLogging",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "The name of an S3 Bucket to which the Bucket\naccess logs will be delivered.\n\nThe S3 Bucket must already exist and the S3 service must be allowed write access.\nThe bucket can reside in any account but must be in the same region as the Load Balancer.\n\nexample:\n```\n  testbucket\n  turbotbucket\n```\n",
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9._-]{1,255}$"
        },
        "defaultTemplateInput": "{\n  turbotLoggingBucket: policy(uri: \"aws#/policy/types/loggingBucketDefault\")\n}\n",
        "defaultTemplate": "{% if $.turbotLoggingBucket %}\"{{ $.turbotLoggingBucket }}\"{% else %}\"\"{% endif %}"
      },
      "applicationLoadBalancerAccessLoggingKeyPrefix": {
        "title": "Key Prefix",
        "icon": "fal-key",
        "parent": "#/policy/types/applicationLoadBalancerAccessLogging",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "An optional S3 key prefix to which the `AWS > EC2 > Application Load Balancer` access logs will be written.\n\nThe file names of the access logs use the following format:\n`bucket[/prefix]/AWSLogs/aws-account-id/elasticloadbalancing/region/yyyy/mm/dd/aws-account-id_elasticloadbalancing_region_load-balancer-id_end-time_ip-address_random-string.log.gz`\n",
        "schema": {
          "type": "string",
          "pattern": "^.{1,200}$",
          "default": ""
        }
      },
      "applicationLoadBalancerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 application load balancer, based on the `AWS > EC2 > Application Load Balancer > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Application Load Balancer > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/applicationLoadBalancerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "The number of days since the AWS EC2 application load balancer\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Application Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/applicationLoadBalancerActive",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "The age after which the AWS EC2 application load balancer\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Application Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/applicationLoadBalancerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\napplicationLoadBalancers to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Application Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 application load balancer is not approved based on `AWS > EC2 > Application Load Balancer > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/applicationLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "A list of AWS regions in which AWS EC2 application load balancers are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 application load balancer is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Application Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "applicationLoadBalancerApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/applicationLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Determine whether the AWS EC2 application load balancer is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 application load balancer is not approved, it will be subject to the action specified in the `AWS > EC2 > Application Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "applicationLoadBalancerApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/applicationLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "The policy allows you to set application load balancers to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 application load balancer is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Application Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 application load balancer into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Application Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "applicationLoadBalancerConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "applicationLoadBalancerConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/applicationLoadBalancerConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "applicationLoadBalancerConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/applicationLoadBalancerConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "applicationLoadBalancerRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 application load balancers are supported for use.\n\nAny application load balancers in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "applicationLoadBalancerTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 application load balancer tags are not updated based on the `AWS > EC2 > Application Load Balancer > Tags > *` policies.\n\nThe control ensure AWS EC2 application load balancer tags include tags defined in `AWS > EC2 > Application Load Balancer > Tags > Template`.\n\nTags not defined in Application Load Balancer Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/applicationLoadBalancerTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/applicationLoadBalancer"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 application load balancer.\n\nTags not defined in Application Load Balancer Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "applicationLoadBalancerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/applicationLoadBalancer",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 application load balancers that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Application Load Balancer > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "applicationLoadBalancerUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/applicationLoadBalancerUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 50
        }
      },
      "autoScalingGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Determine the action to take when an AWS EC2 auto scaling group, based on the `AWS > EC2 > Auto Scaling Group > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Auto Scaling Group > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "autoScalingGroupActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/autoScalingGroupActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "The number of days since the AWS EC2 auto scaling group\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Auto Scaling Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "autoScalingGroupActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/autoScalingGroupActive",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "The age after which the AWS EC2 auto scaling group\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Auto Scaling Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "autoScalingGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Determine the action to take when an AWS EC2 auto scaling group is not approved based on `AWS > EC2 > Auto Scaling Group > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "autoScalingGroupApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/autoScalingGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "A list of AWS regions in which AWS EC2 auto scaling groups are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 auto scaling group is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Auto Scaling Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "autoScalingGroupApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/autoScalingGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Determine whether the AWS EC2 auto scaling group is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 auto scaling group is not approved, it will be subject to the action specified in the `AWS > EC2 > Auto Scaling Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "autoScalingGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 auto scaling group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Auto Scaling Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "autoScalingGroupRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 auto scaling groups are supported for use.\n\nAny auto scaling groups in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "autoScalingGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "Determine the action to take when an AWS EC2 auto scaling group tags are not updated based on the `AWS > EC2 > Auto Scaling Group > Tags > *` policies.\n\nThe control ensure AWS EC2 auto scaling group tags include tags defined in `AWS > EC2 > Auto Scaling Group > Tags > Template`.\n\nTags not defined in Auto Scaling Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "autoScalingGroupTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/autoScalingGroupTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/autoScalingGroup"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 auto scaling group.\n\nTags not defined in Auto Scaling Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "autoScalingGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/autoScalingGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 auto scaling groups that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Auto Scaling Group > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "autoScalingGroupUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/autoScalingGroupUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 200
        }
      },
      "classicLoadBalancerAccessLogging": {
        "title": "Access Logging",
        "icon": "fal-file-download",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Define the Access Logging settings required for `AWS > EC2 > Classic Load Balancer`.\n\n`AWS > EC2 > Classic Load Balancer` provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Check: Enabled to Access Logging > Bucket",
            "Enforce: Disabled",
            "Enforce: Enabled to Access Logging > Bucket"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerAccessLoggingBucket": {
        "title": "Bucket",
        "icon": "fab-bitbucket",
        "parent": "#/policy/types/classicLoadBalancerAccessLogging",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "The name of an S3 Bucket to which the Bucket\naccess logs will be delivered.\n\nThe S3 Bucket must already exist and the S3 service must be allowed write access.\nThe bucket should reside in same account and same region as of the Bucket.\n\nexample:\n```\n  testbucket\n  turbotbucket\n```\n",
        "schema": {
          "type": "string"
        },
        "defaultTemplateInput": "{\n  turbotLoggingBucket: policy(uri: \"aws#/policy/types/loggingBucketDefault\")\n}\n",
        "defaultTemplate": "{% if $.turbotLoggingBucket %}\"{{ $.turbotLoggingBucket }}\"{% else %}\"\"{% endif %}"
      },
      "classicLoadBalancerAccessLoggingKeyPrefix": {
        "title": "Key Prefix",
        "icon": "fal-key",
        "parent": "#/policy/types/classicLoadBalancerAccessLogging",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "An optional S3 key prefix to which the `AWS > EC2 > Classic Load Balancer` access logs will be written.\n\nThe file names of the access logs use the following format:\n`bucket[/prefix]/AWSLogs/aws-account-id/elasticloadbalancing/region/yyyy/mm/dd/aws-account-id_elasticloadbalancing_region_load-balancer-id_end-time_ip-address_random-string.log.gz`\n",
        "schema": {
          "type": "string",
          "pattern": "^.{1,200}$",
          "default": ""
        }
      },
      "classicLoadBalancerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 classic load balancer, based on the `AWS > EC2 > Classic Load Balancer > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/classicLoadBalancerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "The number of days since the AWS EC2 classic load balancer\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/classicLoadBalancerActive",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "The age after which the AWS EC2 classic load balancer\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/classicLoadBalancerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nclassicLoadBalancers to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 classic load balancer is not approved based on `AWS > EC2 > Classic Load Balancer > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/classicLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "A list of AWS regions in which AWS EC2 classic load balancers are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 classic load balancer is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Classic Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "classicLoadBalancerApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/classicLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Determine whether the AWS EC2 classic load balancer is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 classic load balancer is not approved, it will be subject to the action specified in the `AWS > EC2 > Classic Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "classicLoadBalancerApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/classicLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "The policy allows you to set classic load balancers to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 classic load balancer is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Classic Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 classic load balancer into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Classic Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "classicLoadBalancerConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "classicLoadBalancerConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/classicLoadBalancerConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "classicLoadBalancerConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/classicLoadBalancerConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "classicLoadBalancerRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 classic load balancers are supported for use.\n\nAny classic load balancers in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "classicLoadBalancerTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 classic load balancer tags are not updated based on the `AWS > EC2 > Classic Load Balancer > Tags > *` policies.\n\nThe control ensure AWS EC2 classic load balancer tags include tags defined in `AWS > EC2 > Classic Load Balancer > Tags > Template`.\n\nTags not defined in Classic Load Balancer Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/classicLoadBalancerTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 classic load balancer.\n\nTags not defined in Classic Load Balancer Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "classicLoadBalancerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/classicLoadBalancer",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 classic load balancers that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Classic Load Balancer > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/classicLoadBalancerUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 20
        }
      },
      "ec2CustomEventPatterns": {
        "title": "@turbot/aws-ec2",
        "icon": "fal-file-invoice",
        "parent": "aws#/policy/types/eventHandlersEventsRulesCustomEventPatterns",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The CloudWatch Events event pattern used by the AWS EC2 module to specify\nwhich events to forward to the Turbot Event Handlers.\n",
        "category": "turbot#/control/categories/configured",
        "schema": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "ec2Enabled": {
        "title": "Enabled",
        "icon": "fal-traffic-light-go",
        "description": "Enabled EC2.",
        "parent": "#/resource/types/ec2",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Enabled: Metadata Only",
            "Disabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Disabled"
        }
      },
      "ec2ApiEnabled": {
        "title": "API Enabled",
        "icon": "fal-lock-alt",
        "description": "Configure whether the AWS EC2 API is enabled.\n\n**Note:** Disabling the service disables the API for ALL users\nand roles, and Turbot will have no access to the API.\n",
        "parent": "#/resource/types/ec2",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > EC2 > Enabled"
          ],
          "default": "Enabled"
        }
      },
      "ec2Permissions": {
        "title": "Permissions",
        "icon": "fal-traffic-light-go",
        "description": "Configure whether permissions policies are in effect for AWS EC2.\nThis setting does not affect account level permissions (AWS/Admin, AWS/Owner, etc).\n\n**Note**: The behavior of this policy depends on the value of AWS > Permissions.\n",
        "parent": "#/resource/types/ec2",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > EC2 > Enabled & AWS > EC2 > API Enabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Enabled if AWS > EC2 > Enabled & AWS > EC2 > API Enabled"
        }
      },
      "ec2PermissionsLockdown": {
        "title": "Lockdown",
        "icon": "fal-lock",
        "parent": "#/policy/types/ec2Permissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions"
      },
      "ec2PermissionsLockdownApiBoundary": {
        "title": "API Boundary",
        "description": "Configure whether the AWS ec2 API is enabled for all\nusers and roles in turbot-managed boundary policies.\n\n**Note:** Disabling the service disables the API for ALL users\nand roles, and Turbot will have no access to the API.\n",
        "icon": "fal-tachometer-alt-average",
        "parent": "#/policy/types/ec2PermissionsLockdown",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled if AWS > EC2 > API Enabled"
          ],
          "example": [
            "Enabled if AWS > EC2 > API Enabled"
          ],
          "default": "Enabled if AWS > EC2 > API Enabled"
        }
      },
      "ec2PermissionsLockdownInstanceTypes": {
        "title": "Instance Types",
        "icon": "fal-lock",
        "description": "Configure whether lockdown policies are enabled to prohibit modification of Instance Types.\n\n**Note:** It is recommended to include instance types from all `AWS > EC2 > Instance > Approved > Instance Types` policy settings to ensure that this lockdown policy will not restrict any approved instance types.\n\nExample:\n```\n  - t2.micro\n  - t2.small\n  - d2.xlarge\n```\n",
        "parent": "#/policy/types/ec2PermissionsLockdown",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9.?*]+$"
          }
        }
      },
      "ec2PermissionsLockdownVolumeTypes": {
        "title": "Volume Types",
        "icon": "fal-lock",
        "description": "Configure whether lockdown policies are enabled to prohibit modification of Volume Types.\n\n**Note:** It is recommended to include volume types from all `AWS > EC2 > Volume > Approved > Volume Types` policy settings to ensure that this lockdown policy will not restrict any approved volume types.\n\nExample:\n```\n  - sc1\n  - standard\n  - gp2\n```\n",
        "parent": "#/policy/types/ec2PermissionsLockdown",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9.?*]+$"
          }
        }
      },
      "ec2PermissionsLevels": {
        "title": "Levels",
        "icon": "fal-layer-group",
        "description": "Define the permissions levels that can be used to grant access to an AWS account.\nPermissions levels defined will appear in the UI to assign access to Turbot users.\nThis policy provides a default for Permissions > Levels in each service, however\nyou can explicitly override the setting for each service if desired\n",
        "parent": "#/policy/types/ec2Permissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Metadata",
              "ReadOnly",
              "Operator",
              "Admin",
              "Owner"
            ]
          }
        },
        "defaultTemplate": "{% if $.availableLevels.items[0].value | length == 0 %} [] {% endif %}{% for item in $.availableLevels.items[0].value %}- {{ item }}\n{% endfor %}",
        "defaultTemplateInput": [
          "{\n  item: account {\n    turbot{\n      id\n    }\n  }\n}\n",
          "{\n  availableLevels: policyValues(filter:\"policyTypeLevel:self resourceId:{{ $.item.turbot.id }} policyTypeId:'tmod:@turbot/aws-iam#/policy/types/permissionsLevelsDefault'\") {\n    items {\n      value\n    }\n  }\n}\n"
        ]
      },
      "ec2PermissionsLevelsModifiers": {
        "title": "Modifiers",
        "icon": "fal-user-edit",
        "description": "A map of AWS API to Turbot Permission Level used to customize Turbot's standard permissions.\nYou can add, remove or redefine the mapping of AWS API operations to Turbot permissions levels here.\n\n**Note:** Modifiers are cumulative - if you add a permission to the Metadata level, it is also\nadded to ReadOnly, Operator and Admin. Modifier policies set here apply ONLY to the AWS level.\n\n```\nexample:\n  - \"glacier:createvault\": admin\n  - \"glacier:ListVaults\": metadata\n  - \"s3:DeleteBucket\": none\n```\n",
        "parent": "#/policy/types/ec2PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "$ref": "aws-iam#/definitions/awsModifierList"
        }
      },
      "ec2PermissionsLevelsAutoScalingAdministration": {
        "title": "Auto Scaling Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Auto Scaling Administration.",
        "parent": "#/policy/types/ec2PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "ec2PermissionsLevelsAmiPublishingAdministration": {
        "title": "Ami Publishing Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage AMI Publishing Administration.",
        "parent": "#/policy/types/ec2PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "ec2PermissionsLevelsMarketplaceSubscriptionAdministration": {
        "title": "Marketplace Subscription Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Marketplace Subscription Administration.",
        "parent": "#/policy/types/ec2PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "ec2PermissionsLevelsLocalAmisAdministration": {
        "title": "Local Amis Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Local AMIs Administration.",
        "parent": "#/policy/types/ec2PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "awsCompiledServicePermissions": {
        "title": "@turbot/aws-ec2",
        "icon": "fal-calculator",
        "description": "A calculated policy that Turbot uses to create a compiled\nlist of ALL permissions for AWS EC2 that is used as input\nto the control that manages the IAM stack.\n",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledServicePermissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "$ref": "aws-iam#/definitions/awsRightDefinitionList"
        }
      },
      "awsCompiledLockdownStatements": {
        "title": "@turbot/aws-ec2",
        "icon": "fal-traffic-light-go",
        "description": "A calculated policy that Turbot uses to create a compiled list\nof ALL lockdown policy statements for AWS EC2 that is used as\ninput to the stack that manages the Turbot IAM permissions objects.\n",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLockdownStatements",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "type": "array"
        }
      },
      "awsLevelsCompiled": {
        "title": "@turbot/aws-ec2",
        "description": "A calculated policy that Turbot uses to create a compiled\nlist of ALL permissions for AWS EC2 that is used as input to\nthe stack that manages the Turbot IAM permissions objects.\n",
        "icon": "fal-calculator",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "$ref": "aws-iam#/definitions/awsLevelDefinitionList"
        }
      },
      "awsCompiledApiBoundary": {
        "title": "@turbot/aws-ec2",
        "description": "A read-only policy generated by Turbot that lists the APIs that\nshould be added to the turbot-managed (hard) boundary policy,\nthereby enabling them to be assigned to users and roles.\nThis value will change depending on the value of the value of the\n`AWS > EC2 > Permissions > Lockdown > API Boundary` policy\n",
        "icon": "fal-border-outer",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevelsApiBoundary",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "type": "array"
        }
      },
      "ec2RegionsDefault": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 resources are supported for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS EC2 resources' Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/regionsDefault\") {\n    value\n  }\n}\n"
      },
      "ec2ApprovedRegionsDefault": {
        "title": "Approved Regions [Default]",
        "icon": "fal-check-double",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 resources are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS EC2 resources' Approved > Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/approvedRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "ec2TagsTemplate": {
        "title": "Tags Template [Default]",
        "icon": "fal-tags",
        "description": "A template used to generate the keys and values for AWS EC2 resources.\n\nBy default, all EC2 resource Tags > Template policies will use this value.\n",
        "parent": "#/resource/types/ec2",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/resourceTags",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws#/policy/types/defaultTagsTemplate\") {\n    value\n  }\n}\n"
      },
      "ec2TrustedAccounts": {
        "title": "Trusted Accounts [Default]",
        "icon": "fal-handshake",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Accounts that are trusted for access in the AWS EC2 policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"account\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"013122550996\"\n  - \"560741234067\"\n```\n\n**Note**: Setting the policy to `Empty` array will remove all accounts.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9]{12}|^\\*$"
          }
        },
        "defaultTemplate": "{% if $.trustedAccounts.value | length == 0 %}[]{% else %}{% for item in $.trustedAccounts.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedAccounts: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedAccounts\") {\n    value\n  }\n}\n"
      },
      "instanceActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Determine the action to take when an AWS EC2 instance, based on the `AWS > EC2 > Instance > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Instance > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "instanceActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/instanceActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "The number of days since the AWS EC2 instance\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Instance > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "instanceActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/instanceActive",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "The age after which the AWS EC2 instance\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Instance > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "instanceActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/instanceActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\ninstances to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Instance > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "instanceApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Determine the action to take when an AWS EC2 instance is not approved based on `AWS > EC2 > Instance > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Stop unapproved",
            "Enforce: Stop unapproved if new",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "instanceApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/instanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "A list of AWS regions in which AWS EC2 instances are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 instance is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Instance > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "instanceApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/instanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Determine whether the AWS EC2 instance is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 instance is not approved, it will be subject to the action specified in the `AWS > EC2 > Instance > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "instanceApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/instanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "The policy allows you to set instances to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 instance is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Instance > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "instanceApprovedInstanceTypes": {
        "title": "Instance Types",
        "icon": "fal-check-double",
        "parent": "#/policy/types/instanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "A list of instance types that the AWS EC2 instance is approved to use.\n\nThe expected format is an array of instance types. You may use the `*` and `?` wildcard characters (and [more](https://github.com/micromatch/micromatch#matching-features)).\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 instance is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Instance > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n\n**Note:** It is recommended to include instance types in this policy in the `AWS > EC2 > Permissions > Lockdown > Instance Types` policy as well, to ensure that the lockdown policy will not restrict these approved instance types.\n",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9.?*]+$"
          }
        }
      },
      "instanceApprovedPublicIp": {
        "title": "Public IP",
        "icon": "fal-check-double",
        "parent": "#/policy/types/instanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Determine whether the AWS EC2 instance is allowed to have a Public IP assigned.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 instance is not approved, it will be subject to the action specified in the `AWS > EC2 > Instance > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Approved if assigned",
            "Approved if not assigned"
          ],
          "example": [
            "Approved if assigned"
          ],
          "default": "Skip"
        }
      },
      "rootVolumeEncryptionAtRest": {
        "title": "Root Volume Encryption at Rest",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/instanceApproved",
        "targets": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the Encryption at Rest settings required for `AWS > EC2 > Instance.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(AWS > EC2 > Instance > Approved > Root Volume Encryption at Rest > *),\nraises an alarm, and takes the defined enforcement action\n",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "None or higher",
            "AWS managed key",
            "AWS managed key or higher",
            "Customer managed key",
            "Encryption at Rest > Customer Managed Key"
          ],
          "example": [
            "None or higher"
          ],
          "default": "None or higher"
        }
      },
      "rootVolumeEncryptionAtRestCustomerManagedKey": {
        "title": "Customer Managed Key",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/rootVolumeEncryptionAtRest",
        "targets": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the KMS key ID for encryption at rest.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(AWS > EC2 > Instance > Root Volume Encryption at Rest  > *),\nraises an alarm, and takes the defined enforcement action\n\nPlease make sure the key defined in the template has required permissions.\n\n```\nexample:\n  alias/aws/ebs\n  ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:key/ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:alias/aws/ebs\n```\n",
        "schema": {
          "anyOf": [
            {
              "type": "string",
              "pattern": "^alias/[a-zA-Z0-9:/_-]{1,249}$"
            },
            {
              "type": "string",
              "pattern": "^[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key/[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:alias/[a-zA-Z0-9:/_-]{1,249}$"
            }
          ],
          "tests": [
            {
              "description": "valid - if keyArn",
              "input": "arn:aws:kms:us-east-1:039305405804:key/ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasName",
              "input": "alias/aws/ebs"
            },
            {
              "description": "valid - if keyId",
              "input": "ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasArn",
              "input": "arn:aws:kms:us-east-1:039305405804:alias/aws/ebs"
            }
          ]
        },
        "defaultTemplate": "{{ $.defaultKey }}",
        "defaultTemplateInput": "{\n  defaultKey: policy(uri: \"aws-kms#/policy/types/keyDefaultCustomerManagedKey\")\n}\n"
      },
      "instanceApprovedImage": {
        "title": "Image",
        "icon": "fal-check-double",
        "parent": "#/policy/types/instanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Determine whether Approved > Image checking is enable for the instance\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Approved if ImageId in Image > AMI IDs",
            "Approved if Owner in Image > Publishers",
            "Approved if ImageId in Image > AMI IDs or Owner in Image > Publishers",
            "Approved if ImageId in Image > AMI IDs and Owner in Image > Publishers"
          ],
          "default": "Skip"
        }
      },
      "instanceApprovedImageAmiIds": {
        "title": "AMI IDs",
        "icon": "fal-check-double",
        "parent": "#/policy/types/instanceApprovedImage",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AMI IDs that are approved to be used to launch EC2 Instances.\n\nThe '*' wildcard may be used to allow all AMIs\n\nExamples:\n    - ami-ff81a385\n    - ami-12345678\n",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9.?*-]+$"
          }
        }
      },
      "instanceApprovedImagePublishers": {
        "title": "Publishers",
        "icon": "fal-check-double",
        "parent": "#/policy/types/instanceApprovedImage",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS Account ids who's images may be used to launch EC2 Instances.  This list may contain:\n  - AWS Account IDs - Approve all images from the specified account\n  - `local` - Approve local images (where the `OwnerId` is the account id of the targeted instance)\n  - `amazon` - Approve amazon images (where imageowneralias == `amazon`)\n  - `aws-marketplace`  - Approve marketplace images (where imageowneralias == `aws-marketplace`)\n\nThe '*' wildcard may be used to allow all AMIs from all publishers.\n\n  Examples:\n     - amazon         # allow all images with `amazon` ImageOwnerAlias\n     - 102837901569   # Allow all images from AWS Account 102837901569\n     - local          # Allow all local images\n",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9.?*-]+$"
          }
        }
      },
      "instanceCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 instance into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Instance > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "instanceCmdbAttributes": {
        "title": "Attributes",
        "icon": "fal-toggle-on",
        "parent": "#/policy/types/instanceCmdb",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "A list of attributes to retrieve data for in the CMDB control.\n\nAny properties that are enabled and then later disabled will be removed and no longer tracked for this resource.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DisableApiTermination",
              "EnclaveOptions",
              "InstanceInitiatedShutdownBehavior",
              "KernelId",
              "RamdiskId",
              "SriovNetSupport",
              "UserData"
            ]
          },
          "default": [
            "DisableApiTermination",
            "EnclaveOptions",
            "InstanceInitiatedShutdownBehavior",
            "KernelId",
            "RamdiskId",
            "SriovNetSupport",
            "UserData"
          ]
        }
      },
      "instanceConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "instanceConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/instanceConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "instanceConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/instanceConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "instanceDetailedMonitoring": {
        "title": "Detailed Monitoring",
        "icon": "fal-monitor-heart-rate",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceLogging",
        "description": "Define the Detailed Monitoring settings required for `AWS > EC2 > Instance > Detailed Monitoring`.\n\nIf detailed monitoring is enabled then Amazon EC2 console displays monitoring graphs with a 1-minute period for the instance.\n\n**Note**: Enabling detailed monitoring will incur additional charges.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Enforce: Disabled",
            "Enforce: Enabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "instanceProfile": {
        "title": "Instance Profile",
        "icon": "fal-user-circle",
        "description": "Determine whether the IAM instance profile is attached to AWS > EC2 > Instance.\n",
        "parent": "#/resource/types/instance",
        "targets": "#/resource/types/instance",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Instance profile attached",
            "Check: Instance Profile > Name attached",
            "Enforce: Attach Instance Profile > Name"
          ],
          "example": [
            "Check: Instance profile attached"
          ],
          "default": "Skip"
        }
      },
      "instanceProfileName": {
        "title": "Name",
        "icon": "fal-id-badge",
        "description": "The IAM instance profile name to be attached to the AWS EC2 instance.\n",
        "parent": "#/policy/types/instanceProfile",
        "targets": "#/resource/types/instance",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string"
        },
        "defaultTemplateInput": [
          "{\n  item: account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  serviceRoleDefaultEc2InstanceName: policyValue(resourceId:\"{{ $.item.turbot.id }}\" uri:\"tmod:@turbot/aws#/policy/types/serviceRolesDefaultEc2InstanceName\") {\n    value\n  }\n}\n"
        ],
        "defaultTemplate": "{{ $.serviceRoleDefaultEc2InstanceName.value }}"
      },
      "instanceMetadataService": {
        "title": "Metadata Service",
        "icon": "file-chart-line",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Instance metadata is data about your instance that you can use to configure or manage the running instance.\nInstance metadata is divided into categories, for example, host name, events, and security groups.\n\nInstance metadata can be accessed from a running instance using one of the following methods:\n\n  * Instance Metadata Service Version 1 (IMDSv1) – a request/response method\n\n  * Instance Metadata Service Version 2 (IMDSv2) – a session-oriented method\n\nBy default, you can use either IMDSv1 or IMDSv2, or both. However, the instance metadata service can be specifically\nconfigured to use IMDSv2 on each instance. When you specify that IMDSv2 must be used, IMDSv1 no longer works.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled for V1 and V2",
            "Check: Enabled for V2 only",
            "Enforce: Disabled",
            "Enforce: Enabled for V1 and V2",
            "Enforce: Enabled for V2 only"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "instanceMetadataServiceTokenHopLimit": {
        "title": "HTTP Token Hop Limit",
        "icon": "ski-jump",
        "parent": "#/policy/types/instanceMetadataService",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "The number of network hops that the metadata token can travel.\n\nThe larger the number, the further instance metadata requests can travel.\n\nMaximum is 64.\n",
        "schema": {
          "type": "number",
          "minimum": 1,
          "maximum": 64,
          "default": 1
        }
      },
      "instanceRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 instances are supported for use.\n\nAny instances in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "instanceSchedule": {
        "title": "Schedule",
        "icon": "fal-clock",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Set a schedule for starting and stopping an AWS EC2 instance.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\nthe tag will be in effect.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Business hours (8:00am - 6:00pm on weekdays)",
            "Enforce: Extended business hours (7:00am - 11:00pm on weekdays)",
            "Enforce: Stop for night (stop at 10:00pm every day)",
            "Enforce: Stop for weekend (stop at 10:00pm on Friday)"
          ],
          "example": [
            "Enforce: Business hours (8:00am - 6:00pm on weekdays)"
          ],
          "default": "Skip"
        }
      },
      "instanceScheduleTag": {
        "title": "Schedule Tag",
        "icon": "fal-clock",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Allow setting a schedule for starting and stopping an EC2 instance via the\nturbot_custom_schedule tag. If the schedule is invalid, no actions will be\ntaken against the instance.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\ninstance has a turbot_custom_schedule, then the schedule specified by the\ntag will be in effect.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Schedule per turbot_custom_schedule tag"
          ],
          "example": [
            "Enforce: Schedule per turbot_custom_schedule tag"
          ],
          "default": "Skip"
        }
      },
      "instanceTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "Determine the action to take when an AWS EC2 instance tags are not updated based on the `AWS > EC2 > Instance > Tags > *` policies.\n\nThe control ensure AWS EC2 instance tags include tags defined in `AWS > EC2 > Instance > Tags > Template`.\n\nTags not defined in Instance Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "instanceTagsInventoryCollection": {
        "title": "Inventory Collection",
        "icon": "fal-dolly-flatbed",
        "description": "Configuring AWS > EC2 > Instance with default SSM inventory collection instance tags.",
        "parent": "#/policy/types/instanceTags",
        "targets": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceTags",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "example": [
            "Disabled"
          ],
          "default": "Disabled"
        }
      },
      "instanceTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/instanceTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/instance"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 instance.\n\nTags not defined in Instance Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "instanceTerminationProtection": {
        "title": "Termination Protection",
        "icon": "fal-shield",
        "parent": "#/resource/types/instance",
        "targets": [
          "#/resource/types/instance"
        ],
        "category": "turbot#/control/categories/resourceDataProtection",
        "description": "Define the Termination Protection settings required for `AWS > EC2 > Instance > Termination Protection`.\n\nIt allows to prevent an instance from being terminated accidentally by someone using the AWS Management Console, the CLI, and the API.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Enforce: Disabled",
            "Enforce: Enabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "instanceUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/instance",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 instances that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Instance > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "instanceUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/instanceUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 50
        }
      },
      "keyPairActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Determine the action to take when an AWS EC2 key pair, based on the `AWS > EC2 > Key Pair > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Key Pair > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "keyPairActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/keyPairActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "The number of days since the AWS EC2 key pair\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Key Pair > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "keyPairActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/keyPairActive",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "The age after which the AWS EC2 key pair\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Key Pair > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "keyPairActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/keyPairActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nkeyPairs to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Key Pair > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "keyPairApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Determine the action to take when an AWS EC2 key pair is not approved based on `AWS > EC2 > Key Pair > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "keyPairApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/keyPairApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "A list of AWS regions in which AWS EC2 key pairs are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 key pair is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Key Pair > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "keyPairApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/keyPairApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Determine whether the AWS EC2 key pair is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 key pair is not approved, it will be subject to the action specified in the `AWS > EC2 > Key Pair > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "keyPairApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/keyPairApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "The policy allows you to set key pairs to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 key pair is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Key Pair > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "keyPairCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 key pair into the CMDB.\n\nThe [CMDB](https://turbot.com/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB. All policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to \"Enforce: Enabled\".\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to \"Enforce: Disabled\".\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "keyPairRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 key pairs are supported for use.\n\nAny key pairs in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "keyPairTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "Determine the action to take when an AWS EC2 key pair tags are not updated based on the `AWS > EC2 > Key Pair > Tags > *` policies.\n\nThe control ensure AWS EC2 key pair tags include tags defined in `AWS > EC2 > Key Pair > Tags > Template`.\n\nTags not defined in Key Pair Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "keyPairTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/keyPairTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/keyPair"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 key pair.\n\nTags not defined in Key Pair Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "keyPairUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/keyPair",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 key pairs that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Key Pair > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "keyPairUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/keyPairUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 5000
        }
      },
      "launchConfigurationActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "Determine the action to take when an AWS EC2 launch configuration, based on the `AWS > EC2 > Launch Configuration > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Configuration > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "launchConfigurationActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/launchConfigurationActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "The number of days since the AWS EC2 launch configuration\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Configuration > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "launchConfigurationActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/launchConfigurationActive",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "The age after which the AWS EC2 launch configuration\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Configuration > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "launchConfigurationApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "Determine the action to take when an AWS EC2 launch configuration is not approved based on `AWS > EC2 > Launch Configuration > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "launchConfigurationApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/launchConfigurationApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "A list of AWS regions in which AWS EC2 launch configurations are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 launch configuration is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Launch Configuration > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "launchConfigurationApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/launchConfigurationApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchConfiguration"
        ],
        "description": "Determine whether the AWS EC2 launch configuration is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 launch configuration is not approved, it will be subject to the action specified in the `AWS > EC2 > Launch Configuration > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "launchConfigurationCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 launch configuration into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Launch Configuration > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "launchConfigurationRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 launch configurations are supported for use.\n\nAny launch configurations in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "launchConfigurationUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/launchConfiguration",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 launch configurations that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Launch Configuration > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "launchConfigurationUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/launchConfigurationUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 200
        }
      },
      "launchTemplateActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Determine the action to take when an AWS EC2 launch template, based on the `AWS > EC2 > Launch Template > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Template > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/launchTemplateActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "The number of days since the AWS EC2 launch template\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Template > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/launchTemplateActive",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "The age after which the AWS EC2 launch template\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Template > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Determine the action to take when an AWS EC2 launch template is not approved based on `AWS > EC2 > Launch Template > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/launchTemplateApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "A list of AWS regions in which AWS EC2 launch templates are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 launch template is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Launch Template > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "launchTemplateApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/launchTemplateApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Determine whether the AWS EC2 launch template is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 launch template is not approved, it will be subject to the action specified in the `AWS > EC2 > Launch Template > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "launchTemplateCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 launch template into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Launch Template > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "launchTemplateRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 launch templates are supported for use.\n\nAny launch templates in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "launchTemplateTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Determine the action to take when an AWS EC2 launch template tags are not updated based on the `AWS > EC2 > Launch Template > Tags > *` policies.\n\nThe control ensure AWS EC2 launch template tags include tags defined in `AWS > EC2 > Launch Template > Tags > Template`.\n\nTags not defined in Launch Template Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/launchTemplateTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 launch template.\n\nTags not defined in Launch Template Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "launchTemplateUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/launchTemplate",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 launch templates that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Launch Template > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/launchTemplateUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 5000
        }
      },
      "launchTemplateVersionActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "Determine the action to take when an AWS EC2 launch template version, based on the `AWS > EC2 > Launch Template Version > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Template Version > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateVersionActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/launchTemplateVersionActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "The number of days since the AWS EC2 launch template version\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Template Version > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateVersionActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/launchTemplateVersionActive",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "The age after which the AWS EC2 launch template version\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Launch Template Version > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateVersionApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "Determine the action to take when an AWS EC2 launch template version is not approved based on `AWS > EC2 > Launch Template Version > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateVersionApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/launchTemplateVersionApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "A list of AWS regions in which AWS EC2 launch template versions are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 launch template version is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Launch Template Version > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "launchTemplateVersionApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/launchTemplateVersionApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/launchTemplateVersion"
        ],
        "description": "Determine whether the AWS EC2 launch template version is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 launch template version is not approved, it will be subject to the action specified in the `AWS > EC2 > Launch Template Version > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "launchTemplateVersionCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/launchTemplate"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 launch template version into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Launch Template Version > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "launchTemplateVersionRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 launch template versions are supported for use.\n\nAny launch template versions in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "launchTemplateVersionUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/launchTemplateVersion",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 launch template versions that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Launch Template Version > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "launchTemplateVersionUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/launchTemplateVersionUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 50000000
        }
      },
      "networkInterfaceActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Determine the action to take when an AWS EC2 network interface, based on the `AWS > EC2 > Network Interface > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Interface > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "networkInterfaceActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/networkInterfaceActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "The number of days since the AWS EC2 network interface\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Interface > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "networkInterfaceActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/networkInterfaceActive",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "The age after which the AWS EC2 network interface\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Interface > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "networkInterfaceActiveAttached": {
        "title": "Attached",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/networkInterfaceActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Determine whether the Network Interface is active, based on whether it is attached to any other resource types.\n\nThe Active control determines whether the resource is in active use, and if not, has the ability to delete / cleanup the resource. When running an automated compliance environment, it's common to end up with a wide range of alarms that are difficult and time consuming to clear. The Active control brings automated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the resource (`AWS > EC2 > Network Interface > Active > *`), raises an alarm, and takes the defined enforcement action. Each Active sub-policy can calculate a status of active, inactive or skipped. Generally, if the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered Unapproved.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if attached",
            "Force active if attached",
            "Force inactive if unattached"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "networkInterfaceApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Determine the action to take when an AWS EC2 network interface is not approved based on `AWS > EC2 > Network Interface > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "networkInterfaceApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/networkInterfaceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "A list of AWS regions in which AWS EC2 network interfaces are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 network interface is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Network Interface > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "networkInterfaceApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/networkInterfaceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Determine whether the AWS EC2 network interface is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 network interface is not approved, it will be subject to the action specified in the `AWS > EC2 > Network Interface > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "networkInterfaceCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 network interface into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Network Interface > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "networkInterfaceConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "networkInterfaceConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/networkInterfaceConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "networkInterfaceConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/networkInterfaceConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "networkInterfaceRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 network interfaces are supported for use.\n\nAny network interfaces in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "networkInterfaceTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "Determine the action to take when an AWS EC2 network interface tags are not updated based on the `AWS > EC2 > Network Interface > Tags > *` policies.\n\nThe control ensure AWS EC2 network interface tags include tags defined in `AWS > EC2 > Network Interface > Tags > Template`.\n\nTags not defined in Network Interface Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "networkInterfaceTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/networkInterfaceTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkInterface"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 network interface.\n\nTags not defined in Network Interface Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "networkInterfaceUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/networkInterface",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 network interfaces that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Network Interface > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "networkInterfaceUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/networkInterfaceUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 5000
        }
      },
      "networkLoadBalancerAccessLogging": {
        "title": "Access Logging",
        "icon": "fal-file-download",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Define the Access Logging settings required for `AWS > EC2 > Network Load Balancer`.\n\n`AWS > EC2 > Network Load Balancer` provides access logs that capture\ndetailed information about requests sent to your load\nbalancer. Each log contains information such as the time the\nrequest was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these\naccess logs to analyze traffic patterns and troubleshoot\nissues.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Check: Enabled to Access Logging > Bucket",
            "Enforce: Disabled",
            "Enforce: Enabled to Access Logging > Bucket"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerAccessLoggingBucket": {
        "title": "Bucket",
        "icon": "fab-bitbucket",
        "parent": "#/policy/types/networkLoadBalancerAccessLogging",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "The name of an S3 Bucket to which the Bucket\naccess logs will be delivered.\n\nThe S3 Bucket must already exist and the S3 service must be allowed write access.\nThe bucket can reside in any account but must be in the same region as the Load Balancer.\n\nexample:\n```\n  testbucket\n  turbotbucket\n```\n",
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9._-]{1,255}$"
        },
        "defaultTemplateInput": "{\n  turbotLoggingBucket: policy(uri: \"aws#/policy/types/loggingBucketDefault\")\n}\n",
        "defaultTemplate": "{% if $.turbotLoggingBucket %}\"{{ $.turbotLoggingBucket }}\"{% else %}\"\"{% endif %}"
      },
      "networkLoadBalancerAccessLoggingKeyPrefix": {
        "title": "Key Prefix",
        "icon": "fal-key",
        "parent": "#/policy/types/networkLoadBalancerAccessLogging",
        "category": "turbot#/control/categories/resourceLogging",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "An optional S3 key prefix to which the `AWS > EC2 > Network Load Balancer` access logs will be written.\n\nThe file names of the access logs use the following format:\n`bucket[/prefix]/AWSLogs/aws-account-id/elasticloadbalancing/region/yyyy/mm/dd/aws-account-id_elasticloadbalancing_region_load-balancer-id_end-time_ip-address_random-string.log.gz`\n",
        "schema": {
          "type": "string",
          "pattern": "^.{1,200}$",
          "default": ""
        }
      },
      "networkLoadBalancerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 network load balancer, based on the `AWS > EC2 > Network Load Balancer > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Load Balancer > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/networkLoadBalancerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "The number of days since the AWS EC2 network load balancer\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/networkLoadBalancerActive",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "The age after which the AWS EC2 network load balancer\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/networkLoadBalancerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nnetworkLoadBalancers to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Network Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 network load balancer is not approved based on `AWS > EC2 > Network Load Balancer > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/networkLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "A list of AWS regions in which AWS EC2 network load balancers are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 network load balancer is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Network Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "networkLoadBalancerApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/networkLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Determine whether the AWS EC2 network load balancer is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 network load balancer is not approved, it will be subject to the action specified in the `AWS > EC2 > Network Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "networkLoadBalancerApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/networkLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "The policy allows you to set network load balancers to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 network load balancer is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Network Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 network load balancer into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Network Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "networkLoadBalancerConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "networkLoadBalancerConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/networkLoadBalancerConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "networkLoadBalancerConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/networkLoadBalancerConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "networkLoadBalancerRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 network load balancers are supported for use.\n\nAny network load balancers in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "networkLoadBalancerTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 network load balancer tags are not updated based on the `AWS > EC2 > Network Load Balancer > Tags > *` policies.\n\nThe control ensure AWS EC2 network load balancer tags include tags defined in `AWS > EC2 > Network Load Balancer > Tags > Template`.\n\nTags not defined in Network Load Balancer Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/networkLoadBalancerTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 network load balancer.\n\nTags not defined in Network Load Balancer Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "networkLoadBalancerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/networkLoadBalancer",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 network load balancers that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Network Load Balancer > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "networkLoadBalancerUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/networkLoadBalancerUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 20
        }
      },
      "snapshotActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Determine the action to take when an AWS EC2 snapshot, based on the `AWS > EC2 > Snapshot > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Snapshot > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "snapshotActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/snapshotActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "The number of days since the AWS EC2 snapshot\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Snapshot > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "snapshotActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/snapshotActive",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "The age after which the AWS EC2 snapshot\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Snapshot > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "snapshotActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/snapshotActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nsnapshots to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Snapshot > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "snapshotApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Determine the action to take when an AWS EC2 snapshot is not approved based on `AWS > EC2 > Snapshot > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "snapshotApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/snapshotApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "A list of AWS regions in which AWS EC2 snapshots are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 snapshot is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Snapshot > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "snapshotApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/snapshotApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Determine whether the AWS EC2 snapshot is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 snapshot is not approved, it will be subject to the action specified in the `AWS > EC2 > Snapshot > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "snapshotApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/snapshotApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "The policy allows you to set snapshots to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 snapshot is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Snapshot > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "snapshotEncryptionAtRest": {
        "title": "Encryption at Rest",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/snapshotApproved",
        "targets": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the Encryption at Rest settings required for `AWS > EC2 > Snapshot`.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > EC2 > Snapshot > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action\n",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "None or higher",
            "AWS managed key",
            "AWS managed key or higher",
            "Customer managed key",
            "Encryption at Rest > Customer Managed Key"
          ],
          "example": [
            "None or higher"
          ],
          "default": "None or higher"
        }
      },
      "snapshotEncryptionAtRestCustomerManagedKey": {
        "title": "Customer Managed Key",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/snapshotEncryptionAtRest",
        "targets": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the KMS key ID for encryption at rest.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > EC2 > Snapshot > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action\n\nPlease make sure the key defined in the template has required permissions.\n\n```\nexample:\n  alias/aws/ebs\n  ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:key/ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:alias/aws/ebs\n```\n",
        "schema": {
          "anyOf": [
            {
              "type": "string",
              "pattern": "^alias/[a-zA-Z0-9:/_-]{1,249}$"
            },
            {
              "type": "string",
              "pattern": "^[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key/[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:alias/[a-zA-Z0-9:/_-]{1,249}$"
            }
          ],
          "tests": [
            {
              "description": "valid - if keyArn",
              "input": "arn:aws:kms:us-east-1:039305405804:key/ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasName",
              "input": "alias/aws/ebs"
            },
            {
              "description": "valid - if keyId",
              "input": "ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasArn",
              "input": "arn:aws:kms:us-east-1:039305405804:alias/aws/ebs"
            }
          ]
        },
        "defaultTemplate": "{{ $.defaultKey }}",
        "defaultTemplateInput": "{\n  defaultKey: policy(uri: \"aws-kms#/policy/types/keyDefaultCustomerManagedKey\")\n}\n"
      },
      "snapshotCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 snapshot into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Snapshot > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "snapshotConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "snapshotConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/snapshotConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "snapshotConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/snapshotConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "snapshotRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 snapshots are supported for use.\n\nAny snapshots in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "snapshotTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "Determine the action to take when an AWS EC2 snapshot tags are not updated based on the `AWS > EC2 > Snapshot > Tags > *` policies.\n\nThe control ensure AWS EC2 snapshot tags include tags defined in `AWS > EC2 > Snapshot > Tags > Template`.\n\nTags not defined in Snapshot Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "snapshotTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/snapshotTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 snapshot.\n\nTags not defined in Snapshot Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "snapshotTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/snapshot",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Manage trusted access for AWS EC2 Snapshots.\n\nAWS allows EC2 Snapshots to be shared with specific AWS accounts.\nThis policy allows you to configure whether such sharing is allowed, and to which accounts.\n\nIf set to `Enforce`, access to non-trusted accounts will be removed.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Trusted Access > Accounts",
            "Enforce: Trusted Access > Accounts"
          ],
          "example": [
            "Check: Trusted Access > Accounts"
          ],
          "default": "Skip"
        }
      },
      "snapshotTrustedAccessAccounts": {
        "title": "Accounts",
        "icon": "fal-user-check",
        "parent": "#/policy/types/snapshotTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/snapshot"
        ],
        "description": "A list of AWS account IDs that are allowed to have access",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^[0-9]{12}$|^\\*$|^all$)"
          }
        },
        "defaultTemplate": "{% if $.accounts | length == 0 %}[]{% endif %}{% for item in $.accounts %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  accounts: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2TrustedAccounts\")\n}\n"
      },
      "snapshotUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/snapshot",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 snapshots that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Snapshot > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "snapshotUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/snapshotUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 1000
        }
      },
      "targetGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Determine the action to take when an AWS EC2 target group, based on the `AWS > EC2 > Target Group > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Target Group > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "targetGroupActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/targetGroupActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "The number of days since the AWS EC2 target group\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Target Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "targetGroupActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/targetGroupActive",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "The age after which the AWS EC2 target group\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Target Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "targetGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Determine the action to take when an AWS EC2 target group is not approved based on `AWS > EC2 > Target Group > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "targetGroupApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/targetGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "A list of AWS regions in which AWS EC2 target groups are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 target group is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Target Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "targetGroupApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/targetGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Determine whether the AWS EC2 target group is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 target group is not approved, it will be subject to the action specified in the `AWS > EC2 > Target Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "targetGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 target group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Target Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "targetGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "targetGroupConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/targetGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "targetGroupConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/targetGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "targetGroupRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 target groups are supported for use.\n\nAny target groups in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "targetGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "Determine the action to take when an AWS EC2 target group tags are not updated based on the `AWS > EC2 > Target Group > Tags > *` policies.\n\nThe control ensure AWS EC2 target group tags include tags defined in `AWS > EC2 > Target Group > Tags > Template`.\n\nTags not defined in Target Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "targetGroupTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/targetGroupTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/targetGroup"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 target group.\n\nTags not defined in Target Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "targetGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/targetGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 target groups that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Target Group > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "targetGroupUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/targetGroupUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 3000
        }
      },
      "volumeActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Determine the action to take when an AWS EC2 volume, based on the `AWS > EC2 > Volume > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Volume > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Detach, snapshot and delete inactive with 1 day warning",
            "Enforce: Detach, snapshot and delete inactive with 3 days warning",
            "Enforce: Detach, snapshot and delete inactive with 7 days warning",
            "Enforce: Detach, snapshot and delete inactive with 14 days warning",
            "Enforce: Detach, snapshot and delete inactive with 30 days warning",
            "Enforce: Detach, snapshot and delete inactive with 60 days warning",
            "Enforce: Detach, snapshot and delete inactive with 90 days warning",
            "Enforce: Detach, snapshot and delete inactive with 180 days warning",
            "Enforce: Detach, snapshot and delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "volumeActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/volumeActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "The number of days since the AWS EC2 volume\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Volume > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "volumeActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/volumeActive",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "The age after which the AWS EC2 volume\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Volume > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "volumeActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/volumeActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nvolumes to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Volume > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "volumeActiveAttached": {
        "title": "Attached",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/volumeActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Determine whether the Volume is active, based on whether it is attached to any other resource types.\n\nThe Active control determines whether the resource is in active use, and if not, has the ability to delete / cleanup the resource. When running an automated compliance environment, it's common to end up with a wide range of alarms that are difficult and time consuming to clear. The Active control brings automated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the resource (`AWS > EC2 > Volume > Active > *`), raises an alarm, and takes the defined enforcement action. Each Active sub-policy can calculate a status of active, inactive or skipped. Generally, if the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered Unapproved.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if attached",
            "Force active if attached",
            "Force inactive if unattached"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "volumeApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Determine the action to take when an AWS EC2 volume is not approved based on `AWS > EC2 > Volume > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Detach unapproved if new",
            "Enforce: Detach, snapshot and delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "volumeApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/volumeApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "A list of AWS regions in which AWS EC2 volumes are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 volume is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Volume > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "volumeApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/volumeApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Determine whether the AWS EC2 volume is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 volume is not approved, it will be subject to the action specified in the `AWS > EC2 > Volume > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "volumeApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/volumeApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "The policy allows you to set volumes to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 volume is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Volume > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "volumeApprovedVolumeTypes": {
        "title": "Volume Types",
        "icon": "fal-check-double",
        "parent": "#/policy/types/volumeApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "A list of volume types that the AWS EC2 volume is approved to use.\n\nThe expected format is an array of volume types. You may use the `*` and `?` wildcard characters (and [more](https://github.com/micromatch/micromatch#matching-features)).\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 volume is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Volume > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n\n**Note:** It is recommended to include volume types in this policy in the `AWS > EC2 > Permissions > Lockdown > Volume Types` policy as well, to ensure that the lockdown policy will not restrict these approved volume types.\n",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9.?*]+$"
          }
        }
      },
      "volumeEncryptionAtRest": {
        "title": "Encryption at Rest",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/volumeApproved",
        "targets": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the Encryption at Rest settings required for `AWS > EC2 > Volume`.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > EC2 > Volume > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action\n",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "None or higher",
            "AWS managed key",
            "AWS managed key or higher",
            "Customer managed key",
            "Encryption at Rest > Customer Managed Key"
          ],
          "example": [
            "None or higher"
          ],
          "default": "None or higher"
        }
      },
      "volumeEncryptionAtRestCustomerManagedKey": {
        "title": "Customer Managed Key",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/volumeEncryptionAtRest",
        "targets": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the KMS key ID for encryption at rest.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > EC2 > Volume > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action\n\nPlease make sure the key defined in the template has required permissions.\n\n```\nexample:\n  alias/aws/ebs\n  ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:key/ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:alias/aws/ebs\n```\n",
        "schema": {
          "anyOf": [
            {
              "type": "string",
              "pattern": "^alias/[a-zA-Z0-9:/_-]{1,249}$"
            },
            {
              "type": "string",
              "pattern": "^[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key/[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:alias/[a-zA-Z0-9:/_-]{1,249}$"
            }
          ],
          "tests": [
            {
              "description": "valid - if keyArn",
              "input": "arn:aws:kms:us-east-1:039305405804:key/ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasName",
              "input": "alias/aws/ebs"
            },
            {
              "description": "valid - if keyId",
              "input": "ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasArn",
              "input": "arn:aws:kms:us-east-1:039305405804:alias/aws/ebs"
            }
          ]
        },
        "defaultTemplate": "{{ $.defaultKey }}",
        "defaultTemplateInput": "{\n  defaultKey: policy(uri: \"aws-kms#/policy/types/keyDefaultCustomerManagedKey\")\n}\n"
      },
      "volumeCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 volume into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Volume > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "volumeCmdbAttributes": {
        "title": "Attributes",
        "icon": "fal-toggle-on",
        "parent": "#/policy/types/volumeCmdb",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "A list of attributes to retrieve data for in the CMDB control.\n\nAny properties that are enabled and then later disabled will be removed and no longer tracked for this resource.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "AutoEnableIO",
              "ProductCodes"
            ]
          },
          "default": [
            "AutoEnableIO",
            "ProductCodes"
          ]
        }
      },
      "volumeConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "volumeConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/volumeConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "volumeConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/volumeConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "volumeRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 volumes are supported for use.\n\nAny volumes in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "volumeTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "Determine the action to take when an AWS EC2 volume tags are not updated based on the `AWS > EC2 > Volume > Tags > *` policies.\n\nThe control ensure AWS EC2 volume tags include tags defined in `AWS > EC2 > Volume > Tags > Template`.\n\nTags not defined in Volume Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "volumeTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/volumeTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/volume"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 volume.\n\nTags not defined in Volume Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "volumeUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/volume",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 volumes that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Volume > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "volumeUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/volumeUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 1000
        }
      },
      "loadBalancerListenerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Determine the action to take when an AWS EC2 load balancer listener, based on the `AWS > EC2 > Load Balancer Listener > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Load Balancer Listener > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "loadBalancerListenerActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/loadBalancerListenerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "The number of days since the AWS EC2 load balancer listener\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Load Balancer Listener > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "loadBalancerListenerActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/loadBalancerListenerActive",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "The age after which the AWS EC2 load balancer listener\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Load Balancer Listener > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "loadBalancerListenerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Determine the action to take when an AWS EC2 load balancer listener is not approved based on `AWS > EC2 > Load Balancer Listener > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "loadBalancerListenerApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/loadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "A list of AWS regions in which AWS EC2 load balancer listeners are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 load balancer listener is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "loadBalancerListenerApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/loadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Determine whether the AWS EC2 load balancer listener is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 load balancer listener is not approved, it will be subject to the action specified in the `AWS > EC2 > Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "loadBalancerListenerApprovedPorts": {
        "title": "Ports",
        "icon": "fal-check-double",
        "parent": "#/policy/types/loadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Determine whether the AWS EC2 Load Balancer Listener is allowed to have a port assigned.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 load balancer listener is not approved, it will be subject to the action specified in the `AWS > EC2 > Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n\n\nExample\n```\n  - 443\n  - 1001-65535\n  - 80\n  - 400-999\n```\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "1-65535"
          ]
        }
      },
      "loadBalancerListenerApprovedProtocols": {
        "title": "Protocols",
        "icon": "fal-check-double",
        "parent": "#/policy/types/loadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Determine whether the AWS EC2 Load Balancer Listener is allowed to have a protocol assigned.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 load balancer listener is not approved, it will be subject to the action specified in the `AWS > EC2 > Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "HTTP",
              "HTTPS",
              "TCP",
              "TLS",
              "UDP",
              "TCP_UDP"
            ]
          },
          "default": [
            "HTTP",
            "HTTPS",
            "TCP",
            "TLS",
            "UDP",
            "TCP_UDP"
          ]
        }
      },
      "loadBalancerListenerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 load balancer listener into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Load Balancer Listener > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "loadBalancerListenerConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "loadBalancerListenerConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/loadBalancerListenerConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "loadBalancerListenerConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/loadBalancerListenerConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "loadBalancerListenerRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 load balancer listeners are supported for use.\n\nAny load balancer listeners in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "loadBalancerListenerSslPolicy": {
        "title": "SSL Policy",
        "icon": "fal-lock-alt",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Determine the action to take when an AWS EC2 load balancer listener is not using an allowed SSL policy.\n\nIf a load balancer listener is not using an allowed SSL policy and this policy is set to `Enforce: Set to SSL Policy > Default`, the load balancer listener will be updated to use the SSL policy selected in the `AWS > EC2 > Load Balancer Listener > SSL Policy > Allowed` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Set in SSL Policy > Allowed",
            "Enforce: Set to SSL Policy > Default"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "loadBalancerListenerSslPolicyAllowed": {
        "title": "Allowed",
        "icon": "fal-tasks",
        "parent": "#/policy/types/loadBalancerListenerSslPolicy",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "A list of AWS SSL policies that the AWS EC2 load balancer listener is allowed to use.\n\nFor a complete list of SSL policies and which ciphers and protocols they support, please see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies).\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ELBSecurityPolicy-2015-05",
              "ELBSecurityPolicy-2016-08",
              "ELBSecurityPolicy-FS-1-1-2019-08",
              "ELBSecurityPolicy-FS-1-2-2019-08",
              "ELBSecurityPolicy-FS-1-2-Res-2019-08",
              "ELBSecurityPolicy-FS-2018-06",
              "ELBSecurityPolicy-TLS-1-0-2015-04",
              "ELBSecurityPolicy-TLS-1-1-2017-01",
              "ELBSecurityPolicy-TLS-1-2-2017-01",
              "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
            ]
          },
          "default": [
            "ELBSecurityPolicy-2015-05",
            "ELBSecurityPolicy-2016-08",
            "ELBSecurityPolicy-FS-1-1-2019-08",
            "ELBSecurityPolicy-FS-1-2-2019-08",
            "ELBSecurityPolicy-FS-1-2-Res-2019-08",
            "ELBSecurityPolicy-FS-2018-06",
            "ELBSecurityPolicy-TLS-1-0-2015-04",
            "ELBSecurityPolicy-TLS-1-1-2017-01",
            "ELBSecurityPolicy-TLS-1-2-2017-01",
            "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
          ]
        }
      },
      "loadBalancerListenerSslPolicyDefault": {
        "title": "Default",
        "icon": "fal-ballot-check",
        "parent": "#/policy/types/loadBalancerListenerSslPolicy",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Define the default AWS SSL policy the AWS EC2 load balancer listener should use if it's not currently using an allowed SSL policy.\n\nThe SSL policy selected in this policy should also be allowed in the `AWS > EC2 > Load Balancer Listener > SSL Policy > Allowed` policy, else the control will move into an `invalid` state while trying to enforce this policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "ELBSecurityPolicy-2015-05",
            "ELBSecurityPolicy-2016-08",
            "ELBSecurityPolicy-FS-1-1-2019-08",
            "ELBSecurityPolicy-FS-1-2-2019-08",
            "ELBSecurityPolicy-FS-1-2-Res-2019-08",
            "ELBSecurityPolicy-FS-2018-06",
            "ELBSecurityPolicy-TLS-1-0-2015-04",
            "ELBSecurityPolicy-TLS-1-1-2017-01",
            "ELBSecurityPolicy-TLS-1-2-2017-01",
            "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
          ],
          "example": [
            "ELBSecurityPolicy-2016-08"
          ],
          "default": "ELBSecurityPolicy-2016-08"
        }
      },
      "loadBalancerListenerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/loadBalancerListener",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Configure the number of AWS EC2 load balancer listeners that can be used for this applicationLoadBalancer and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Load Balancer Listener > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "loadBalancerListenerUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/loadBalancerListenerUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Maximum number of items that can be created for this applicationLoadBalancer.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 50
        }
      },
      "listenerRuleActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "Determine the action to take when an AWS EC2 listener rule, based on the `AWS > EC2 > Listener Rule > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Listener Rule > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "listenerRuleActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/listenerRuleActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "The number of days since the AWS EC2 listener rule\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Listener Rule > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "listenerRuleActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/listenerRuleActive",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "The age after which the AWS EC2 listener rule\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Listener Rule > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "listenerRuleActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/listenerRuleActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nlistenerRules to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Listener Rule > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "listenerRuleApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "Determine the action to take when an AWS EC2 listener rule is not approved based on `AWS > EC2 > Listener Rule > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "listenerRuleApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/listenerRuleApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "A list of AWS regions in which AWS EC2 listener rules are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 listener rule is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Listener Rule > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "listenerRuleApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/listenerRuleApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "Determine whether the AWS EC2 listener rule is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 listener rule is not approved, it will be subject to the action specified in the `AWS > EC2 > Listener Rule > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "listenerRuleApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/listenerRuleApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "The policy allows you to set listener rules to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 listener rule is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Listener Rule > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "listenerRuleCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/loadBalancerListener"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 listener rule into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Listener Rule > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "listenerRuleConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "listenerRuleConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/listenerRuleConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "listenerRuleConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/listenerRuleConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/listenerRule"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "listenerRuleRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 listener rules are supported for use.\n\nAny listener rules in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "listenerRuleUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/listenerRule",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Configure the number of AWS EC2 listener rules that can be used for this applicationLoadBalancer and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Listener Rule > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "listenerRuleUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/listenerRuleUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer"
        ],
        "description": "Maximum number of items that can be created for this applicationLoadBalancer.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 100
        }
      },
      "classicLoadBalancerListenerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Determine the action to take when an AWS EC2 classic load balancer listener, based on the `AWS > EC2 > Classic Load Balancer Listener > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer Listener > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerListenerActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/classicLoadBalancerListenerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "The number of days since the AWS EC2 classic load balancer listener\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer Listener > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerListenerActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/classicLoadBalancerListenerActive",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "The age after which the AWS EC2 classic load balancer listener\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Classic Load Balancer Listener > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerListenerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Determine the action to take when an AWS EC2 classic load balancer listener is not approved based on `AWS > EC2 > Classic Load Balancer Listener > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerListenerApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/classicLoadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "A list of AWS regions in which AWS EC2 classic load balancer listeners are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 classic load balancer listener is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Classic Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "classicLoadBalancerListenerApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/classicLoadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Determine whether the AWS EC2 classic load balancer listener is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 classic load balancer listener is not approved, it will be subject to the action specified in the `AWS > EC2 > Classic Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "classicLoadBalancerListenerApprovedProtocols": {
        "title": "Protocols",
        "icon": "fal-check-double",
        "parent": "#/policy/types/classicLoadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Determine whether the AWS EC2 Classic Load Balancer Listener is allowed to have a protocol assigned.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 classic load balancer listener is not approved, it will be subject to the action specified in the `AWS > EC2 > Classic Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "HTTP",
              "HTTPS",
              "TCP",
              "SSL"
            ]
          },
          "default": [
            "HTTP",
            "HTTPS",
            "TCP",
            "SSL"
          ]
        }
      },
      "classicLoadBalancerListenerApprovedInstanceProtocols": {
        "title": "Instance Protocols",
        "icon": "fal-check-double",
        "parent": "#/policy/types/classicLoadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "A list of instance protocol that the AWS EC2 classic load balancer listener is approved to use.\n\nThe expected format is an array of instance protocol. You may use the `*` and `?` wildcard characters (and [more](https://github.com/micromatch/micromatch#matching-features)).\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 classic load balancer listener is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Classic Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^(HTTP|HTTPS|TCP|SSL)$"
          }
        }
      },
      "classicLoadBalancerListenerApprovedPorts": {
        "title": "Ports",
        "icon": "fal-check-double",
        "parent": "#/policy/types/classicLoadBalancerListenerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Determine whether the AWS EC2 Classic Load Balancer Listener is allowed to have a port assigned.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 classic load balancer listener is not approved, it will be subject to the action specified in the `AWS > EC2 > Load Balancer Listener > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\nExample\n```\n  - 443\n  - 1001-65535\n  - 80\n  - 400-999\n```\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "1-65535"
          ]
        }
      },
      "classicLoadBalancerListenerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 classic load balancer listener into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Classic Load Balancer Listener > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "classicLoadBalancerListenerRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 classic load balancer listeners are supported for use.\n\nAny classic load balancer listeners in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "classicLoadBalancerListenerSslPolicy": {
        "title": "SSL Policy",
        "icon": "fal-lock-alt",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Determine the action to take when an AWS EC2 classic load balancer listener is not using an allowed SSL policy.\n\nIf a classic load balancer listener is not using an allowed SSL policy and this policy is set to `Enforce: Set to SSL Policy > Default`, the classic load balancer listener will be updated to use the SSL policy selected in the `AWS > EC2 > Classic Load Balancer Listener > SSL Policy > Allowed` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Set in SSL Policy > Allowed",
            "Enforce: Set to SSL Policy > Default"
          ],
          "example": [
            "Check: Set in SSL Policy > Allowed"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerListenerSslPolicyAllowed": {
        "title": "Allowed",
        "icon": "fal-tasks",
        "parent": "#/policy/types/classicLoadBalancerListenerSslPolicy",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "A list of AWS SSL policies that the AWS EC2 classic load balancer listener is allowed to use.\n\nFor a complete list of SSL policies and which ciphers and protocols they support, please see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-policy-table.html.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Custom",
              "ELBSample-ELBDefaultNegotiationPolicy",
              "ELBSample-OpenSSLDefaultNegotiationPolicy",
              "ELBSecurityPolicy-2011-08",
              "ELBSecurityPolicy-2014-01",
              "ELBSecurityPolicy-2014-10",
              "ELBSecurityPolicy-2015-02",
              "ELBSecurityPolicy-2015-03",
              "ELBSecurityPolicy-2015-05",
              "ELBSecurityPolicy-2016-08",
              "ELBSecurityPolicy-TLS-1-1-2017-01",
              "ELBSecurityPolicy-TLS-1-2-2017-01"
            ]
          },
          "default": [
            "Custom",
            "ELBSample-ELBDefaultNegotiationPolicy",
            "ELBSample-OpenSSLDefaultNegotiationPolicy",
            "ELBSecurityPolicy-2011-08",
            "ELBSecurityPolicy-2014-01",
            "ELBSecurityPolicy-2014-10",
            "ELBSecurityPolicy-2015-02",
            "ELBSecurityPolicy-2015-03",
            "ELBSecurityPolicy-2015-05",
            "ELBSecurityPolicy-2016-08",
            "ELBSecurityPolicy-TLS-1-1-2017-01",
            "ELBSecurityPolicy-TLS-1-2-2017-01"
          ],
          "example": [
            "ELBSecurityPolicy-2016-08"
          ]
        }
      },
      "classicLoadBalancerListenerSslPolicyDefault": {
        "title": "Default",
        "icon": "fal-tasks",
        "parent": "#/policy/types/classicLoadBalancerListenerSslPolicy",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/classicLoadBalancerListener"
        ],
        "description": "Define the default AWS SSL policy the AWS EC2 classic load balancer listener should use if it's not currently using an allowed SSL policy.\n\nThe SSL policy selected in this policy should also be allowed in the `AWS > EC2 > Classic Load Balancer Listener > SSL Policy > Allowed` policy, else the control will move into an `invalid` state while trying to enforce this policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "ELBSample-ELBDefaultNegotiationPolicy",
            "ELBSample-OpenSSLDefaultNegotiationPolicy",
            "ELBSecurityPolicy-2011-08",
            "ELBSecurityPolicy-2014-01",
            "ELBSecurityPolicy-2014-10",
            "ELBSecurityPolicy-2015-02",
            "ELBSecurityPolicy-2015-03",
            "ELBSecurityPolicy-2015-05",
            "ELBSecurityPolicy-2016-08",
            "ELBSecurityPolicy-TLS-1-1-2017-01",
            "ELBSecurityPolicy-TLS-1-2-2017-01"
          ],
          "default": "ELBSecurityPolicy-2016-08",
          "example": [
            "ELBSecurityPolicy-2016-08"
          ]
        }
      },
      "classicLoadBalancerListenerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/classicLoadBalancerListener",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Configure the number of AWS EC2 classic load balancer listeners that can be used for this classicLoadBalancer and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Classic Load Balancer Listener > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "classicLoadBalancerListenerUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/classicLoadBalancerListenerUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "#/resource/types/classicLoadBalancer"
        ],
        "description": "Maximum number of items that can be created for this classicLoadBalancer.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 50
        }
      },
      "gatewayLoadBalancerActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 gateway load balancer, based on the `AWS > EC2 > Gateway Load Balancer > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Gateway Load Balancer > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "gatewayLoadBalancerActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/gatewayLoadBalancerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "The number of days since the AWS EC2 gateway load balancer\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Gateway Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "gatewayLoadBalancerActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/gatewayLoadBalancerActive",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "The age after which the AWS EC2 gateway load balancer\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Gateway Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "gatewayLoadBalancerActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/gatewayLoadBalancerActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\ngatewayLoadBalancers to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > EC2 > Gateway Load Balancer > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "gatewayLoadBalancerApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 gateway load balancer is not approved based on `AWS > EC2 > Gateway Load Balancer > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "gatewayLoadBalancerApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/gatewayLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "A list of AWS regions in which AWS EC2 gateway load balancers are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 gateway load balancer is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > EC2 > Gateway Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-ec2#/policy/types/ec2ApprovedRegionsDefault\")\n}\n"
      },
      "gatewayLoadBalancerApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/gatewayLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Determine whether the AWS EC2 gateway load balancer is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 gateway load balancer is not approved, it will be subject to the action specified in the `AWS > EC2 > Gateway Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > EC2 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > EC2 > Enabled"
        }
      },
      "gatewayLoadBalancerApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/gatewayLoadBalancerApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "The policy allows you to set gateway load balancers to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS EC2 gateway load balancer is not matched by the approved list, it will be subject to the action specified in the `AWS > EC2 > Gateway Load Balancer > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "gatewayLoadBalancerCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS EC2 gateway load balancer into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > EC2 > Gateway Load Balancer > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "gatewayLoadBalancerRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS EC2 gateway load balancers are supported for use.\n\nAny gateway load balancers in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "allOf": [
            {
              "$ref": "aws#/definitions/regionNameMatcherList"
            },
            {
              "default": [
                "ap-southeast-2",
                "eu-west-1",
                "sa-east-1",
                "us-east-1",
                "us-west-2"
              ]
            }
          ]
        }
      },
      "gatewayLoadBalancerTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "Determine the action to take when an AWS EC2 gateway load balancer tags are not updated based on the `AWS > EC2 > Gateway Load Balancer > Tags > *` policies.\n\nThe control ensure AWS EC2 gateway load balancer tags include tags defined in `AWS > EC2 > Gateway Load Balancer > Tags > Template`.\n\nTags not defined in Gateway Load Balancer Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "gatewayLoadBalancerTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/gatewayLoadBalancerTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/gatewayLoadBalancer"
        ],
        "description": "The template is used to generate the keys and values for AWS EC2 gateway load balancer.\n\nTags not defined in Gateway Load Balancer Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-ec2#/policy/types/ec2TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "gatewayLoadBalancerUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/gatewayLoadBalancer",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS EC2 gateway load balancers that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > EC2 > Gateway Load Balancer > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "gatewayLoadBalancerUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/gatewayLoadBalancerUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 20
        }
      }
    }
  },
  "resource": {
    "types": {
      "ami": {
        "title": "AMI",
        "icon": "fal-list-alt",
        "description": "Amazon Machine Image (AMI) resource for AWS EC2 Service.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/computeServer",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.ImageId }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:image/{{ $.ImageId }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "ImageId": "ami-0022c769",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "ami-0022c769",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:image/ami-0022c769"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/ami"
        },
        "terraform": {
          "type": "aws_ami",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.ImageId }}",
          "propertyMap": {
            "id": "ImageId"
          }
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/ami"
            },
            {
              "type": "object",
              "required": [
                "ImageId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/ami"
            },
            {
              "type": "object",
              "properties": {
                "ImageId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "applicationLoadBalancer": {
        "title": "Application Load Balancer",
        "icon": "fal-share-alt",
        "description": "AWS EC2 Application Load Balancer Resource",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "akas": "- \"{{ $.LoadBalancerArn }}\"\n",
          "resourceParentAka": "arn:{{$.turbot.custom.aws.partition}}::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}",
          "title": "{{$.LoadBalancerName}}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188",
              "LoadBalancerName": "my-load-balancer",
              "LoadBalancerId": "50dc6c495c0c9188",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012",
              "title": "my-load-balancer"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/applicationLoadBalancer"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/applicationLoadBalancer"
            },
            {
              "type": "object",
              "required": [
                "LoadBalancerName",
                "LoadBalancerArn"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/applicationLoadBalancer"
            },
            {
              "type": "object",
              "properties": {
                "LoadBalancerName": {
                  "type": "null"
                }
              }
            }
          ]
        },
        "terraform": {
          "type": "aws_lb",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.LoadBalancerArn}}",
          "propertyMap": {
            "arn": "LoadBalancerArn",
            "name": "LoadBalancerName",
            "load_balancer_type": "Type"
          },
          "stateDefaults": {
            "load_balancer_type": "application"
          }
        }
      },
      "autoScalingGroup": {
        "title": "Auto Scaling Group",
        "icon": "fal-list-ul",
        "description": "AWS EC2 Auto Scaling Group.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/other",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "akas": "- \"{{$.AutoScalingGroupARN}}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}",
          "title": "{{$.AutoScalingGroupName}}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "AutoScalingGroupARN": "arn:aws:autoscaling:us-west-2:492552618977:autoScalingGroup:402b2ef5-4968-4ccb-9208-c7980983b2bc:autoScalingGroupName/test03",
              "AutoScalingGroupName": "test01",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 492552618977,
                    "regionName": "us-west-2",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:autoscaling:us-west-2:492552618977:autoScalingGroup:402b2ef5-4968-4ccb-9208-c7980983b2bc:autoScalingGroupName/test03"
              ],
              "resourceParentAka": "arn:aws::us-west-2:492552618977",
              "title": "test01"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/autoScalingGroup"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/autoScalingGroup"
            },
            {
              "type": "object",
              "required": [
                "AutoScalingGroupName",
                "AutoScalingGroupARN"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/autoScalingGroup"
            },
            {
              "type": "object",
              "properties": {
                "AutoScalingGroupName": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "classicLoadBalancer": {
        "title": "Classic Load Balancer",
        "icon": "fal-share-alt",
        "description": "AWS EC2 Classic Load Balancer Resource",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/networkingLoadBalancer",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.LoadBalancerName }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:elasticloadbalancing:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:loadbalancer/{{ $.LoadBalancerName }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "LoadBalancerName": "my-load-balancer",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "my-load-balancer",
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/my-load-balancer"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/classicLoadBalancer"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/classicLoadBalancer"
            },
            {
              "type": "object",
              "required": [
                "LoadBalancerName"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/classicLoadBalancer"
            },
            {
              "type": "object",
              "properties": {
                "LoadBalancerName": {
                  "type": "null"
                }
              }
            }
          ]
        },
        "terraform": {
          "type": "aws_elb",
          "stateIdTemplate": "{{$.LoadBalancerName}}",
          "propertyMap": {
            "name": "LoadBalancerName"
          }
        }
      },
      "ec2": {
        "title": "EC2",
        "icon": "fal-server",
        "description": "AWS EC2 Service.",
        "parent": "aws#/resource/types/aws",
        "category": "turbot#/resource/categories/cloudService",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "akas": "- \"arn:{{$.turbot.custom.aws.partition}}:ec2:{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}\"\n",
          "resourceParentAka": "\"arn:{{$.turbot.custom.aws.partition}}::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}\"\n",
          "title": "EC2"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "name": "EC2",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012",
              "title": "EC2"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/ec2"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/ec2"
            },
            {
              "type": "object",
              "required": [
                "name"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/ec2"
            },
            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "instance": {
        "title": "Instance",
        "icon": "fal-server",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/computeServer",
        "resourceParents": "aws#/resource/types/region",
        "interfaces": [
          "turbot#/resource/interfaces/grants"
        ],
        "metadataTemplates": {
          "title": "{{ $.InstanceId }}",
          "akas": "- \"arn:{{$.turbot.custom.aws.partition}}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:instance/{{ $.InstanceId }}\"\n",
          "resourceParentAka": "arn:{{$.turbot.custom.aws.partition}}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "InstanceId": "i-1234567890abcdef0",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "i-1234567890abcdef0",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:instance/i-1234567890abcdef0"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "terraform": {
          "type": "aws_instance",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.InstanceId }}",
          "propertyMap": {
            "id": "InstanceId"
          }
        },
        "schema": {
          "$ref": "#/definitions/instance"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/instance"
            },
            {
              "type": "object",
              "required": [
                "InstanceId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/instance"
            },
            {
              "type": "object",
              "properties": {
                "InstanceId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "keyPair": {
        "title": "Key Pair",
        "icon": "fal-key",
        "description": "KeyPair resource for EC2.",
        "parent": "#/resource/types/ec2",
        "resourceParents": "aws#/resource/types/region",
        "category": "turbot#/resource/categories/security",
        "metadataTemplates": {
          "title": "{{ $.KeyName }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:key-pair/{{ $.KeyName }}\"\n- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:key-pair/{{ $.KeyPairId }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "KeyName": "test",
              "KeyPairId": "key-022ad73cb3dface07",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-west-2",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "test",
              "akas": [
                "arn:aws:ec2:us-west-2:123456789012:key-pair/key-022ad73cb3dface07",
                "arn:aws:ec2:us-west-2:123456789012:key-pair/test"
              ],
              "resourceParentAka": "arn:aws::us-west-2:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/keyPair"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/keyPair"
            },
            {
              "type": "object",
              "required": [
                "KeyName",
                "KeyPairId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/keyPair"
            },
            {
              "type": "object",
              "properties": {
                "KeyName": {
                  "type": "null"
                },
                "KeyPairId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "launchConfiguration": {
        "title": "Launch Configuration",
        "icon": "fal-clipboard",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/other",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.LaunchConfigurationName }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:autoscaling:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:launchConfigurationName/{{ $.LaunchConfigurationName }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "LaunchConfigurationName": "test01",
              "LaunchConfigurationARN": "arn:aws:autoscaling:us-west-2:492552618977:launchConfiguration:55770a63-460c-4459-a94c-f3d7c770a40b:launchConfigurationName/test01",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 492552618977,
                    "regionName": "us-west-2",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "test01",
              "akas": [
                "arn:aws:autoscaling:us-west-2:492552618977:launchConfigurationName/test01"
              ],
              "resourceParentAka": "arn:aws::us-west-2:492552618977"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/launchConfiguration"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/launchConfiguration"
            },
            {
              "type": "object",
              "required": [
                "LaunchConfigurationName"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/launchConfiguration"
            },
            {
              "type": "object",
              "properties": {
                "LaunchConfigurationName": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "launchTemplate": {
        "title": "Launch Template",
        "icon": "fal-server",
        "description": "AWS EC2 Launch Template Resource.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/compute",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.LaunchTemplateName }}",
          "akas": "- \"arn:{{$.turbot.custom.aws.partition}}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:launch-template/{{ $.LaunchTemplateId }}\"\n",
          "resourceParentAka": "arn:{{$.turbot.custom.aws.partition}}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "LaunchTemplateName": "DBServersTemplate",
              "LaunchTemplateId": "lt-0c45b5e061ec98456",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "DBServersTemplate",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:launch-template/lt-0c45b5e061ec98456"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/launchTemplate"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/launchTemplate"
            },
            {
              "type": "object",
              "required": [
                "LaunchTemplateName",
                "LaunchTemplateId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/launchTemplate"
            },
            {
              "type": "object",
              "properties": {
                "LaunchTemplateName": {
                  "type": "null"
                },
                "LaunchTemplateId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "launchTemplateVersion": {
        "title": "Launch Template Version",
        "icon": "fal-clipboard",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/compute",
        "resourceParents": "#/resource/types/launchTemplate",
        "metadataTemplates": {
          "title": "{{ $.VersionNumber }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:launch-template/{{ $.LaunchTemplateId }}:launch-template-version/{{ $.VersionNumber }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:launch-template/{{ $.LaunchTemplateId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "LaunchTemplateId": "lt-0c45b5e061ec98456",
              "VersionNumber": 1,
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": 1,
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:launch-template/lt-0c45b5e061ec98456:launch-template-version/1"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:launch-template/lt-0c45b5e061ec98456"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/launchTemplateVersion"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/launchTemplateVersion"
            },
            {
              "type": "object",
              "required": [
                "VersionNumber",
                "LaunchTemplateId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/launchTemplateVersion"
            },
            {
              "type": "object",
              "properties": {
                "LaunchTemplateId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "networkInterface": {
        "title": "Network Interface",
        "icon": "fal-server",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/computeServer",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.NetworkInterfaceId }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:network-interface/{{ $.NetworkInterfaceId }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "NetworkInterfaceId": "eni-068f6677372d4865b",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "eni-068f6677372d4865b",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:network-interface/eni-068f6677372d4865b"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "terraform": {
          "type": "aws_network_interface",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.NetworkInterfaceId }}",
          "propertyMap": {
            "id": "NetworkInterfaceId"
          }
        },
        "schema": {
          "$ref": "#/definitions/networkInterface"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/networkInterface"
            },
            {
              "type": "object",
              "required": [
                "NetworkInterfaceId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/networkInterface"
            },
            {
              "type": "object",
              "properties": {
                "NetworkInterfaceId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "networkLoadBalancer": {
        "title": "Network Load Balancer",
        "icon": "fal-network-wired",
        "description": "AWS EC2 Network Load Balancer Resource.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/networkingLoadBalancer",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.LoadBalancerName }}",
          "akas": "- {{ $.LoadBalancerArn }}\n",
          "resourceParentAka": "arn:{{$.turbot.custom.aws.partition}}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "LoadBalancerName": "my-load-balancer",
              "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/my-load-balancer/50dc6c495c0c9188",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "my-load-balancer",
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/my-load-balancer/50dc6c495c0c9188"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/networkLoadBalancer"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/networkLoadBalancer"
            },
            {
              "type": "object",
              "required": [
                "LoadBalancerName",
                "LoadBalancerArn"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/networkLoadBalancer"
            },
            {
              "type": "object",
              "properties": {
                "LoadBalancerName": {
                  "type": "null"
                }
              }
            }
          ]
        },
        "terraform": {
          "type": "aws_lb",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.LoadBalancerArn}}",
          "propertyMap": {
            "arn": "LoadBalancerArn",
            "name": "LoadBalancerName",
            "load_balancer_type": "Type"
          },
          "stateDefaults": {
            "load_balancer_type": "network"
          }
        }
      },
      "snapshot": {
        "title": "Snapshot",
        "icon": "fal-archive",
        "description": "AWS EC2 Snapshot resource.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/storageObject",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.SnapshotId }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:snapshot/{{ $.SnapshotId }}\"\n",
          "resourceParentAka": "\"arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}\"\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "SnapshotId": "snap-1234567890abcdef0",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "snap-1234567890abcdef0",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:snapshot/snap-1234567890abcdef0"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "terraform": {
          "type": "aws_ebs_snapshot",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.SnapshotId }}",
          "propertyMap": {
            "id": "SnapshotId",
            "owner_id": "OwnerId"
          }
        },
        "schema": {
          "$ref": "#/definitions/snapshot"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/snapshot"
            },
            {
              "type": "object",
              "required": [
                "SnapshotId",
                "OwnerId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/snapshot"
            },
            {
              "type": "object",
              "properties": {
                "SnapshotId": {
                  "type": "null"
                },
                "OwnerId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "targetGroup": {
        "title": "Target Group",
        "icon": "fal-object-ungroup",
        "description": "AWS EC2 Target Group Resource.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/networkingLoadBalancer",
        "resourceParents": [
          "aws#/resource/types/region",
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer",
          "#/resource/types/gatewayLoadBalancer"
        ],
        "metadataTemplates": {
          "title": "{{ $.TargetGroupName }}",
          "akas": "- \"{{ $.TargetGroupArn }}\"\n",
          "resourceParentAka": "{% if $.LoadBalancerArns | length == 0 %}\"arn:{{$.turbot.custom.aws.partition}}::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}\"{% else %}\"{{ $.LoadBalancerArns[0] }}\"{% endif %}\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Load Balancer as a parent.",
            "input": {
              "TargetGroupName": "my-targets",
              "LoadBalancerArns": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/my-load-balancer/50dc6c495c0c9188"
              ],
              "TargetGroupArn": "arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/my-targets/73e2d6bc24d8a067",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "my-targets",
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/my-targets/73e2d6bc24d8a067"
              ],
              "resourceParentAka": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/my-load-balancer/50dc6c495c0c9188"
            }
          },
          {
            "description": "Valid - Region as a parent base case.",
            "input": {
              "TargetGroupName": "my-targets",
              "LoadBalancerArns": [],
              "TargetGroupArn": "arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/my-targets/73e2d6bc24d8a066",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "my-targets",
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/my-targets/73e2d6bc24d8a066"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/targetGroup"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/targetGroup"
            },
            {
              "type": "object",
              "required": [
                "TargetGroupName",
                "TargetGroupArn"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/targetGroup"
            },
            {
              "type": "object",
              "properties": {
                "TargetGroupName": {
                  "type": "null"
                }
              }
            }
          ]
        },
        "terraform": {
          "type": "aws_lb_target_group",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.TargetGroupArn}}",
          "propertyMap": {
            "name": "TargetGroupName",
            "arn": "TargetGroupArn"
          },
          "optionalPropertyMap": {
            "vpc_id": "VpcId",
            "target_type": "TargetType"
          },
          "stateDefaults": {
            "lambda_multi_value_headers_enabled": false,
            "proxy_protocol_v2": false
          },
          "associations": [
            {
              "type": "aws_lb_target_group_attachment",
              "parentPath": "TargetHealthDescriptions",
              "stateIdTemplate": "{{$.turbot.terraform.id}}",
              "metadataMap": {
                "id": "terraform.id",
                "target_group_arn": "parent.TargetGroupArn"
              },
              "propertyMap": {
                "target_id": "Target.Id",
                "port": "Target.Port"
              },
              "metadataTemplates": {
                "akas": "{{ $.turbot.parent.TargetGroupArn }}"
              }
            }
          ]
        }
      },
      "volume": {
        "title": "Volume",
        "icon": "fal-hdd",
        "description": "AWS EC2 Volume Resource.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/computeDisk",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.VolumeId }}",
          "akas": "- \"arn:{{$.turbot.custom.aws.partition}}:ec2:{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}:volume/{{ $.VolumeId }}\"\n",
          "resourceParentAka": "\"arn:{{$.turbot.custom.aws.partition}}::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}\"\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "VolumeId": "vol-1234567890abcdef0",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "vol-1234567890abcdef0",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:volume/vol-1234567890abcdef0"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "terraform": {
          "type": "aws_ebs_volume",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.VolumeId }}",
          "propertyMap": {
            "id": "VolumeId"
          }
        },
        "schema": {
          "$ref": "#/definitions/volume"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/volume"
            },
            {
              "type": "object",
              "required": [
                "VolumeId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/volume"
            },
            {
              "type": "object",
              "properties": {
                "VolumeId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "loadBalancerListener": {
        "title": "Load Balancer Listener",
        "icon": "fal-clipboard-list-check",
        "description": "AWS EC2 Load Balancer Listener Resource.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/networkingLoadBalancer",
        "resourceParents": [
          "#/resource/types/applicationLoadBalancer",
          "#/resource/types/networkLoadBalancer"
        ],
        "metadataTemplates": {
          "title": "{{ $.ListenerArn.split('/')[2] }}",
          "akas": "- \"{{ $.ListenerArn }}\"\n",
          "resourceParentAka": "{{ $.LoadBalancerArn }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid",
            "input": {
              "ListenerArn": "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
              "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-east-2:986325076436:loadbalancer/app/turbot-test-application-LB-IF/05a33d85c8a8db8e",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 986325076436,
                    "regionName": "us-east-2",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
              "akas": [
                "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c"
              ],
              "resourceParentAka": "arn:aws:elasticloadbalancing:us-east-2:986325076436:loadbalancer/app/turbot-test-application-LB-IF/05a33d85c8a8db8e"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/loadBalancerListener"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/loadBalancerListener"
            },
            {
              "type": "object",
              "required": [
                "ListenerArn"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/loadBalancerListener"
            },
            {
              "type": "object",
              "required": [
                "ListenerArn"
              ]
            }
          ]
        },
        "terraform": {
          "type": "aws_lb_listener",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.ListenerArn}}",
          "propertyMap": {
            "load_balancer_arn": "LoadBalancerArn",
            "arn": "ListenerArn"
          },
          "associations": [
            {
              "type": "aws_lb_listener_certificate",
              "parentPath": "Certificates",
              "stateIdTemplate": "{{ $.turbot.parent.ListenerArn }}_{{ $.CertificateArn }}",
              "metadataMap": {
                "listener_arn": "parent.ListenerArn"
              },
              "propertyMap": {
                "certificate_arn": "CertificateArn"
              },
              "metadataTemplates": {
                "akas": "{{ $.turbot.parent.ListenerArn }}"
              }
            }
          ]
        }
      },
      "listenerRule": {
        "title": "Listener Rule",
        "icon": "fal-directions",
        "description": "AWS EC2 Listener Rule Resource.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/networkingLoadBalancer",
        "resourceParents": [
          "#/resource/types/loadBalancerListener"
        ],
        "metadataTemplates": {
          "title": "{{ $.RuleArn }}",
          "akas": "- \"{{ $.RuleArn }}\"\n",
          "resourceParentAka": "\"{{ $.ListenerArn }}\"\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "RuleArn": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 492552618977,
                    "regionName": "us-west-2",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee"
              ],
              "resourceParentAka": "arn:aws:elasticloadbalancing:us-east-2:986325076436:listener/app/turbot-test-application-LB-IF/05a33d85c8a8db8e/be349e217c6f0a3c",
              "title": "arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/listenerRule"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/listenerRule"
            },
            {
              "type": "object",
              "required": [
                "RuleArn"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/listenerRule"
            },
            {
              "type": "object",
              "required": [
                "RuleArn"
              ]
            }
          ]
        },
        "terraform": {
          "type": "aws_lb_listener_rule",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.RuleArn}}",
          "propertyMap": {
            "listener_arn": "ListenerArn",
            "arn": "RuleArn"
          }
        }
      },
      "classicLoadBalancerListener": {
        "title": "Classic Load Balancer Listener",
        "icon": "fal-assistive-listening-systems",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/networkingLoadBalancer",
        "resourceParents": "#/resource/types/classicLoadBalancer",
        "metadataTemplates": {
          "title": "{{ $.turbot.custom.loadBalancerName }} {{ $.Protocol}}:{{ $.LoadBalancerPort}}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:elasticloadbalancing:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:listener/{{ $.turbot.custom.loadBalancerName }}/{{ $.Protocol }}_{{ $.LoadBalancerPort }}\"\n",
          "resourceParentAka": "\"arn:{{ $.turbot.custom.aws.partition }}:elasticloadbalancing:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:loadbalancer/{{ $.turbot.custom.loadBalancerName }}\"\n"
        },
        "schema": {
          "$ref": "#/definitions/classicLoadBalancerListener"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/classicLoadBalancerListener"
            },
            {
              "type": "object",
              "required": [
                "LoadBalancerName",
                "Protocol",
                "LoadBalancerPort"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/classicLoadBalancerListener"
            },
            {
              "type": "object",
              "properties": {
                "LoadBalancerName": {
                  "type": "null"
                },
                "Protocol": {
                  "type": "null"
                },
                "LoadBalancerPort": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "gatewayLoadBalancer": {
        "title": "Gateway Load Balancer",
        "icon": "fal-dungeon",
        "description": "Gateway Load Balancer resource in AWS Ec2 service.",
        "parent": "#/resource/types/ec2",
        "category": "turbot#/resource/categories/networkingLoadBalancer",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.LoadBalancerName | json | safe }}",
          "akas": "- {% if $.LoadBalancerArn %}\"{{ $.LoadBalancerArn }}\"{% else %}\"arn:{{ $.turbot.custom.aws.partition }}:elasticloadbalancing:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:loadbalancer/gwy/{{ $.LoadBalancerName }}/{{ $.LoadBalancerId }}\"{% endif %}\n",
          "resourceParentAka": "\"arn:{{$.turbot.metadata.aws.partition}}::{{ $.turbot.metadata.aws.regionName }}:{{ $.turbot.metadata.aws.accountId }}\"\n"
        },
        "schema": {
          "$ref": "#/definitions/gatewayLoadBalancer"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/gatewayLoadBalancer"
            },
            {
              "type": "object",
              "required": [
                "LoadBalancerArn",
                "LoadBalancerName"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/gatewayLoadBalancer"
            },
            {
              "type": "object",
              "properties": {
                "LoadBalancerArn": {
                  "type": "null"
                },
                "LoadBalancerName": {
                  "type": "null"
                },
                "VpcId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      }
    }
  },
  "permission": {
    "types": {
      "ec2": {
        "title": "EC2",
        "parent": "aws#/permission/types/aws",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iam"
      }
    }
  },
  "build": "20210518145851951"
}