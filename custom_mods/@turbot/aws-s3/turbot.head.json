{
  "$id": "tmod:@turbot/aws-s3",
  "title": "@turbot/aws-s3",
  "author": "Turbot HQ, Inc",
  "version": "5.8.1",
  "license": "For LICENSE see https://turbot.com/license",
  "peerDependencies": {
    "@turbot/aws": "^5.0.0",
    "@turbot/turbot": "^5.22.0",
    "@turbot/turbot-iam": "^5.1.0",
    "@turbot/aws-iam": "^5.1.0",
    "@turbot/aws-kms": "^5.0.0"
  },
  "scripts": {
    "prepack": "./build.sh"
  },
  "data": [
    {
      "permission": "s3:AbortMultipartUpload",
      "grant": "Operator",
      "resourceType": "Object",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:CreateBucket",
      "grant": "Operator",
      "resourceType": "Bucket",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:DeleteAccountPublicAccessBlock",
      "grant": "Admin",
      "resourceType": "s3Account",
      "operationType": "CreateOrUpdate",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:DeleteBucket",
      "grant": "Operator",
      "resourceType": "Bucket",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:DeleteBucketCors",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "TEMPORARY permission since CloudTrail events are different"
    },
    {
      "permission": "s3:DeleteBucketEncryption",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "TEMPORARY permission since CloudTrail events are different"
    },
    {
      "permission": "s3:DeleteBucketLifecycle",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "TEMPORARY permission since CloudTrail events are different"
    },
    {
      "permission": "s3:DeleteBucketPolicy",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:DeleteBucketReplication",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "TEMPORARY permission since CloudTrail events are different"
    },
    {
      "permission": "s3:DeleteBucketTagging",
      "grant": "Operator",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "TEMPORARY permission since CloudTrail events are different"
    },
    {
      "permission": "s3:DeleteBucketWebsite",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Website management is safe but requires anonymous access to be granted to the bucket for it to work."
    },
    {
      "permission": "s3:DeleteObject",
      "grant": "Operator",
      "resourceType": "Object",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:DeleteObjectVersion",
      "grant": "Operator",
      "resourceType": "Object",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:DeleteReplicationConfiguration",
      "grant": "Whitelist",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "s3PermissionsLevelsCrossReplicationAdministration",
      "help": "Admins can delete the replication configuration set for the bucket."
    },
    {
      "permission": "s3:GetAccelerateConfiguration",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetAccountPublicAccessBlock",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetAnalyticsConfiguration",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Covers ListAnalyticsConfigurations."
    },
    {
      "permission": "s3:GetBucketAcl",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketCORS",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketLocation",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketLogging",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketNotification",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketPolicy",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketPolicyStatus",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketPublicAccessBlock",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketRequestPayment",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketTagging",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketVersioning",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetBucketWebsite",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetEncryptionConfiguration",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetInventoryConfiguration",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Covers ListInventoryConfigurations."
    },
    {
      "permission": "s3:GetLifecycleConfiguration",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetMetricsConfiguration",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Covers ListMetricsConfigurations."
    },
    {
      "permission": "s3:GetObject",
      "grant": "ReadOnly",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetObjectAcl",
      "grant": "Metadata",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetObjectTagging",
      "grant": "Metadata",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetObjectTorrent",
      "grant": "ReadOnly",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetObjectVersion",
      "grant": "ReadOnly",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetObjectVersionAcl",
      "grant": "Metadata",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetObjectVersionTagging",
      "grant": "Metadata",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Retrieves tags of earlier object version. - http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGETtagging.html."
    },
    {
      "permission": "s3:GetObjectVersionTorrent",
      "grant": "ReadOnly",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:GetReplicationConfiguration",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:HeadBucket",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Helps to determine if a bucket exists and you have permission to access it."
    },
    {
      "permission": "s3:HeadObject",
      "grant": "ReadOnly",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "The HEAD operation retrieves metadata from an object without returning the object itself. This depends in s3:GetObject permission. This operation is useful if you're only interested in an object's metadata."
    },
    {
      "permission": "s3:ListAllMyBuckets",
      "grant": "Metadata",
      "resourceType": "Bucket",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:ListBucket",
      "grant": "Metadata",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:ListBucketMultipartUploads",
      "grant": "Metadata",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:ListBucketVersions",
      "grant": "Metadata",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:ListMultipartUploadParts",
      "grant": "Metadata",
      "resourceType": "Object",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:PutAccelerateConfiguration",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can manage transfer acceleration for buckets."
    },
    {
      "permission": "s3:PutAccountPublicAccessBlock",
      "grant": "Admin",
      "resourceType": "s3Account",
      "operationType": "CreateOrUpdate",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:PutAnalyticsConfiguration",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Covers DeleteAnalyticsConfiguration."
    },
    {
      "permission": "s3:PutBucketAcl",
      "grant": "Whitelist",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "s3PermissionsLevelsAclAdministration",
      "help": "Per AWS guidelines Turbot considers ACLs deprecated but still supports them through an option - http://blogs.aws.amazon.com/security/post/TxPOJBY6FE360K/IAM-policies-and-Bucket-Policies-and-ACLs-Oh-My-Controlling-Access-to-S3-Resourc"
    },
    {
      "permission": "s3:PutBucketCORS",
      "grant": "Whitelist",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "s3:PutBucketCors",
      "dependency": "s3PermissionsLevelsCorsAdministration",
      "help": "Can be used for cross-account access."
    },
    {
      "permission": "s3:PutBucketLogging",
      "grant": "Whitelist",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "s3PermissionsLevelsAccessLoggingAdministration",
      "help": "Turbot automates logging settings."
    },
    {
      "permission": "s3:PutBucketNotification",
      "grant": "Operator",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:PutBucketPolicy",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:PutBucketPublicAccessBlock",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:PutBucketRequestPayment",
      "grant": "None",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Can be used for cross-account access."
    },
    {
      "permission": "s3:PutBucketTagging",
      "grant": "Operator",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Covers DeleteBucketTagging."
    },
    {
      "permission": "s3:PutBucketVersioning",
      "grant": "Operator",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:PutBucketWebsite",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Website management is safe but requires anonymous access to be granted to the bucket for it to work."
    },
    {
      "permission": "s3:PutEncryptionConfiguration",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "s3:PutBucketEncryption",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "s3:PutInventoryConfiguration",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Covers DeleteInventoryConfiguration."
    },
    {
      "permission": "s3:PutLifecycleConfiguration",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "s3:PutBucketLifecycle",
      "dependency": "",
      "help": "Bucket management is restricted to Admins. Covers PutBucketLifecycle; PutBucketLifecycleConfiguration; DeleteBucketLifecycle."
    },
    {
      "permission": "s3:PutMetricsConfiguration",
      "grant": "Admin",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Covers DeleteMetricsConfiguration."
    },
    {
      "permission": "s3:PutObject",
      "grant": "Operator",
      "resourceType": "Object",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Covers CompleteMultipartUpload; CreateMultipartUpload; UploadPart; UploadPartCopy."
    },
    {
      "permission": "s3:PutObjectAcl",
      "grant": "Whitelist",
      "resourceType": "Object",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "s3PermissionsLevelsAclAdministration",
      "help": "Per AWS guidelines Turbot considers ACLs deprecated but still supports them through an option - http://blogs.aws.amazon.com/security/post/TxPOJBY6FE360K/IAM-policies-and-Bucket-Policies-and-ACLs-Oh-My-Controlling-Access-to-S3-Resourc"
    },
    {
      "permission": "s3:PutObjectTagging",
      "grant": "Operator",
      "resourceType": "Object",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Covers DeleteObjectTagging."
    },
    {
      "permission": "s3:PutObjectVersionAcl",
      "grant": "Whitelist",
      "resourceType": "Object",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "s3PermissionsLevelsAclAdministration",
      "help": "Per AWS guidelines Turbot considers ACLs deprecated but still supports them through an option - http://blogs.aws.amazon.com/security/post/TxPOJBY6FE360K/IAM-policies-and-Bucket-Policies-and-ACLs-Oh-My-Controlling-Access-to-S3-Resourc"
    },
    {
      "permission": "s3:PutObjectVersionTagging",
      "grant": "Operator",
      "resourceType": "Object",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Enables to associate tag to object based on versionId. http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUTtagging.html."
    },
    {
      "permission": "s3:PutReplicationConfiguration",
      "grant": "Whitelist",
      "resourceType": "Bucket",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "s3:PutBucketReplication",
      "dependency": "s3PermissionsLevelsCrossReplicationAdministration",
      "help": "In a versioning-enabled bucket Admins can create a replication configuration (or replace an existing one if present) and can also be used for cross-account access."
    },
    {
      "permission": "s3:RestoreObject",
      "grant": "Operator",
      "resourceType": "Object",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    }
  ],
  "definitions": {
    "s3": {
      "allOf": [
        {
          "$ref": "turbot#/definitions/service"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "const": "S3"
            },
            "turbot": {
              "type": "object",
              "properties": {
                "akas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/s3Aka"
                  }
                },
                "title": {
                  "const": "S3"
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "aws#/definitions/awsMetadata"
                    }
                  }
                }
              }
            }
          },
          "required": [
            "name",
            "turbot"
          ],
          "additionalProperties": true,
          "tests": [
            {
              "description": "S3",
              "input": {
                "name": "S3",
                "turbot": {
                  "akas": [
                    "arn:aws:s3::123456789012"
                  ],
                  "title": "DataSync",
                  "custom": {
                    "aws": {
                      "accountId": 123456789012
                    }
                  }
                }
              }
            },
            {
              "description": "invalid - service provider name prefixed",
              "input": {
                "name": "AWS S3",
                "turbot": {
                  "akas": [
                    "arn:aws:s3::123456789012"
                  ],
                  "title": "DataSync",
                  "custom": {
                    "aws": {
                      "accountId": 123456789012
                    }
                  }
                }
              },
              "expected": false
            }
          ]
        }
      ]
    },
    "s3Aka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:s3::[0-9]{12}$",
      "tests": [
        {
          "description": "base",
          "input": "arn:aws:s3::123123123123"
        },
        {
          "description": "Invalid - service name not valid",
          "input": "arn:aws:datasync111::123123123123",
          "expected": false
        },
        {
          "description": "Invalid - account id is not valid",
          "input": "arn:aws:s3::123382743123123123",
          "expected": false
        }
      ]
    },
    "bucket": {
      "type": "object",
      "properties": {
        "AccelerateConfiguration": {
          "$ref": "#/definitions/bucketAccelerateConfiguration"
        },
        "Acl": {
          "$ref": "#/definitions/bucketAcl"
        },
        "CreationDate": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Encryption": {
          "$ref": "#/definitions/bucketEncryption"
        },
        "Name": {
          "$ref": "#/definitions/bucketName"
        },
        "Policy": {
          "$ref": "#/definitions/bucketPolicy"
        },
        "PolicyStatus": {
          "$ref": "#/definitions/bucketPolicyStatus"
        },
        "Tags": {
          "$ref": "aws#/definitions/tagList"
        },
        "Versioning": {
          "$ref": "#/definitions/bucketVersioning"
        },
        "PublicAccessBlock": {
          "$ref": "#/definitions/publicAccessBlock"
        },
        "Cors": {
          "type": "array"
        },
        "Lifecycle": {
          "$ref": "#/definitions/bucketLifecycle"
        },
        "Logging": {
          "$ref": "#/definitions/bucketLogging"
        },
        "NotificationConfiguration": {
          "$ref": "#/definitions/bucketNotificationConfiguration"
        },
        "LocationConstraint": {
          "type": "string"
        },
        "Payer": {
          "type": "string"
        },
        "Replication": {
          "$ref": "#/definitions/bucketReplication"
        },
        "Website": {
          "$ref": "#/definitions/bucketWebsite"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bucketAka"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/bucketName"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                },
                "hasData": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "AccelerateConfiguration": {
              "Status": "Enabled"
            },
            "CreationDate": "2018-12-05T14:53:33.000Z",
            "Encryption": {
              "ServerSideEncryptionConfiguration": {
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "aws:kms",
                      "KMSMasterKeyID": "arn:aws:kms:us-east-1:095318393923:alias/aws/s3"
                    }
                  }
                ]
              }
            },
            "Name": "my-bucket",
            "Acl": {
              "Owner": {
                "DisplayName": "aws+osborn+aaa",
                "ID": "26e5574fa1"
              },
              "Grants": [
                {
                  "Grantee": {
                    "DisplayName": "aws+osborn+aaa",
                    "ID": "26e5574fa16859426a6540699e6e3fe6ac1e8758991572c1ffe9a36671cb4570",
                    "Type": "CanonicalUser"
                  }
                }
              ]
            },
            "Policy": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AWSCloudTrailAclCheck20131101",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "arn:aws:iam::013122550996:root"
                  },
                  "Action": "s3:GetBucketAcl",
                  "Resource": "arn:aws:s3:::s3bucket-test005"
                }
              ]
            },
            "Payer": "BucketOwner",
            "PublicAccessBlock": {
              "BlockPublicAcls": true,
              "IgnorePublicAcls": true,
              "BlockPublicPolicy": true,
              "RestrictPublicBuckets": true
            },
            "Cors": {
              "CORSRules": [
                {
                  "AllowedHeaders": [
                    "Authorization"
                  ],
                  "AllowedMethods": [
                    "GET"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ],
                  "MaxAgeSeconds": 3000
                }
              ]
            },
            "LocationConstraint": "us-west-2",
            "Replication": {
              "ReplicationConfiguration": {
                "Role": "arn:aws:iam::acct-id:role/example-role",
                "Rules": [
                  {
                    "Destination": {
                      "Bucket": "arn:aws:s3:::destination-bucket"
                    },
                    "ID": "MWIwNTkwZmItMTE3MS00ZTc3LWJkZDEtNzRmODQwYzc1OTQy",
                    "Prefix": "Tax",
                    "Status": "Enabled"
                  }
                ]
              }
            },
            "Website": {
              "ErrorDocument": {
                "Key": "error.html"
              },
              "IndexDocument": {
                "Suffix": "index.html"
              }
            },
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "Versioning": {
              "Status": "Suspended"
            },
            "turbot": {
              "akas": [
                "arn:aws:s3:::my-bucket"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "my-bucket",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                },
                "createTimestamp": "2018-12-05T14:53:33.000Z"
              }
            }
          }
        }
      ]
    },
    "bucketName": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9._-]{1,255}$",
      "tests": [
        {
          "input": "12cor-a"
        },
        {
          "input": "roja-1"
        },
        {
          "description": "invalid - cannot start at",
          "input": "@aaa",
          "expected": false
        }
      ]
    },
    "bucketAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:s3:::[a-zA-Z0-9._-]{1,255}$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:s3:::My-Bucket-1"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:s3:::buckets/My-Bucket-1",
          "expected": false
        }
      ]
    },
    "bucketStatusName": {
      "type": "string",
      "enum": [
        "Enabled",
        "Suspended"
      ],
      "tests": [
        {
          "input": "Enabled"
        },
        {
          "description": "invalid - not listed in options",
          "input": "RUNNABLE",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        }
      ]
    },
    "MFADelete": {
      "type": "string",
      "enum": [
        "Enabled",
        "Disabled"
      ]
    },
    "bucketAccelerateConfiguration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Status": {
          "$ref": "#/definitions/bucketStatusName"
        }
      }
    },
    "bucketEncryption": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ServerSideEncryptionConfiguration": {
          "$ref": "#/definitions/bucketServerSideEncryptionConfiguration"
        }
      }
    },
    "bucketServerSideEncryptionConfiguration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Rules": {
          "$ref": "#/definitions/bucketServerSideEncryptionConfigurationRules"
        }
      }
    },
    "bucketServerSideEncryptionConfigurationRules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/bucketServerSideEncryptionConfigurationRule"
      }
    },
    "bucketServerSideEncryptionConfigurationRule": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ApplyServerSideEncryptionByDefault": {
          "type": "object",
          "required": [
            "SSEAlgorithm"
          ],
          "additionalProperties": false,
          "properties": {
            "SSEAlgorithm": {
              "type": "string",
              "enum": [
                "AES256",
                "aws:kms"
              ]
            },
            "KMSMasterKeyID": {
              "type": "string"
            }
          }
        }
      }
    },
    "bucketVersioning": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/bucketStatusName"
        },
        "MFADelete": {
          "$ref": "#/definitions/MFADelete"
        }
      }
    },
    "bucketPolicy": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "$ref": "#/definitions/bucketPolicyId"
        },
        "Statement": {
          "$ref": "#/definitions/bucketPolicyStatements"
        },
        "Version": {
          "$ref": "#/definitions/bucketPolicyVersion"
        }
      }
    },
    "bucketPolicyStatements": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/bucketPolicyStatement"
      }
    },
    "bucketPolicyStatement": {
      "type": "object"
    },
    "bucketPolicyStatus": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IsPublic": {
          "type": "boolean"
        }
      }
    },
    "bucketPolicyVersion": {
      "type": "string"
    },
    "bucketPolicyId": {
      "type": "string"
    },
    "publicAccessBlock": {
      "type": "object",
      "properties": {
        "BlockPublicAcls": {
          "type": "boolean"
        },
        "IgnorePublicAcls": {
          "type": "boolean"
        },
        "BlockPublicPolicy": {
          "type": "boolean"
        },
        "RestrictPublicBuckets": {
          "type": "boolean"
        }
      }
    },
    "bucketNotificationConfiguration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "TopicConfigurations": {
          "type": "array"
        },
        "QueueConfigurations": {
          "type": "array"
        },
        "LambdaFunctionConfigurations": {
          "type": "array"
        }
      }
    },
    "bucketAcl": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Owner": {
          "type": "object"
        },
        "Grants": {
          "type": "array"
        }
      }
    },
    "bucketCors": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "CORSRules": {
          "type": "array"
        }
      }
    },
    "bucketLifecycle": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Rules": {
          "type": "array"
        }
      }
    },
    "bucketLogging": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "TargetBucket": {
          "type": "string"
        },
        "TargetPrefix": {
          "type": "string"
        }
      }
    },
    "bucketReplication": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ReplicationConfiguration": {
          "type": "object"
        }
      }
    },
    "bucketWebsite": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RedirectAllRequestsTo": {
          "type": "object"
        },
        "IndexDocument": {
          "type": "object"
        },
        "ErrorDocument": {
          "type": "object"
        },
        "RoutingRules": {
          "type": "array"
        }
      }
    },
    "s3Account": {
      "type": "object",
      "properties": {
        "PublicAccessBlockConfiguration": {
          "$ref": "#/definitions/accountLevelPab"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/s3AccountAka"
              }
            },
            "title": {
              "const": "Account"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "IgnorePublicAcls": true,
              "BlockPublicPolicy": true,
              "RestrictPublicBuckets": true
            },
            "turbot": {
              "akas": [
                "arn:aws:s3::123456789012:account"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "Account",
              "custom": {
                "aws": {
                  "accountId": 123456789012
                },
                "createTimestamp": "2018-12-05T14:53:33.000Z"
              }
            }
          }
        }
      ]
    },
    "accountLevelPab": {
      "type": "object",
      "properties": {
        "BlockPublicAcls": {
          "type": "boolean"
        },
        "IgnorePublicAcls": {
          "type": "boolean"
        },
        "BlockPublicPolicy": {
          "type": "boolean"
        },
        "RestrictPublicBuckets": {
          "type": "boolean"
        }
      }
    },
    "s3AccountAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:s3::\\d{12}:account$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:s3::111666065714:account"
        },
        {
          "description": "Invalid - account Id",
          "input": "arn:aws:s3::1116660:account",
          "expected": false
        }
      ]
    }
  },
  "permission": {
    "types": {
      "s3": {
        "title": "S3",
        "parent": "aws#/permission/types/aws",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iam"
      }
    }
  },
  "policy": {
    "types": {
      "s3CustomEventPatterns": {
        "title": "@turbot/aws-s3",
        "icon": "fal-file-invoice",
        "parent": "aws#/policy/types/eventHandlersEventsRulesCustomEventPatterns",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The CloudWatch Events event pattern used by the AWS S3 module to specify\nwhich events to forward to the Turbot Event Handlers.\n",
        "category": "turbot#/control/categories/configured",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  }
                }
              },
              "value": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "detail-type": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "detail": {
                    "type": "object",
                    "property": {
                      "eventName": {
                        "type": "array"
                      }
                    },
                    "required": [
                      "eventName"
                    ]
                  }
                },
                "required": [
                  "source"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          "default": [
            {
              "type": {
                "title": "S3",
                "name": "s3"
              },
              "value": {
                "source": [
                  "aws.s3"
                ],
                "detail-type": [
                  "AWS API Call via CloudTrail"
                ],
                "detail": {
                  "eventName": [
                    "CreateBucket",
                    "DeleteBucket",
                    "DeleteBucketCors",
                    "DeleteBucketEncryption",
                    "DeleteBucketLifecycle",
                    "DeleteBucketPolicy",
                    "DeleteBucketReplication",
                    "DeleteBucketTagging",
                    "DeleteBucketWebsite",
                    "DeletePublicAccessBlock",
                    "PutAccountPublicAccessBlock",
                    "PutBucketAcl",
                    "PutBucketCors",
                    "PutBucketEncryption",
                    "PutBucketLifecycle",
                    "PutBucketLogging",
                    "PutBucketNotification",
                    "PutBucketPolicy",
                    "PutBucketPublicAccessBlock",
                    "PutBucketReplication",
                    "PutBucketRequestPayment",
                    "PutBucketTagging",
                    "PutBucketVersioning",
                    "PutBucketWebsite",
                    "PutPublicAccessBlock"
                  ]
                }
              }
            }
          ]
        }
      },
      "s3Enabled": {
        "title": "Enabled",
        "icon": "fal-traffic-light-go",
        "description": "Configure whether the AWS S3 service is enabled for users.\n\n**Note:** Disabling the service in this policy does NOT disable the\nAPI for Turbot or SuperUsers\n",
        "parent": "#/resource/types/s3",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Enabled: Metadata Only",
            "Disabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Disabled"
        }
      },
      "s3ApiEnabled": {
        "title": "API Enabled",
        "icon": "fal-lock-alt",
        "description": "Configure whether the AWS S3 API is enabled.\n\n**Note:** Disabling the service disables the API for ALL users\nand roles, and Turbot will have no access to the API.\n",
        "parent": "#/resource/types/s3",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > S3 > Enabled"
          ],
          "default": "Enabled"
        }
      },
      "s3Permissions": {
        "title": "Permissions",
        "icon": "fal-traffic-light-go",
        "description": "Configure whether permissions policies are in effect for AWS S3.\nThis setting does not affect account level permissions (AWS/Admin, AWS/Owner, etc)\n\n**Note:** The behavior of this policy depends on the value of `AWS > Permissions`.\n",
        "parent": "#/resource/types/s3",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > S3 > Enabled & AWS > S3 > API Enabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Enabled if AWS > S3 > Enabled & AWS > S3 > API Enabled"
        }
      },
      "s3PermissionsLockdown": {
        "title": "Lockdown",
        "icon": "fal-lock-alt",
        "parent": "#/policy/types/s3Permissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions"
      },
      "s3PermissionsLockdownApiBoundary": {
        "title": "API Boundary",
        "description": "Configure whether the AWS S3 API is enabled for all users and roles\nin turbot-managed boundary policies.\n\n**Note:** Disabling the service disables the API for ALL users\nand roles, and Turbot will have no access to the API.\n",
        "icon": "fal-tachometer-alt-average",
        "parent": "#/policy/types/s3PermissionsLockdown",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled if AWS > S3 > API Enabled"
          ],
          "example": [
            "Enabled if AWS > S3 > API Enabled"
          ],
          "default": "Enabled if AWS > S3 > API Enabled"
        }
      },
      "s3PermissionsLevels": {
        "title": "Levels",
        "icon": "fal-layer-group",
        "description": "Define the permissions levels that can be used to grant access to an AWS account.\nPermissions levels defined will appear in the UI to assign access to Turbot users.\n",
        "parent": "#/policy/types/s3Permissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Metadata",
              "ReadOnly",
              "Operator",
              "Admin",
              "Owner"
            ]
          }
        },
        "defaultTemplate": "{% if $.availableLevels.items[0].value | length == 0 %} [] {% endif %}{% for item in $.availableLevels.items[0].value %}- {{ item }}\n{% endfor %}",
        "defaultTemplateInput": [
          "{\n  item: account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  availableLevels: policyValues(filter:\"policyTypeLevel:self resourceId:{{ $.item.turbot.id }} policyTypeId:'tmod:@turbot/aws-iam#/policy/types/permissionsLevelsDefault'\") {\n    items {\n      value\n    }\n  }\n}\n"
        ]
      },
      "s3PermissionsLevelsModifiers": {
        "title": "Modifiers",
        "icon": "fal-user-edit",
        "description": "A map of AWS API to Turbot Permission Level used to customize Turbot's standard permissions.\nYou can add, remove or redefine the mapping of AWS API operations to Turbot permissions levels here.\n\n**Note:** Modifiers are cumulative - if you add a permission to the Metadata level, it is also\nadded to ReadOnly, Operator and Admin. Modifier policies set here apply ONLY to the AWS level\"\n\n```\nexample:\n  - \"glacier:createvault\": admin\n  - \"glacier:ListVaults\": metadata\n  - \"s3:DeleteBucket\": none\n```\n",
        "parent": "#/policy/types/s3PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "$ref": "aws-iam#/definitions/awsModifierList"
        }
      },
      "s3PermissionsLevelsAclAdministration": {
        "title": "ACL Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage ACL Administration.",
        "parent": "#/policy/types/s3PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "s3PermissionsLevelsAccessLoggingAdministration": {
        "title": "Access Logging Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Access Logging Administration.",
        "parent": "#/policy/types/s3PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "s3PermissionsLevelsCrossReplicationAdministration": {
        "title": "Cross Replication Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Cross Replication Administration.",
        "parent": "#/policy/types/s3PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "s3PermissionsLevelsCorsAdministration": {
        "title": "CORS Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage CORS Administration.",
        "parent": "#/policy/types/s3PermissionsLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "awsCompiledServicePermissions": {
        "title": "@turbot/aws-s3",
        "icon": "fal-calculator",
        "description": "A calculated policy that Turbot uses to create a compiled\nlist of ALL permissions for AWS S3 that is used as input\nto the control that manages the IAM stack.\n",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledServicePermissions",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "$ref": "aws-iam#/definitions/awsRightDefinitionList"
        }
      },
      "awsLevelsCompiled": {
        "title": "@turbot/aws-s3",
        "description": "A calculated policy that Turbot uses to create a compiled list\nof ALL permissions for AWS S3 that is used as input to the\nstack that manages the Turbot IAM permissions objects.\n",
        "icon": "fal-calculator",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevels",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "$ref": "aws-iam#/definitions/awsLevelDefinitionList"
        }
      },
      "awsCompiledApiBoundary": {
        "title": "@turbot/aws-s3",
        "description": "A read-only policy generated by Turbot that lists the APIs that\nshould be added to the turbot-managed (hard) boundary policy,\nthereby enabling them to be assigned to users and roles.\n\nThis value will change depending on the value of the value of the\n`AWS > S3 > Permissions > Lockdown > API Boundary` policy\n",
        "icon": "fal-border-outer",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevelsApiBoundary",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "type": "array"
        }
      },
      "s3RegionsDefault": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/s3",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS S3 resources are supported for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS S3 resources' Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/regionsDefault\") {\n    value\n  }\n}\n"
      },
      "s3ApprovedRegionsDefault": {
        "title": "Approved Regions [Default]",
        "icon": "fal-check-double",
        "parent": "#/resource/types/s3",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS S3 resources are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS S3 resources' Approved > Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/approvedRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "s3TagsTemplate": {
        "title": "Tags Template [Default]",
        "icon": "fal-tags",
        "description": "A template used to generate the keys and values for AWS S3 resources.\n\nBy default, all S3 resource Tags > Template policies will use this value.\n",
        "parent": "#/resource/types/s3",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/resourceTags",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws#/policy/types/defaultTagsTemplate\") {\n    value\n  }\n}\n"
      },
      "s3PolicyTrustedAccounts": {
        "title": "Trusted Accounts [Default]",
        "icon": "fal-handshake",
        "parent": "#/resource/types/s3",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Accounts that are trusted for access in the AWS S3 policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"account\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"013122550996\"\n  - \"560741234067\"\n```\n\n**Note**: Setting the policy to `Empty` array will remove all accounts.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9]{12}|^\\*$"
          }
        },
        "defaultTemplate": "{% if $.trustedAccounts.value | length == 0 %}[]{% else %}{% for item in $.trustedAccounts.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedAccounts: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedAccounts\") {\n    value\n  }\n}\n"
      },
      "s3PolicyTrustedServices": {
        "title": "Trusted Services [Default]",
        "icon": "fal-user-cog",
        "parent": "#/resource/types/s3",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Services that are trusted for access in the AWS S3 policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"service\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"sns.amazonaws.com\"\n  - \"ec2.amazonaws.com\"\n```\n\n**Note**: Setting the policy to `Empty` array will remove all services.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^\\S*\\.amazonaws\\.com$|^\\*$)"
          }
        },
        "defaultTemplate": "{% if $.trustedServices.value | length == 0 %}[]{% else %}{% for item in $.trustedServices.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedServices: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedServices\") {\n    value\n  }\n}\n"
      },
      "s3PolicyTrustedIdentityProviders": {
        "title": "Trusted Identity Providers [Default]",
        "icon": "fal-hands-helping",
        "parent": "#/resource/types/s3",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Identity Providers that are trusted for access in the AWS S3 policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"identity provider\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"www.amazon.com\"\n  - \"graph.facebook.com\"\n```\n\n**Note**: Setting the policy to `Empty` array will remove all identity providers.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{% if $.trustedIdentityProviders.value | length == 0 %}[]{% else %}{% for item in $.trustedIdentityProviders.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedIdentityProviders: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedIdentityProviders\") {\n    value\n  }\n}\n"
      },
      "s3PolicyTrustedOrganizations": {
        "title": "Trusted Organizations [Default]",
        "icon": "fal-hands-helping",
        "parent": "#/resource/types/s3",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Organizations that are trusted for access in the AWS S3 policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"organization\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"o-333333333\"\n  - \"o-c3a5y4wd52\"\n```\n\n**Note**: `Trusted Access > Organization Restrictions` are ONLY\napplied to AWS principals.  Services and Federated principals do\nNOT contain the `aws:PrincipalOrgId` condition key, and thus\ncannot be validated against the Organization.\n\nSetting the policy to `Empty` array will remove all organizations.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^o-[a-z0-9]{10,32}$|^\\*$)"
          }
        },
        "defaultTemplate": "{% if $.trustedOrganizations.value | length == 0 %}[]{% else %}{% for item in $.trustedOrganizations.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedOrganizations: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedOrganizations\") {\n    value\n  }\n}\n"
      },
      "bucketAccessLogging": {
        "title": "Access Logging",
        "icon": "fal-file-download",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceLogging",
        "description": "Define the Access Logging settings required for `AWS > S3 > Bucket`.\n\n`AWS > S3 > Bucket` provides access logs that capture detailed information\nabout requests sent to your bucket. Each log contains information such as\nthe time the request was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these access logs to\nanalyze traffic patterns and troubleshoot issues.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Check: Enabled to Access Logging > Bucket",
            "Enforce: Disabled",
            "Enforce: Enabled to Access Logging > Bucket"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "bucketAccessLoggingBucket": {
        "title": "Bucket",
        "icon": "fab-bitbucket",
        "parent": "#/policy/types/bucketAccessLogging",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceLogging",
        "description": "The name of an S3 Bucket to which the Bucket\naccess logs will be delivered.\n\nThe S3 Bucket must already exist and the S3 service must be allowed write access.\nThe bucket should reside in same account and same region as of the Bucket.\n\nexample:\n```\n  testbucket\n  turbotbucket\n```\n",
        "schema": {
          "type": "string"
        },
        "defaultTemplateInput": "{\n  turbotLoggingBucket: policy(uri: \"aws#/policy/types/loggingBucketDefault\")\n}\n",
        "defaultTemplate": "{% if $.turbotLoggingBucket %}\"{{ $.turbotLoggingBucket }}\"{% else %}\"\"{% endif %}"
      },
      "bucketAccessLoggingBucketPrefix": {
        "title": "Key Prefix",
        "icon": "fal-key",
        "parent": "#/policy/types/bucketAccessLogging",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceLogging",
        "description": "An optional S3 key prefix to which the `AWS > S3 > Bucket` access logs will be written.\n\nThe file names of the access logs use the following format:\n`bucket[/prefix]/AWSLogs/aws-account-id/elasticloadbalancing/region/yyyy/mm/dd/aws-account-id_elasticloadbalancing_region_load-balancer-id_end-time_ip-address_random-string.log.gz`\n",
        "schema": {
          "type": "string",
          "pattern": "^.{1,200}$",
          "default": ""
        }
      },
      "bucketAcl": {
        "title": "ACL",
        "icon": "fal-universal-access",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/securityTrustedAccess"
      },
      "bucketAclTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/bucketAcl",
        "targets": [
          "#/resource/types/bucket"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Manage trusted access for AWS S3 Buckets via Bucket ACLs.\n\nAWS allows S3 Buckets to be shared with other AWS accounts via ACLs.  This policy allows you to configure whether such sharing is allowed, and to which principals.\n\nIf set to `Enforce: Revoke untrusted access`, access to non-trusted entities will be removed.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Trusted Access",
            "Enforce: Revoke untrusted access"
          ],
          "default": "Skip"
        }
      },
      "bucketAclTrustedCanonicalIds": {
        "title": "Canonical IDs",
        "icon": "fal-id-card",
        "parent": "#/policy/types/bucketAclTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "List of AWS Canonical User IDs that are trusted for cross-account\naccess in the AWS S3 Bucket ACL.\n\nThe `*` wildcard `allows` any Canonical User ID grantee, and is not recommended.\n\nThe `[]` empty array `denies` any Canonical User ID grantee.\n",
        "schema": {
          "type": "array",
          "default": "*",
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9]{64,}$"
          }
        }
      },
      "bucketAclTrustedGroups": {
        "title": "Groups",
        "icon": "fal-users-class",
        "parent": "#/policy/types/bucketAclTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "List of predefined AWS Groups that are trusted for cross-account access in the AWS S3 Bucket ACL.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "AllUsers",
              "AuthenticatedUsers",
              "LogDelivery"
            ]
          },
          "default": [
            "AllUsers",
            "AuthenticatedUsers",
            "LogDelivery"
          ]
        }
      },
      "bucketActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Determine the action to take when an AWS S3 bucket, based on the `AWS > S3 > Bucket > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > S3 > Bucket > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "bucketActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/bucketActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "The number of days since the AWS S3 bucket\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > S3 > Bucket > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "bucketActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/bucketActive",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "The age after which the AWS S3 bucket\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > S3 > Bucket > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "bucketActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/bucketActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nbuckets to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > S3 > Bucket > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "bucketApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Determine the action to take when an AWS S3 bucket is not approved based on `AWS > S3 > Bucket > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new and empty"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "bucketApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/bucketApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "A list of AWS regions in which AWS S3 buckets are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS S3 bucket is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > S3 > Bucket > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-s3#/policy/types/s3ApprovedRegionsDefault\")\n}\n"
      },
      "bucketApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/bucketApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Determine whether the AWS S3 bucket is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS S3 bucket is not approved, it will be subject to the action specified in the `AWS > S3 > Bucket > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > S3 > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > S3 > Enabled"
        }
      },
      "bucketApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/bucketApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "The policy allows you to set buckets to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS S3 bucket is not matched by the approved list, it will be subject to the action specified in the `AWS > S3 > Bucket > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "s3BucketPublicAccessBlock": {
        "title": "Public Access Block",
        "icon": "fal-times-octagon",
        "description": "Configure the AWS S3 buckets Bucket Level Public Access Block",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Per `Public Access Block  > Settings`",
            "Enforce: Per `Public Access Block  > Settings`"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "s3BucketPublicAccessBlockSettings": {
        "title": "Settings",
        "icon": "fal-layer-group",
        "description": "Define the Public Access Block that can be used to restrict the bucket access. This policy provides a default for Public Access Block in AWS S3 Bucket, however you can explicitly override the setting.\n\n**Block Public ACLs:** Block public access to buckets and objects granted through new access control lists (ACLs).        \n**Block Public Bucket Policies:** Block public access to buckets and objects granted through new public bucket or access point policies.\n**Ignore Public ACLs:** Block public access to buckets and objects granted through any access control lists (ACLs).        \n**Restrict Public Bucket Policies:** Block public and cross-account access to buckets and objects through any public bucket or access point policies.\n\n",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other",
        "parent": "#/policy/types/s3BucketPublicAccessBlock",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Block Public ACLs",
              "Block Public Bucket Policies",
              "Ignore Public ACLs",
              "Restrict Public Bucket Policies"
            ]
          },
          "default": []
        }
      },
      "bucketCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS S3 bucket into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > S3 > Bucket > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "bucketConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it.\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "bucketConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/bucketConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource.",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "bucketConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/bucketConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "bucketEncryptionAtRest": {
        "title": "Encryption at Rest",
        "icon": "fal-shield-alt",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the Encryption at Rest settings required for `AWS > S3 > Bucket`.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > S3 > Bucket > Encryption at Rest  > *`), raises an alarm, and takes the defined enforcement action\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: None",
            "Check: None or higher",
            "Check: AWS SSE",
            "Check: AWS SSE or higher",
            "Check: AWS managed key",
            "Check: AWS managed key or higher",
            "Check: Customer managed key",
            "Check: Encryption at Rest > Customer Managed Key",
            "Enforce: None",
            "Enforce: None or higher",
            "Enforce: AWS SSE",
            "Enforce: AWS SSE or higher",
            "Enforce: AWS managed key",
            "Enforce: AWS managed key or higher",
            "Enforce: Customer managed key",
            "Enforce: Encryption at Rest > Customer Managed Key"
          ],
          "example": [
            "Check: None or higher"
          ],
          "default": "Skip"
        }
      },
      "bucketEncryptionAtRestCustomerManagedKey": {
        "title": "Customer Managed Key",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/bucketEncryptionAtRest",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the KMS key ID for encryption at rest.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > S3 > Bucket > Encryption at Rest  > *`), raises an alarm, and takes the defined enforcement action\n\nPlease make sure the key defined in the template has required permissions.\n\n```\nexample:\n  alias/aws/ebs\n  ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:key/ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n```\n",
        "schema": {
          "anyOf": [
            {
              "type": "string",
              "pattern": "^alias/[a-zA-Z0-9:/_-]{1,249}$"
            },
            {
              "type": "string",
              "pattern": "^[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key/[-a-z0-9-]{1,255}$"
            }
          ],
          "tests": [
            {
              "description": "valid - if keyArn",
              "input": "arn:aws:kms:us-east-1:039305405804:key/ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasName",
              "input": "alias/aws/ebs"
            },
            {
              "description": "valid - if keyId",
              "input": "ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            }
          ]
        },
        "defaultTemplate": "{{ $.defaultKey }}",
        "defaultTemplateInput": "{\n  defaultKey: policy(uri: \"aws-kms#/policy/types/keyDefaultCustomerManagedKey\")\n}\n"
      },
      "encryptionInTransit": {
        "title": "Encryption in Transit",
        "icon": "fal-lock-open-alt",
        "description": "Define the Encryption in Transit settings required for `AWS > S3 > Bucket`.\n\nThe Encryption in Transit control compares the Encryption in Transit settings against the Encryption in Transit policies for the resource\n(AWS > S3 > Bucket > Encryption in Transit), raises an alarm, and takes the defined enforcement action.\n",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceEncryptionInTransit",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Enforce: Disabled",
            "Enforce: Enabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "bucketPolicyStatements": {
        "title": "Policy Statements [Deprecated]",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved"
      },
      "bucketPolicyStatementsApproved": {
        "title": "Approved [Deprecated]",
        "icon": "fal-check-double",
        "description": "Configure Bucket Policy Statements checking. This policy defines whether\nto verify the bucket policy statements are approved, as well as the\nsubsequent action to take on unapproved statements. Rules for all `Approved`\npolicies will be compiled in `Approved > Compiled Rules` and then\nevaluated.\n\nIf set to `Enforce: Delete unapproved`, any unapproved principal will be\nrevoked from the bucket policy.\n\n**Note:** This policy has been deprecated in v5.6.0 and will be removed in v6.0.0. It has been replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` policy.\n",
        "parent": "#/policy/types/bucketPolicyStatements",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "bucketPolicyStatementsApprovedRules": {
        "title": "Rules [Deprecated]",
        "icon": "fal-clipboard-list-check",
        "description": "An Object Control List (OCL) with a list of filter rules\nto approve or reject bucket policy statements.\nNote that the Approved control does not operate directly from this policy,\nbut from the `Approved > Compiled Rules`. The rules are processed in order,\nand any built-in Turbot rules will appear first in the list of compiled\nrules.\n\n**Note:** This policy has been deprecated in v5.6.0 and will be removed in v6.0.0. It has been replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` policy.\n",
        "parent": "#/policy/types/bucketPolicyStatementsApproved",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "default": "# Approve unmatched rules\nAPPROVE *",
          "x-schema-form": {
            "type": "textarea"
          }
        }
      },
      "bucketPolicyStatementsApprovedEncryptionInTransit": {
        "title": "Encryption in Transit [Deprecated]",
        "icon": "fal-lock",
        "description": "Determine whether bucket policy statements generated by the\n`AWS > S3 > Bucket > Encryption in Transit` are approved.\n\n**Note:** This policy has been deprecated in v5.6.0 and will be removed in v6.0.0. It has been replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` policy.\n",
        "parent": "#/policy/types/bucketPolicyStatementsApproved",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled: Approve statements from `AWS > S3 > Bucket > Encryption in Transit`"
          ],
          "default": "Enabled: Approve statements from `AWS > S3 > Bucket > Encryption in Transit`"
        }
      },
      "bucketPolicyStatementsApprovedEncryptionAtRest": {
        "title": "Encryption at Rest [Deprecated]",
        "icon": "fal-lock",
        "description": "Determine whether bucket policy statements generated by the\n`AWS > S3 > Bucket > Encryption at Rest` are approved.\n\n**Note:** This policy has been deprecated in v5.6.0 and will be removed in v6.0.0. It has been replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` policy.\n",
        "parent": "#/policy/types/bucketPolicyStatementsApproved",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled: Approve statements from `AWS > S3 > Bucket > Encryption at Rest`"
          ],
          "default": "Enabled: Approve statements from `AWS > S3 > Bucket > Encryption at Rest`"
        }
      },
      "bucketPolicyStatementsApprovedTrustedAwsAccounts": {
        "title": "Trusted Accounts [Deprecated]",
        "icon": "fal-arrows-h",
        "description": "Defines the AWS Accounts that can be allowed to access any bucket.\nExamples:\n  - arn:aws:iam::560741234067:root\n  - 492552618977\n  - 123456789012\n\n**Note:** This policy has been deprecated in v5.6.0 and will be removed in v6.0.0. It has been replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` policy.\n",
        "parent": "#/policy/types/bucketPolicyStatementsApproved",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^arn:aws(-us-gov|-cn)?:iam::[0-9]{1,12}:[A-Za-z0-9_+=,.@-]{1,64}$"
              },
              {
                "type": "string",
                "pattern": "^cloudfront$"
              },
              {
                "type": "integer"
              },
              {
                "$ref": "aws#/definitions/accountId"
              }
            ]
          }
        },
        "defaultTemplate": "- {{ $.account.Id }}",
        "defaultTemplateInput": "{\n  account {\n    Id\n  }\n}\n"
      },
      "bucketPolicyStatementsApprovedTrustedAwsServices": {
        "title": "Trusted Services [Deprecated]",
        "icon": "fal-arrows-h",
        "description": "Defines the AWS Services that can be allowed to access any bucket.\nExamples:\n  - cloudtrail.amazonaws.com\n  - cloudwatch.amazonaws.com\n\n**Note:** This policy has been deprecated in v5.6.0 and will be removed in v6.0.0. It has been replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` policy.\n",
        "parent": "#/policy/types/bucketPolicyStatementsApproved",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(^\\S+\\.amazonaws\\.com$)"
          },
          "default": []
        }
      },
      "bucketPolicyStatementsApprovedTrustedIdentityProvider": {
        "title": "Trusted Identity Providers [Deprecated]",
        "icon": "fal-arrows-h",
        "description": "Defines the Identity Providers that can be allowed to access any bucket.\nExamples:\n  - www.amazon.com\n  - arn:aws:iam::013122550996:saml-provider/idp1\n\n**Note:** This policy has been deprecated in v5.6.0 and will be removed in v6.0.0. It has been replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` policy.\n",
        "parent": "#/policy/types/bucketPolicyStatementsApproved",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "bucketPolicyStatementsCompiledRules": {
        "title": "Compiled Rules [Deprecated]",
        "icon": "fal-clipboard-list-check",
        "readOnly": true,
        "description": "A read-only Object Control List (OCL) to approved or reject bucket policy statements\nfor a bucket.\nThis policy is generated by Turbot.\n\n**Note:** This policy has been deprecated in v5.6.0 and will be removed in v6.0.0. It has been replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` policy.\n",
        "parent": "#/policy/types/bucketPolicyStatementsApprovedRules",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string"
        }
      },
      "bucketRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS S3 buckets are supported for use.\n\nAny buckets in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-s3#/policy/types/s3RegionsDefault\") {\n    value\n  }\n}\n"
      },
      "bucketTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Determine the action to take when an AWS S3 bucket tags are not updated based on the `AWS > S3 > Bucket > Tags > *` policies.\n\nThe control ensure AWS S3 bucket tags include tags defined in `AWS > S3 > Bucket > Tags > Template`.\n\nTags not defined in Bucket Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "bucketTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/bucketTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "The template is used to generate the keys and values for AWS S3 bucket.\n\nTags not defined in Bucket Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-s3#/policy/types/s3TagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "bucketPolicy": {
        "title": "Policy",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/securityTrustedAccess"
      },
      "bucketPolicyTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/bucketPolicy",
        "targets": [
          "#/resource/types/bucket"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Take an action when AWS S3 bucket policy is not trusted based on the\n`AWS > S3 > Bucket > Policy > Trusted Access > *` policies.\n\nThe Trusted Access control evaluates the bucket policy against the list of allowed\nmembers in each of the Trusted Access sub-policies (Trusted Access > Accounts,\nTrusted Access > Services etc.), this control raises an alarm and takes the\ndefined enforcement action.\n\nThe account that owns the bucket will always be trusted, even if its account ID is\nnot included in the Trusted Accounts policy.\n\nIf set to `Enforce: Revoke untrusted access`, access to non-trusted\nmembers will be removed.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Trusted Access",
            "Enforce: Revoke untrusted access"
          ],
          "default": "Skip"
        }
      },
      "bucketPolicyTrustedAccounts": {
        "title": "Accounts",
        "icon": "fab-aws",
        "parent": "#/policy/types/bucketPolicyTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "List of AWS Account IDs that are trusted for cross-account access in the\nAWS S3 bucket policy.\n\nNote that `Trusted Access > Accounts` and `Trusted Access >\nOrganizations` are evaluated independently. To have access, an AWS\nprincipal must be allowed in `Trusted Access > Accounts` AND be a\nmember of an Organization that is allowed in `Trusted Access >\nOrganizations`.\n\n```\nexample:\n  - \"123456789012\"\n```\n**Note**: Setting the policy to an `Empty` array will remove all accounts.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^\\d{12}$|^\\*$)"
          }
        },
        "defaultTemplate": "{% if $.accounts | length == 0 %}[]{% endif %}{% for item in $.accounts %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  accounts: policy(uri: \"tmod:@turbot/aws-s3#/policy/types/s3PolicyTrustedAccounts\")\n}\n"
      },
      "bucketPolicyTrustedServices": {
        "title": "Services",
        "icon": "fal-user-cog",
        "parent": "#/policy/types/bucketPolicyTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "List of AWS Services that are trusted for access in the AWS S3 bucket policy.\n\n```\nexample:\n  - sns.amazonaws.com\n  - ec2.amazonaws.com\n```\n\n**Note**: Setting the policy to an `Empty` array will remove all services.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^\\S*\\.amazonaws\\.com$|^\\*$)"
          }
        },
        "defaultTemplate": "{% if $.services | length == 0 %}[]{% endif %}{% for item in $.services %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  services: policy(uri: \"tmod:@turbot/aws-s3#/policy/types/s3PolicyTrustedServices\")\n}\n"
      },
      "bucketPolicyTrustedIdentityProviders": {
        "title": "Identity Providers",
        "icon": "fal-id-card-alt",
        "parent": "#/policy/types/bucketPolicyTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "List of Identity Providers that are trusted for cross-account access in the\nAWS S3 bucket policy.\n\n```\nexample:\n  - www.google.com\n  - www.facebook.com\n```\n**Note**: Setting the policy to an `Empty` array will remove all identity providers.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{% if $.identityProviders | length == 0 %}[]{% endif %}{% for item in $.identityProviders %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  identityProviders: policy(uri: \"tmod:@turbot/aws-s3#/policy/types/s3PolicyTrustedIdentityProviders\")\n}\n"
      },
      "bucketPolicyTrustedOrganizations": {
        "title": "Organization Restrictions",
        "icon": "fal-sitemap",
        "parent": "#/policy/types/bucketPolicyTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "List of AWS Organization IDs that are trusted for cross-account access in\nthe AWS S3 bucket policy, or '*' to skip the Organization Restriction.\n\nNote that `Trusted Access > Accounts` and `Trusted Access >\nOrganizations` are evaluated independently. To have access, an AWS\nprincipal must be allowed in `Trusted Access > Accounts` AND be a\nmember of an Organization that is allowed in `Trusted Access >\nOrganizations`.\n\n**Note**: `Trusted Access > Organization Restrictions` are ONLY\napplied to AWS principals.  Services and Federated principals do\nNOT contain the `aws:PrincipalOrgId` condition key, and thus\ncannot be validated against the Organization.\n\n```\nexample:\n  - \"o-333333333\"\n  - \"o-c3a5y4wd52\"\n```\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^o-[a-z0-9]{10,32}$|^\\*$)"
          }
        },
        "defaultTemplate": "{% if $.organizations | length == 0 %}[]{% endif %}{% for item in $.organizations %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  organizations: policy(uri: \"tmod:@turbot/aws-s3#/policy/types/s3PolicyTrustedOrganizations\")\n}\n"
      },
      "bucketPolicyTrustedCloudFrontOriginAccessIdentities": {
        "title": "CloudFront Origin Access Identities",
        "icon": "fal-chart-network",
        "parent": "#/policy/types/bucketPolicyTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "List of [CloudFront Origin Access Identities (OAIs)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html) that are trusted for cross-account access in the AWS S3 bucket policy.\n\nThe expected format is an array of `CloudFront OAI ARNs` or `OAI IDs`.\n\n```\nexample:\n  - \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EH1HDMB1FH2TC\"\n  - \"EH1HDMB1FH2TC\"\n```\n**Note**: Setting the policy to an `Empty` array will remove all CloudFront OAIs.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^\\*$|^[A-Z0-9]+$|^arn:aws(-us-gov|-cn)?:iam::cloudfront:user/CloudFront Origin Access Identity [A-Z0-9]+$)"
          },
          "default": [
            "*"
          ]
        }
      },
      "bucketUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Configure the number of AWS S3 buckets that can be used for this account and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > S3 > Bucket > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "bucketUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/bucketUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Maximum number of items that can be created for this account.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 100
        }
      },
      "bucketVersioning": {
        "title": "Versioning",
        "icon": "fal-copy",
        "description": "Check if the AWS S3 bucket Versioning configuration is set correctly.",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Disabled",
            "Check: Enabled",
            "Enforce: Disabled",
            "Enforce: Enabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "s3AccountPublicAccessBlock": {
        "title": "Public Access Block",
        "icon": "fal-ban",
        "description": "Configure the AWS S3 buckets account level Public Access Block",
        "parent": "#/resource/types/s3Account",
        "targets": "#/resource/types/s3Account",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Per `Public Access Block  > Settings`",
            "Enforce: Per `Public Access Block  > Settings`"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "s3AccountPublicAccessBlockSettings": {
        "title": "Settings",
        "icon": "fal-layer-group",
        "description": "Define the Public Access Block that can be used to restrict the bucket access. This policy provides a default for Public Access Block in AWS Account, however you can explicitly override the setting.\n\n**Block Public ACLs:** Block public access to buckets and objects granted through new access control lists (ACLs).        \n**Block Public Bucket Policies:** Block public access to buckets and objects granted through new public bucket or access point policies.\n**Ignore Public ACLs:** Block public access to buckets and objects granted through any access control lists (ACLs).        \n**Restrict Public Bucket Policies:** Block public and cross-account access to buckets and objects through any public bucket or access point policies.\n\n",
        "targets": "#/resource/types/s3Account",
        "category": "turbot#/control/categories/other",
        "parent": "#/policy/types/s3AccountPublicAccessBlock",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Block Public ACLs",
              "Block Public Bucket Policies",
              "Ignore Public ACLs",
              "Restrict Public Bucket Policies"
            ]
          },
          "default": []
        }
      },
      "s3AccountCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/s3Account",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Configure whether to record and synchronize details for the AWS S3 account into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > S3 > Account > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      }
    }
  },
  "resource": {
    "types": {
      "s3": {
        "title": "S3",
        "icon": "fal-hdd",
        "description": "AWS S3 Service",
        "parent": "aws#/resource/types/aws",
        "category": "turbot#/resource/categories/cloudService",
        "resourceParents": "aws#/resource/types/account",
        "metadataTemplates": {
          "akas": "- {% if $.turbot.custom.aws.partition %}\"arn:{{ $.turbot.custom.aws.partition }}:s3::{{$.turbot.custom.aws.accountId}}\"{% else %}\"arn:aws:s3::{{$.turbot.custom.aws.accountId}}\"{% endif %}\n",
          "resourceParentAka": "{% if $.turbot.custom.aws.partition %}\"arn:{{ $.turbot.custom.aws.partition }}:::{{$.turbot.custom.aws.accountId}}\"{% else %}\"arn:aws:::{{$.turbot.custom.aws.accountId}}\"{% endif %}\n",
          "title": "S3"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "name": "S3",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:s3::123456789012"
              ],
              "resourceParentAka": "arn:aws:::123456789012",
              "title": "S3"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/s3"
        }
      },
      "bucket": {
        "title": "Bucket",
        "icon": "fal-glass-whiskey",
        "parent": "#/resource/types/s3",
        "category": "turbot#/resource/categories/storageContainer",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.Name }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:s3:::{{ $.Name }}\"\n",
          "resourceParentAka": "\"arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}\"\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "Name": "My-bucket",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "My-bucket",
              "akas": [
                "arn:aws:s3:::My-bucket"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "terraform": {
          "type": "aws_s3_bucket",
          "stateIdTemplate": "{{$.Name}}",
          "propertyMap": {
            "bucket": "Name",
            "policy": "Policy"
          },
          "metadataMap": {
            "force_destroy": "terraform.forceDestroy",
            "acl": "terraform.cannedAcl"
          },
          "stateDefaults": {
            "force_destroy": false,
            "acl": "private"
          }
        },
        "schema": {
          "$ref": "#/definitions/bucket"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/bucket"
            },
            {
              "type": "object",
              "required": [
                "Name"
              ]
            }
          ]
        }
      },
      "s3Account": {
        "title": "Account",
        "icon": "fal-hdd",
        "description": "AWS S3 Account.",
        "parent": "#/resource/types/s3",
        "category": "turbot#/resource/categories/storageContainer",
        "resourceParents": "aws#/resource/types/account",
        "metadataTemplates": {
          "title": "Account",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:s3::{{ $.turbot.custom.aws.accountId }}:account\"\n",
          "resourceParentAka": "\"arn:{{ $.turbot.custom.aws.partition }}:::{{ $.turbot.custom.aws.accountId }}\"\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "AccountLevelPublicAccessBlock": {
                "BlockPublicAcls": true,
                "IgnorePublicAcls": true,
                "BlockPublicPolicy": true,
                "RestrictPublicBuckets": true
              },
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 111666065714,
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "Account",
              "akas": [
                "arn:aws:s3::111666065714:account"
              ],
              "resourceParentAka": "arn:aws:::111666065714"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/s3Account"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/s3Account"
            },
            {
              "type": "object",
              "required": [
                "PublicAccessBlockConfiguration"
              ]
            }
          ]
        }
      }
    }
  },
  "action": {
    "types": {
      "bucketDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/bucket",
        "targets": [
          "#/resource/types/bucket"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS S3 bucket from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/bucket/delete",
          "bundle": "functions/bucket/delete/dist/index.zip",
          "memory": 1024,
          "hash": "92e2273a8e"
        }
      },
      "bucketRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS S3 service Bucket resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Bucket resources in the CMDB.\n",
        "events": [
          "s3:CreateBucket",
          "s3:DeleteBucket",
          "s3:DeleteBucketCors",
          "s3:DeleteBucketEncryption",
          "s3:DeleteBucketLifecycle",
          "s3:DeleteBucketPolicy",
          "s3:DeleteBucketReplication",
          "s3:DeleteBucketTagging",
          "s3:DeleteBucketWebsite",
          "s3:DeleteReplicationConfiguration",
          "s3:PutAccelerateConfiguration",
          "s3:PutAnalyticsConfiguration",
          "s3:PutBucketAcl",
          "s3:PutBucketCors",
          "s3:PutBucketLogging",
          "s3:PutBucketNotification",
          "s3:PutBucketPolicy",
          "s3:PutBucketPublicAccessBlock",
          "s3:PutBucketRequestPayment",
          "s3:PutBucketTagging",
          "s3:PutBucketVersioning",
          "s3:PutBucketWebsite",
          "s3:PutBucketEncryption",
          "s3:PutInventoryConfiguration",
          "s3:PutBucketLifecycle",
          "s3:PutMetricsConfiguration",
          "s3:PutBucketReplication"
        ]
      },
      "bucketSetAclTrustedAccess": {
        "title": "Set ACL Trusted Access",
        "icon": "fal-universal-access",
        "parent": "#/resource/types/bucket",
        "targets": [
          "#/resource/types/bucket"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Set ACL Trusted Access for `AWS > S3 > Bucket`.",
        "function": {
          "src": "functions/bucket/setAclTrustedAccess",
          "bundle": "functions/bucket/setAclTrustedAccess/dist/index.zip",
          "memory": 1024,
          "hash": "2028eadc3e"
        }
      },
      "setBucketPublicAccessBlock": {
        "title": "Set Public Access Block",
        "icon": "fal-times-octagon",
        "description": "Configure the AWS S3 Bucket Public Access Block",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other",
        "validationIgnoreChildProperties": [
          "params"
        ],
        "function": {
          "src": "functions/bucket/setBucketPublicAccessBlock",
          "bundle": "functions/bucket/setBucketPublicAccessBlock/dist/index.zip",
          "memory": 1024,
          "hash": "f50708cdd6"
        }
      },
      "setEncryptionInTransit": {
        "title": "Set Encryption in Transit",
        "icon": "fal-user-secret",
        "description": "Update the bucket encryption in transit",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceEncryptionInTransit",
        "help": "#/help/bucketDefaultEncryption",
        "function": {
          "src": "functions/bucket/updateBucketPolicy",
          "bundle": "functions/bucket/updateBucketPolicy/dist/index.zip",
          "memory": 1024,
          "hash": "308c8898cb"
        }
      },
      "bucketSetPolicyTrustedAccess": {
        "title": "Set Policy Trusted Access",
        "icon": "fal-shield-alt",
        "parent": "#/resource/types/bucket",
        "targets": [
          "#/resource/types/bucket"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Set Trusted Access for `AWS > S3 > Bucket`.",
        "function": {
          "src": "functions/bucket/setPolicyTrustedAccess",
          "bundle": "functions/bucket/setPolicyTrustedAccess/dist/index.zip",
          "memory": 1024,
          "hash": "b4b206c384"
        }
      },
      "bucketSetVersioning": {
        "title": "Set Versioning",
        "icon": "fal-copy",
        "description": "Set the AWS S3 bucket Versioning configuration.",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other",
        "help": "#/help/bucketVersioning",
        "function": {
          "src": "functions/bucket/setVersioning",
          "bundle": "functions/bucket/setVersioning/dist/index.zip",
          "memory": 1024,
          "hash": "5787c0e43f"
        }
      },
      "bucketUpdateAccessLogging": {
        "title": "Update Access Logging",
        "icon": "eye",
        "description": "Update the AWS S3 Bucket Access Logging",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceLogging",
        "function": {
          "src": "functions/bucket/updateAccessLogging",
          "bundle": "functions/bucket/updateAccessLogging/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "e52dbc2279"
        }
      },
      "bucketUpdateDefaultEncryption": {
        "title": "Update Default Encryption",
        "icon": "fal-lock",
        "description": "Update the default encryption for AWS S3 bucket.",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other",
        "help": "#/help/bucketDefaultEncryption",
        "function": {
          "src": "functions/bucket/updateDefaultEncryption",
          "bundle": "functions/bucket/updateDefaultEncryption/dist/index.zip",
          "memory": 1024,
          "hash": "1bd865d798"
        }
      },
      "bucketUpdateEncryptionAtRest": {
        "title": "Update Default Encryption at Rest",
        "icon": "fal-shield-alt",
        "description": "Update encryption for AWS S3 bucket.",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other",
        "help": "#/help/bucketUpdateEncryptionAtRest",
        "function": {
          "src": "functions/bucket/updateEncryptionAtRest",
          "bundle": "functions/bucket/updateEncryptionAtRest/dist/index.zip",
          "memory": 1024,
          "hash": "9790b7e391"
        }
      },
      "bucketUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Update the tags for AWS S3 bucket tags.",
        "function": {
          "src": "functions/bucket/updateTags",
          "bundle": "functions/bucket/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "2e8d95e972"
        }
      },
      "s3AccountRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/s3Account",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Process events for AWS S3 service Account resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Account resources in the CMDB.\n",
        "events": [
          "s3:DeleteAccountPublicAccessBlock",
          "s3:PutAccountPublicAccessBlock"
        ]
      },
      "setAccountPublicAccessBlock": {
        "title": "Set Public Access Block",
        "icon": "fal-ban",
        "description": "Configure the AWS S3 Account Level Public Access Block",
        "parent": "#/resource/types/s3Account",
        "targets": "#/resource/types/s3Account",
        "category": "turbot#/control/categories/other",
        "validationIgnoreChildProperties": [
          "params"
        ],
        "function": {
          "src": "functions/s3Account/setPublicAccessBlock",
          "bundle": "functions/s3Account/setPublicAccessBlock/dist/index.zip",
          "memory": 1024,
          "hash": "8214620f72"
        }
      }
    }
  },
  "control": {
    "types": {
      "bucketAccessLogging": {
        "title": "Access Logging",
        "icon": "fal-file-download",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceLogging",
        "description": "Define the Access Logging settings required for `AWS > S3 > Bucket`.\n\n`AWS > S3 > Bucket` provides access logs that capture detailed information\nabout requests sent to your bucket. Each log contains information such as\nthe time the request was received, the client's IP address, latencies,\nrequest paths, and server responses. You can use these access logs to\nanalyze traffic patterns and troubleshoot issues.\n"
      },
      "bucketAcl": {
        "title": "ACL",
        "icon": "fal-universal-access",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/securityTrustedAccess"
      },
      "bucketAclTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield-alt",
        "parent": "#/control/types/bucketAcl",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Take an action when AWS S3 Bucket ACL is not trusted based on the\n`AWS > S3 > Bucket > ACL > Trusted Access > *` policies.\n\nThe `ACL Trusted Access control` evaluates the Bucket ACL against the list of allowed grantees in the ACL Trusted Access sub-policies\n- ACL > Trusted Access > Canonical IDs\n- ACL > Trusted Access > Groups\n\nThis control raises an alarm and takes the defined enforcement action. If set to `Enforce: Revoke untrusted access`, access to non-trusted grantees will be removed.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/bucketAclTrustedAccess",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "ACL Trusted Access set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/bucketCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "bucketActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Take an action when an AWS S3 bucket is not active based on the\n`AWS > S3 > Bucket > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > S3 > Bucket > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/bucketActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/bucketCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "bucketApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Take an action when an AWS S3 bucket is not approved based on `AWS > S3 > Bucket > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/bucketApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/bucketCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "bucketLevelPublicAccessBlock": {
        "title": "Public Access Block",
        "icon": "fal-times-octagon",
        "description": "Configure the AWS S3 Bucket Level Public Access Block",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other"
      },
      "bucketCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Record and synchronize details for the AWS S3 bucket into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > S3 > Bucket > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/bucketCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/bucket/cmdb",
          "bundle": "functions/bucket/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "c217d48e99"
        }
      },
      "bucketConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Maintain AWS > S3 > Bucket configuration.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it.\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "bucketDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS S3 bucket resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > S3 > Bucket > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/bucketCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/bucketCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/bucket/discovery",
          "bundle": "functions/bucket/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "3167d45df4"
        }
      },
      "bucketEncryptionAtRest": {
        "title": "Encryption at Rest",
        "icon": "fal-shield-alt",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the Encryption at Rest settings required for `AWS > S3 > Bucket`.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > S3 > Bucket > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action.\n"
      },
      "encryptionInTransit": {
        "title": "Encryption in Transit",
        "icon": "fal-user-secret",
        "description": "Define the Encryption in Transit settings required for `AWS > S3 > Bucket`.\n\nThe Encryption in Transit control compares the Encryption in Transit settings against the Encryption in Transit policies for the resource\n(AWS > S3 > Bucket > Encryption in Transit), raises an alarm, and takes the defined enforcement action.\n",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceEncryptionInTransit",
        "help": "#/help/bucketEncryptionInTransit"
      },
      "bucketPolicyStatements": {
        "title": "Policy Statements [Deprecated]",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other"
      },
      "bucketPolicyStatementsRulesApproved": {
        "title": "Approved [Deprecated]",
        "icon": "fal-coins",
        "description": "Configure Bucket Policy Statements checking. This control defines whether to\nverify the bucket policy statements are approved, as well as the\nsubsequent action to take on unapproved statements. Rules for all `Approved`\npolicies will be compiled in `Approved > Compiled Rules` and then\nevaluated.\n\nIf set to `Enforce: Delete unapproved`, any unapproved principal will be\nrevoked from the bucket policy.\n\n**Note:** This control has been deprecated in v5.6.0 and will be removed in v6.0.0. It is replaced by the `AWS > S3 > Bucket > Policy > Trusted Access` control.\n",
        "parent": "#/control/types/bucketPolicyStatements",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceApproved"
      },
      "bucketTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/bucket",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Take an action when an AWS S3 bucket tags is not updated based on the `AWS > S3 > Bucket > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > S3 > Bucket > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/bucketTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "bucketPolicy": {
        "title": "Policy",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/securityTrustedAccess"
      },
      "bucketPolicyTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield-alt",
        "parent": "#/control/types/bucketPolicy",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/bucket"
        ],
        "description": "Take an action when AWS S3 bucket policy is not trusted based on the\n`AWS > S3 > Bucket > Policy > Trusted Access > *` policies.\n\nThe Trusted Access control evaluates the bucket policy against the list of allowed\nmembers in each of the Trusted Access sub-policies (Trusted Access > Accounts,\nTrusted Access > Services etc.), this control raises an alarm and takes the\ndefined enforcement action.\n\nThe account that owns the bucket will always be trusted, even if its account ID is\nnot included in the Trusted Accounts policy.\n\nIf set to `Enforce: Revoke untrusted access`, access to non-trusted\nmembers will be removed.\n"
      },
      "bucketUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/bucket",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "The Usage control determines whether the number of AWS S3 bucket resources exceeds the configured usage limit for this account.\n\nYou can configure the behavior of this control with the  `AWS > S3 > Bucket > Usage` policy, and set the limit with the `AWS > S3 > Bucket > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/bucketUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "bucketVersioning": {
        "title": "Versioning",
        "icon": "fal-copy",
        "description": "Check if the AWS S3 bucket Versioning configuration is set correctly.",
        "parent": "#/resource/types/bucket",
        "targets": "#/resource/types/bucket",
        "category": "turbot#/control/categories/other",
        "help": "#/help/bucketVersioning"
      },
      "accountLevelPublicAccessBlock": {
        "title": "Public Access Block",
        "icon": "fal-ban",
        "description": "Configure the AWS S3 Account Level Public Access Block",
        "parent": "#/resource/types/s3Account",
        "targets": "#/resource/types/s3Account",
        "category": "turbot#/control/categories/other"
      },
      "s3AccountCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/s3Account",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/s3Account"
        ],
        "description": "Record and synchronize details for the AWS S3 account into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/s3AccountCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/s3Account/cmdb",
          "bundle": "functions/s3Account/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "091b4b9dfd"
        }
      },
      "s3AccountDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/s3Account",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Discover all AWS S3 account resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/s3AccountCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/s3AccountCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ]
      }
    }
  },
  "build": "20210427115232634"
}