{
  "$id": "tmod:@turbot/turbot",
  "author": "Turbot HQ, Inc",
  "title": "@turbot/turbot",
  "version": "5.34.1",
  "engines": {
    "te": ">=5.33.0"
  },
  "license": "For LICENSE see https://turbot.com/license",
  "resource": {
    "interfaces": {
      "grants": {
        "title": "Grants",
        "description": "Grants interface",
        "category": "turbot#/resource/categories/iam"
      },
      "maintainable": {
        "title": "Maintainable",
        "description": "maintainable interface.",
        "category": "turbot#/resource/categories/turbot"
      },
      "accountable": {
        "title": "Accountable",
        "description": "Accountable interface.",
        "category": "turbot#/resource/categories/turbot"
      }
    },
    "categories": {
      "analytics": {
        "title": "Analytics",
        "icon": "fal-analytics"
      },
      "applicationIntegration": {
        "title": "Application Integration",
        "icon": "fal-compress-arrows-alt"
      },
      "cloud": {
        "title": "Cloud",
        "icon": "far-cloud"
      },
      "cloudAccount": {
        "title": "Account",
        "parent": "#/resource/categories/cloud",
        "icon": "fal-cloud"
      },
      "cloudLocation": {
        "title": "Location",
        "parent": "#/resource/categories/cloud",
        "icon": "fal-globe"
      },
      "cloudOrganization": {
        "title": "Organization",
        "parent": "#/resource/categories/cloud",
        "icon": "fal-cloud"
      },
      "cloudService": {
        "title": "Service",
        "parent": "#/resource/categories/cloud",
        "icon": "fal-cloud"
      },
      "compute": {
        "title": "Compute",
        "icon": "fal-server"
      },
      "computeContainer": {
        "title": "Container",
        "parent": "#/resource/categories/compute",
        "icon": "fal-hdd"
      },
      "computeKubernetes": {
        "title": "Kubernetes",
        "parent": "#/resource/categories/compute",
        "icon": "fal-dharmachakra"
      },
      "computeFunction": {
        "title": "Function",
        "parent": "#/resource/categories/compute",
        "icon": "fal-puzzle-piece"
      },
      "computeServer": {
        "title": "Server",
        "parent": "#/resource/categories/compute",
        "icon": "fal-server"
      },
      "computeDisk": {
        "title": "Disk",
        "parent": "#/resource/categories/compute",
        "icon": "fal-hdd"
      },
      "endUserComputing": {
        "title": "End User Computing",
        "parent": "#/resource/categories/compute",
        "icon": "fal-users-cog"
      },
      "database": {
        "title": "Database",
        "icon": "fal-database"
      },
      "databaseServer": {
        "title": "Server",
        "parent": "#/resource/categories/database",
        "icon": "fal-server"
      },
      "databaseDatabase": {
        "title": "Database",
        "parent": "#/resource/categories/database",
        "icon": "fal-database"
      },
      "databaseTable": {
        "title": "Table",
        "parent": "#/resource/categories/database",
        "icon": "fal-table"
      },
      "developerTools": {
        "title": "Developer Tools",
        "icon": "fal-tools"
      },
      "iam": {
        "title": "IAM",
        "icon": "fal-users"
      },
      "iamServiceAccount": {
        "title": "Service Account",
        "parent": "#/resource/categories/iam",
        "icon": "fal-user-cog"
      },
      "iamGroup": {
        "title": "Group",
        "parent": "#/resource/categories/iam",
        "icon": "fal-users"
      },
      "iamUser": {
        "title": "User",
        "parent": "#/resource/categories/iam",
        "icon": "fal-user"
      },
      "iamAccessKey": {
        "title": "Access Key",
        "parent": "#/resource/categories/iam",
        "icon": "fal-key"
      },
      "machineLearning": {
        "title": "Machine Learning",
        "icon": "fal-brain"
      },
      "managementTools": {
        "title": "Management Tools",
        "icon": "fal-laptop-code"
      },
      "media": {
        "title": "Media",
        "icon": "fal-tv-retro"
      },
      "message": {
        "title": "Message",
        "icon": "fal-comment-alt-lines"
      },
      "messageEmail": {
        "title": "Email",
        "parent": "#/resource/categories/message",
        "icon": "fal-envelope"
      },
      "messageNotification": {
        "title": "Notification",
        "parent": "#/resource/categories/message",
        "icon": "fal-comment-alt-exclamation"
      },
      "messageQueue": {
        "title": "Queue",
        "parent": "#/resource/categories/message",
        "icon": "fal-list"
      },
      "mobile": {
        "title": "Mobile",
        "icon": "fal-mobile-alt"
      },
      "networking": {
        "title": "Networking",
        "icon": "fal-chart-network"
      },
      "networkingGateway": {
        "title": "Gateway",
        "parent": "#/resource/categories/networking",
        "icon": "fal-ethernet"
      },
      "networkingLoadBalancer": {
        "title": "Load Balancer",
        "parent": "#/resource/categories/networking",
        "icon": "fal-network-wired"
      },
      "contentDelivery": {
        "title": "Content Delivery",
        "parent": "#/resource/categories/networking",
        "icon": "fal-truck"
      },
      "security": {
        "title": "Security",
        "icon": "fal-shield-cross"
      },
      "compliance": {
        "title": "Compliance",
        "parent": "#/resource/categories/security",
        "icon": "fal-gavel"
      },
      "storage": {
        "title": "Storage",
        "icon": "fal-hdd"
      },
      "storageObject": {
        "title": "Object",
        "parent": "#/resource/categories/storage",
        "icon": "fal-th-large"
      },
      "storageContainer": {
        "title": "Container",
        "parent": "#/resource/categories/storage",
        "icon": "fab-bitbucket"
      },
      "turbot": {
        "title": "Turbot",
        "icon": "fab-android"
      },
      "other": {
        "title": "Other",
        "icon": "fal-ellipsis-h"
      }
    },
    "types": {
      "actionType": {
        "title": "Action Type",
        "icon": "fal-chevron-circle-right",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/actionType"
        }
      },
      "controlCategory": {
        "title": "Control Category",
        "icon": "fal-clipboard-list-check",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/controlCategory"
        }
      },
      "controlType": {
        "title": "Control Type",
        "icon": "fal-check-circle",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/controlType"
        }
      },
      "file": {
        "title": "File",
        "icon": "fal-file-alt",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "metadataTemplates": {
          "title": "{% if $.turbot.custom.title %}{{ $.turbot.custom.title }}{% elif $.title %}{{ $.title }} {% elif ($.turbot.akas) and ($.turbot.akas.length > 0) %} {{ $.turbot.akas[0] }} {% else %}{{ $.turbot.id }}{% endif %}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - title in metadata",
            "input": {
              "title": "topLevel",
              "turbot": {
                "id": "id",
                "akas": [
                  "aka1",
                  "aka2"
                ],
                "custom": {
                  "title": "custom"
                }
              }
            },
            "expect": {
              "title": "custom"
            }
          },
          {
            "description": "Valid - title at top level",
            "input": {
              "title": "topLevel",
              "turbot": {
                "id": "id",
                "akas": [
                  "aka1",
                  "aka2"
                ]
              }
            },
            "expect": {
              "title": "topLevel"
            }
          },
          {
            "description": "Valid - title is aka",
            "input": {
              "turbot": {
                "id": "id",
                "akas": [
                  "aka1",
                  "aka2"
                ]
              }
            },
            "expect": {
              "title": "aka1"
            }
          },
          {
            "description": "Valid - fall back to id",
            "input": {
              "turbot": {
                "id": "id"
              }
            },
            "expect": {
              "title": "id"
            }
          }
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/file"
        }
      },
      "folder": {
        "title": "Folder",
        "icon": "fas-folder",
        "parent": "#/resource/types/turbot",
        "interfaces": "#/resource/interfaces/grants",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "metadataTemplates": {
          "title": "{{ $.title }}"
        },
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/folder"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/folder"
            },
            {
              "type": "object",
              "required": [
                "title"
              ]
            }
          ]
        }
      },
      "mod": {
        "title": "Mod",
        "icon": "fal-project-diagram",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/mod"
        }
      },
      "permissionLevel": {
        "title": "Permission Level",
        "icon": "fal-users-class",
        "parent": "#/resource/types/mod",
        "resourceParents": "#/resource/types/mod",
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/permissionLevel"
        }
      },
      "permissionType": {
        "title": "Permission Type",
        "icon": "fal-users-class",
        "parent": "#/resource/types/mod",
        "resourceParents": "#/resource/types/mod",
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/permissionType"
        }
      },
      "policyType": {
        "title": "Policy Type",
        "icon": "fal-file-alt",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/policyType"
        }
      },
      "resourceCategory": {
        "title": "Resource Category",
        "icon": "fal-clipboard-list",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/resourceCategory"
        }
      },
      "resourceType": {
        "title": "Resource Type",
        "icon": "fal-object-group",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/resourceType"
        }
      },
      "resourceGroup": {
        "title": "Resource Group",
        "icon": "fal-grip-horizontal",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/resourceGroup"
        }
      },
      "resourceInterface": {
        "title": "Resource Interface",
        "icon": "fal-chevron-circle-right",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot"
        ],
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/interfaceType"
        }
      },
      "smartFolder": {
        "title": "Smart Folder",
        "icon": "fal-suitcase",
        "parent": "#/resource/types/turbot",
        "resourceParents": [
          "#/resource/types/turbot",
          "#/resource/types/folder"
        ],
        "metadataTemplates": {
          "title": "{{ $.title }}"
        },
        "category": "#/resource/categories/turbot",
        "schema": {
          "$ref": "#/definitions/smartFolder"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/smartFolder"
            },
            {
              "type": "object",
              "required": [
                "title"
              ]
            }
          ]
        }
      },
      "turbot": {
        "title": "Turbot",
        "icon": "fab-android",
        "category": "#/resource/categories/turbot",
        "interfaces": "#/resource/interfaces/grants",
        "schema": {
          "$ref": "#/definitions/turbot"
        }
      }
    }
  },
  "action": {
    "types": {
      "rotateWebhookSecret": {
        "title": "Rotate Webhook Secret",
        "icon": "fal-passport",
        "description": "Rotate the webhook secret",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot"
      }
    }
  },
  "control": {
    "categories": {
      "api": {
        "title": "API",
        "icon": "fal-arrows-h",
        "parent": "#/control/categories/turbot"
      },
      "apiLimit": {
        "title": "Limit",
        "icon": "fal-chart-pie",
        "parent": "#/control/categories/api"
      },
      "apiPageSize": {
        "title": "Page Size",
        "icon": "fal-file-alt",
        "parent": "#/control/categories/api"
      },
      "cloud": {
        "title": "Cloud",
        "icon": "far-cloud"
      },
      "cloudService": {
        "title": "Service",
        "parent": "#/control/categories/cloud",
        "icon": "fal-cloud"
      },
      "cloudLocation": {
        "title": "Location",
        "parent": "#/control/categories/cloud",
        "icon": "fal-globe"
      },
      "cmdb": {
        "title": "CMDB",
        "icon": "fal-coins"
      },
      "cmdbDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/control/categories/cmdb"
      },
      "iam": {
        "title": "IAM",
        "icon": "fal-users"
      },
      "iamPermissions": {
        "title": "Permissions",
        "icon": "fal-user-shield",
        "parent": "#/control/categories/iam"
      },
      "organization": {
        "title": "Organization",
        "icon": "fal-sitemap"
      },
      "policy": {
        "title": "Policy",
        "icon": "fal-file-alt",
        "parent": "#/control/categories/organization"
      },
      "resource": {
        "title": "Resource",
        "icon": "fal-object-group"
      },
      "resourceExpiration": {
        "title": "Expiration",
        "icon": "fal-battery-empty",
        "parent": "#/control/categories/resource"
      },
      "configured": {
        "title": "Configured",
        "icon": "fal-badge-check",
        "parent": "#/control/categories/resource"
      },
      "resourceActive": {
        "title": "Active",
        "icon": "fal-fire-alt",
        "parent": "#/control/categories/resource"
      },
      "resourceApiEnabled": {
        "title": "API Enabled",
        "icon": "fal-lock-open",
        "parent": "#/control/categories/resource"
      },
      "resourceApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/control/categories/resource"
      },
      "resourceLimits": {
        "title": "Limits",
        "icon": "fal-chart-pie",
        "parent": "#/control/categories/resource"
      },
      "resourceTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/control/categories/resource"
      },
      "resourceUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/control/categories/resource"
      },
      "resourceEncryptionAtRest": {
        "title": "Encryption at Rest",
        "icon": "fal-shield-alt",
        "parent": "#/control/categories/resource"
      },
      "resourceEncryptionInTransit": {
        "title": "Encryption in Transit",
        "icon": "fal-lock-open-alt",
        "parent": "#/control/categories/resource"
      },
      "resourceDataProtection": {
        "title": "Data Protection",
        "icon": "fal-warehouse-alt",
        "parent": "#/control/categories/resource"
      },
      "resourceLogging": {
        "title": "Logging",
        "icon": "fal-info",
        "parent": "#/control/categories/resource"
      },
      "resourceSchedule": {
        "title": "Schedule",
        "icon": "fal-clock",
        "parent": "#/control/categories/resource"
      },
      "resourceRequired": {
        "title": "Required",
        "icon": "fal-check-square",
        "parent": "#/control/categories/resource"
      },
      "resourceMigration": {
        "title": "Migration",
        "icon": "fal-arrow-from-left",
        "parent": "#/control/categories/resource"
      },
      "security": {
        "title": "Security",
        "icon": "fal-shield-alt"
      },
      "securityTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-user-alt",
        "parent": "#/control/categories/security"
      },
      "turbot": {
        "title": "Turbot",
        "icon": "fab-android"
      },
      "other": {
        "title": "Other",
        "icon": "fal-ellipsis-h"
      }
    },
    "types": {
      "activeGrantExpiration": {
        "title": "Active Grant Expiration",
        "icon": "value-absolute",
        "description": "Ensure that a active grant is deleted on expiration.",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      },
      "backgroundTasks": {
        "title": "Background Tasks",
        "icon": "fal-tasks-alt",
        "description": "Ensure the next tick timestamp is updated for the controls. The control updates the next_tick_timestamp after the type installed has been completed.\n\nNote: `The control will remain in skip state from TE version 5.35.3 and above.`\n",
        "parent": "#/control/types/controlInstalled",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "defaultInterval": {
          "minutes": 60
        },
        "events": []
      },
      "controlInstalled": {
        "title": "Type Installed",
        "icon": "fal-directions",
        "description": "Ensure that a control, policy or action is installed correctly. Deploys control and action Lambda functions.",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/controlType",
          "#/resource/types/actionType",
          "#/resource/types/policyType"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      },
      "eventMonitor": {
        "title": "Event Monitor",
        "icon": "fal-directions",
        "description": "Check controls and policies that have defaultInterval attribute in their definition. Restart these controls and policies if applicable.",
        "parent": "#/resource/types/mod",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": [],
        "defaultInterval": {
          "minutes": 10
        },
        "minInterval": {
          "minutes": 10
        },
        "maxInterval": {
          "days": 1
        }
      },
      "grantExpiration": {
        "title": "Grant Expiration",
        "icon": "value-absolute",
        "description": "Ensure that a grant is deleted on expiration.",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      },
      "modAutoUpdate": {
        "title": "Auto Update",
        "icon": "fal-directions",
        "description": "Check mod health status",
        "parent": "#/resource/types/mod",
        "targets": [
          "#/resource/types/mod"
        ],
        "category": "#/control/categories/turbot",
        "events": [],
        "defaultInterval": {
          "days": 1
        },
        "minInterval": {
          "days": 1
        },
        "maxInterval": {
          "days": 7
        }
      },
      "modHealth": {
        "title": "Health",
        "icon": "fal-directions",
        "description": "Check mod health status",
        "parent": "#/resource/types/mod",
        "targets": [
          "#/resource/types/mod"
        ],
        "category": "#/control/categories/turbot",
        "events": [],
        "defaultInterval": {
          "days": 1
        },
        "minInterval": {
          "days": 1
        },
        "maxInterval": {
          "days": 7
        }
      },
      "modInstalled": {
        "title": "Installed",
        "icon": "fal-directions",
        "description": "Ensure that a mod is installed correctly.",
        "parent": "#/resource/types/mod",
        "targets": [
          "#/resource/types/mod"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      },
      "policySettingExpiration": {
        "title": "Policy Setting Expiration",
        "icon": "value-absolute",
        "description": "Ensure that a policy setting is deleted on expiration.",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      },
      "processMonitor": {
        "title": "Process Monitor",
        "icon": "fal-directions",
        "description": "Check running Turbot Processes, terminate if necessary",
        "parent": "#/resource/types/mod",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": [],
        "defaultInterval": {
          "minutes": 10
        },
        "minInterval": {
          "minutes": 10
        },
        "maxInterval": {
          "days": 1
        }
      },
      "runnableMonitor": {
        "title": "Runnable Monitor",
        "icon": "fal-directions",
        "description": "Check controls and policies that are in error state and re-run if they are not already scheduled for a re-run.",
        "parent": "#/resource/types/mod",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": [],
        "defaultInterval": {
          "minutes": 10
        },
        "minInterval": {
          "minutes": 10
        },
        "maxInterval": {
          "days": 1
        }
      },
      "smartProcessRetention": {
        "title": "Smart Process Retention",
        "icon": "fal-calendar-check",
        "description": "One of the principal design goals of Turbot is to enable change - to help ensure security, reliability, and consistency in dynamic environments.\nAs a result, capturing change and storing historical information are fundamental to the way Turbot operates.\nIn fact, Turbot creates a new version for each process run and change of state e.g. a new version when process goes from starting to handling.\n\nWhile there is some benefit in storing all versions of all entities forever, there is a tradeoff in performance and storage capacity.\nEvery version must be stored and indexed.\n\nTurbot Smart Retention helps manage the compromise between too much data and too little information.\n",
        "parent": "#/resource/types/turbot",
        "defaultInterval": {
          "days": 1,
          "minutes": 10
        },
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      },
      "smartRetention": {
        "title": "Smart Retention",
        "icon": "fal-calendar-check",
        "description": "One of the principal design goals of Turbot is to enable change - to help ensure security, reliability, and consistency in dynamic environments.\nAs a result, capturing change and storing historical information are fundamental to the way Turbot operates.\nIn fact, Turbot creates a new version for each resource every time that resource is changed, providing a full history of the resource. Controls, Policy Settings, Policy Values, and Logs are also versioned per resource.\n\nWhile there is some benefit in storing all versions of all entities forever, there is a tradeoff in performance and storage capacity.\nEvery version must be stored and indexed. Every version added is another to search through.\n\nTurbot Smart Retention helps manage the compromise between too much data and too little information.\n",
        "parent": "#/resource/types/turbot",
        "defaultInterval": {
          "days": 1,
          "minutes": 10
        },
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      },
      "webhookSecretRotation": {
        "title": "Webhook Secret Rotation",
        "icon": "fal-passport",
        "description": "Determine whether the Webhook secret requires rotation",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "defaultInterval": {
          "days": 1
        },
        "minInterval": {
          "days": 1
        },
        "maxInterval": {
          "days": 1
        }
      },
      "workspace": {
        "title": "Workspace",
        "icon": "fal-passport",
        "parent": "#/resource/types/turbot",
        "category": "turbot#/control/categories/turbot"
      },
      "workspaceUsage": {
        "title": "Usage",
        "icon": "list-alt",
        "description": "Log workspace usage to turbot.com.",
        "parent": "#/control/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": [],
        "defaultInterval": {
          "hours": 1
        },
        "maxInterval": {
          "hours": 12
        }
      },
      "migration": {
        "title": "Migration",
        "icon": "fal-calendar-check",
        "description": "Migration control to perform bulk operations such as large table updates in batches.\n",
        "parent": "#/control/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      },
      "workspaceBackgroundTasks": {
        "title": "Background Tasks",
        "icon": "fal-tasks-alt",
        "description": "The control is used to perform background tasks in turbot.\n\nThis ensures the policy values are updated correctly after the resource movement.\nIt also ensures that policy hierarchy settings are verified and missing records created after smart folder attachment.\n",
        "parent": "#/control/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "defaultInterval": {
          "hours": 48
        },
        "events": []
      },
      "workspaceHealthControl": {
        "title": "Health Control",
        "icon": "fal-calendar-check",
        "defaultInterval": {
          "hours": 24
        },
        "description": "`Slow queries in idle state` - Queries should run quickly and should not be idle for more than a couple of minutes.\n\n`Top 5 unused indexes` - Indexes are used to ensure good query performance, but sometimes those indexes become unused due to changes in the query patterns or other (competing) indexes. Unused indexes are an opportunity for cleanup and reduced database size / workload. For most workspaces, we expect this list to be empty. If some indexes have a scan frequency (idx_scans) of zero, then they are not being used.\n\n`Biggest indexes and tables` - Insight into the tables and indexes using the most database space in this workspace. This gives us clarity into opportunities for improvement and the primary drivers of disk space cost.\n\n`Last run autovacuum` - Autovacuum is an important part of database health which clears out deleted data. It is run periodically based on table sizes and the rate of change. We'd expect autovacuum to run within the last week for most tables.\n\n`Live and dead tuples` - Deleted data that has not yet been, or cannot be, vacuumed up is reported as dead tuples. For most tables, we expect the ratio of dead tuples to be low compared to live tuples. This gives us insight into the current ratio and effectiveness of autovacuum operations.\n\n`Invalid indexes` - There should not be any invalid indexes in the database. An invalid index will not be used in queries because they might be incomplete, however it will still consume update overhead hampering update / insert performances.\n\n`Bloated indexes` - There should not be any bloated indexes in the database.\n",
        "parent": "#/control/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "events": []
      }
    }
  },
  "definitions": {
    "actionType": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        },
        "parent": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "$ref": "#/definitions/actionTypeReference"
            }
          ]
        },
        "targets": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resourceTypeReference"
              }
            }
          ]
        },
        "category": {
          "$ref": "#/definitions/controlCategoryReference"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventId"
          },
          "minItems": 0
        },
        "help": {
          "$ref": "#/definitions/helpReference"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyTypeReference"
          },
          "minItems": 1
        },
        "input": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 1
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            }
          ]
        },
        "inline": {
          "type": "string",
          "minLength": 1
        },
        "function": {
          "$ref": "#/definitions/lambdaFunction"
        },
        "stateMachine": {
          "type": "object"
        },
        "validationIgnoreChildProperties": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "schema": {
          "type": "object"
        },
        "tests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testType"
          },
          "minLength": 1
        },
        "testOptions": {
          "type": "object"
        }
      },
      "required": [
        "title",
        "category"
      ],
      "additionalProperties": false
    },
    "actionTypeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/action/types/"
        }
      ]
    },
    "$schema": {
      "$ref": "http://json-schema.org/draft-07/schema#"
    },
    "$ref": {
      "type": "string",
      "format": "uri-reference"
    },
    "email": {
      "type": "string",
      "pattern": "[^\\s@]+@[^\\s@]+\\.[^\\s@]+$",
      "minLength": 6,
      "maxLength": 254,
      "tests": [
        {
          "description": "base Case",
          "input": "superman@crpton.com"
        },
        {
          "description": "invalid - not an email id format",
          "input": "This_is_not_Superman's_email",
          "expected": false
        },
        {
          "decription": "invalid - too short",
          "input": "t.com",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"§$%&/()=?*'<>;²³~@`´©«»¤¼×{}abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"§$%&/()=?*'<>|;²³~@`´©«»¤¼×{}abcdefghijklmnopqrstuvwxyz0123456789012345678901234567890123456789012345678901234@test.com",
          "expected": false
        }
      ]
    },
    "isoTimestamp": {
      "description": "Datetime represented in ISO format",
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
    },
    "trimmedString": {
      "title": "Trimmed String",
      "description": "String with no leading or trailing whitespace.",
      "type": "string",
      "pattern": "^[^\\s](.*[^\\s])?$"
    },
    "title": {
      "allOf": [
        {
          "$ref": "#/definitions/trimmedString"
        },
        {
          "maxLength": 64
        }
      ]
    },
    "description": {
      "allOf": [
        {
          "$ref": "#/definitions/trimmedString"
        },
        {
          "maxLength": 1024
        }
      ]
    },
    "hexadecimalColorCode": {
      "title": "Hexadecimal Color Code",
      "description": "Color code represented in 3 or 6-character hexadecimal format.",
      "type": "string",
      "pattern": "^#([0-9a-fA-F]{3}){1,2}$",
      "tests": [
        {
          "input": "#fff"
        },
        {
          "input": "#FFF"
        },
        {
          "input": "#0db6c9"
        },
        {
          "input": "#0DB6C9"
        },
        {
          "description": "invalid 3-character - no # at start",
          "input": "fff",
          "expected": false
        },
        {
          "description": "invalid 6-character - no # at start",
          "input": "0db6c9",
          "expected": false
        },
        {
          "description": "invalid 3-character - invalid symbols",
          "input": "#ff!",
          "expected": false
        },
        {
          "description": "invalid 6-character - invalid symbols",
          "input": "#0D@6C9",
          "expected": false
        }
      ]
    },
    "icon": {
      "type": "string",
      "pattern": "^(fab|fal|far|fas)-[a-z0-9-]+$",
      "tests": [
        {
          "input": "fab-android"
        },
        {
          "input": "fal-hdd"
        },
        {
          "input": "far-hdd"
        },
        {
          "input": "fas-hdd"
        },
        {
          "input": "fal-file-certificate"
        },
        {
          "description": "invalid - old format for font awesome v4",
          "input": "hdd-o",
          "expected": false
        },
        {
          "description": "invalid - unmodified icon class",
          "input": "fal fa-hdd",
          "expected": false
        }
      ]
    },
    "eventId": {
      "title": "Event ID",
      "type": "string",
      "pattern": "^[a-zA-Z0-9][a-zA-Z0-9.:-]*[a-zA-Z0-9]$"
    },
    "folder": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "turbot": {
          "$ref": "#/definitions/resourceMetadata"
        }
      },
      "additionalProperties": false
    },
    "file": {
      "type": "object",
      "properties": {
        "turbot": {
          "$ref": "#/definitions/resourceMetadata"
        }
      },
      "additionalProperties": true
    },
    "smartFolder": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "color": {
          "$ref": "#/definitions/hexadecimalColorCode"
        },
        "turbot": {
          "$ref": "#/definitions/resourceMetadata"
        }
      },
      "additionalProperties": false
    },
    "interface": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    },
    "turbot": {
      "allOf": [
        {
          "$ref": "#/definitions/folder"
        },
        {
          "properties": {
            "title": {
              "const": "Turbot"
            }
          }
        }
      ]
    },
    "duration": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "years": {
              "type": "integer",
              "minimum": 0
            },
            "y": {
              "type": "integer",
              "minimum": 0
            },
            "months": {
              "type": "integer",
              "minimum": 0
            },
            "M": {
              "type": "integer",
              "minimum": 0
            },
            "weeks": {
              "type": "integer",
              "minimum": 0
            },
            "w": {
              "type": "integer",
              "minimum": 0
            },
            "days": {
              "type": "integer",
              "minimum": 0
            },
            "d": {
              "type": "integer",
              "minimum": 0
            },
            "hours": {
              "type": "integer",
              "minimum": 0
            },
            "h": {
              "type": "integer",
              "minimum": 0
            },
            "minutes": {
              "type": "integer",
              "minimum": 0
            },
            "m": {
              "type": "integer",
              "minimum": 0
            },
            "seconds": {
              "type": "integer",
              "minimum": 0
            },
            "s": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "service": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    },
    "terraformResourceTypeMetadata": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/terraformType"
        },
        "stateIdTemplate": {
          "$ref": "#/definitions/trimmedString"
        },
        "propertyMap": {
          "type": "object"
        },
        "stateDefaults": {
          "type": "object"
        },
        "lifecycle": {
          "$ref": "#/definitions/lifecycle"
        }
      },
      "required": [
        "type",
        "stateIdTemplate",
        "propertyMap"
      ],
      "additionalProperties": false
    },
    "lifecycle": {
      "type": "object",
      "properties": {
        "cmdbDelete": {
          "type": "string",
          "enum": [
            "keep",
            "delete"
          ]
        },
        "delete": {
          "type": "string",
          "enum": [
            "keep",
            "deleteIfStackCreated",
            "delete"
          ]
        }
      }
    },
    "terraformType": {
      "title": "Terraform Type",
      "description": "Terraform typename, lower case alphanumeric or underbar.",
      "type": "string",
      "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$"
    },
    "testEnvDatetimeType": {
      "type": "object",
      "properties": {
        "now": {
          "$ref": "#/definitions/isoTimestamp"
        }
      },
      "additionalProperties": false
    },
    "testEnvType": {
      "type": "object",
      "properties": {
        "datetime": {
          "$ref": "#/definitions/testEnvDatetimeType"
        }
      },
      "additionalProperties": false
    },
    "testType": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/description"
        },
        "input": {
          "type": "object"
        },
        "testInput": {
          "type": "object"
        },
        "env": {
          "$ref": "#/definitions/testEnvType"
        },
        "expected": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object"
            }
          ]
        },
        "expect": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object"
            }
          ]
        },
        "expectError": {
          "type": "object"
        },
        "skip": {
          "type": "boolean",
          "default": false
        },
        "data": {
          "type": "object"
        },
        "template": {
          "type": "string"
        },
        "templateInput": {
          "type": "object"
        },
        "options": {
          "type": "object"
        }
      },
      "anyOf": [
        {
          "required": [
            "description",
            "input",
            "expect"
          ]
        },
        {
          "required": [
            "description",
            "input",
            "expected"
          ]
        },
        {
          "required": [
            "description",
            "input",
            "expectError"
          ]
        }
      ],
      "additionalProperties": false
    },
    "helpReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/help/"
        }
      ]
    },
    "urn": {
      "description": "URN in Turbot format, used to uniquely identify any resource in an AKA field.",
      "type": "string",
      "pattern": "^urn:turbot(?::.+)?$"
    },
    "readOnly": {
      "type": "boolean",
      "tests": [
        {
          "description": "invalid - mode(case)",
          "input": "readOnly",
          "expected": false
        },
        {
          "description": "blank string",
          "input": "",
          "expected": false
        },
        {
          "description": "valid",
          "input": true
        }
      ]
    },
    "private": {
      "type": "boolean",
      "tests": [
        {
          "description": "invalid - mode(case)",
          "input": "private",
          "expected": false
        },
        {
          "description": "valid",
          "input": true
        }
      ]
    },
    "secret": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        }
      },
      "required": [
        "id"
      ],
      "additionalProperties": false,
      "tests": [
        {
          "description": "invalid - mode(case)",
          "input": {
            "id": "abc"
          },
          "expected": false
        },
        {
          "description": "valid",
          "input": {
            "id": 12121
          }
        }
      ]
    },
    "author": {
      "allOf": [
        {
          "$ref": "#/definitions/trimmedString"
        },
        {
          "maxLength": 64
        }
      ]
    },
    "license": {
      "allOf": [
        {
          "$ref": "#/definitions/trimmedString"
        },
        {
          "maxLength": 1024
        }
      ]
    },
    "lock": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "version": {
      "allOf": [
        {
          "$ref": "#/definitions/trimmedString"
        },
        {
          "maxLength": 64
        }
      ]
    },
    "secretLevel": {
      "description": "Defines the secret level of the policy type (most sensitive to least).",
      "type": "string",
      "enum": [
        "SECRET",
        "CONFIDENTIAL",
        "NONE"
      ],
      "tests": [
        {
          "description": "valid case NONE",
          "input": "NONE",
          "expected": true
        },
        {
          "description": "valid case CONFIDENTIAL",
          "input": "CONFIDENTIAL",
          "expected": true
        },
        {
          "description": "Invalid case TOP_SECRET",
          "input": "TOP_SECRET",
          "expected": false
        }
      ]
    },
    "changeWindowSchedule": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "duration": {
          "type": "number",
          "minimum": 1,
          "maximum": 24
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "start": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "cron": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        }
      },
      "anyOf": [
        {
          "required": [
            "description",
            "duration",
            "name",
            "cron"
          ]
        },
        {
          "required": [
            "description",
            "duration",
            "name",
            "start"
          ]
        }
      ],
      "additionalProperties": false
    },
    "controlCategory": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        },
        "parent": {
          "$ref": "#/definitions/controlCategoryReference"
        },
        "resourceParents": {
          "$ref": "#/definitions/controlCategoryReference"
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    },
    "controlCategoryReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/control/categories/"
        }
      ]
    },
    "controlTypeFlags": {
      "type": "string",
      "enum": [
        "transientStorage"
      ]
    },
    "lambdaFunction": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "src": {
          "type": "string"
        },
        "bundle": {
          "type": "string"
        },
        "memory": {
          "type": "integer",
          "minimum": 0
        },
        "timeout": {
          "type": "integer",
          "minimum": 0,
          "maximum": 300
        }
      },
      "required": [
        "bundle"
      ]
    },
    "controlType": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        },
        "parent": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "$ref": "#/definitions/controlTypeReference"
            }
          ]
        },
        "targets": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resourceTypeReference"
              }
            }
          ]
        },
        "lock": {
          "$ref": "#/definitions/lock"
        },
        "flags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 0
        },
        "category": {
          "$ref": "#/definitions/controlCategoryReference"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/eventId"
          },
          "minItems": 0
        },
        "duration": {
          "$ref": "#/definitions/duration"
        },
        "help": {
          "$ref": "#/definitions/helpReference"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyTypeReference"
          },
          "minItems": 1
        },
        "input": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 1
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            }
          ]
        },
        "inline": {
          "type": "string",
          "minLength": 1
        },
        "trustedInline": {
          "type": "string",
          "minLength": 1
        },
        "function": {
          "$ref": "#/definitions/lambdaFunction"
        },
        "container": {
          "type": "object"
        },
        "stateMachine": {
          "type": "object"
        },
        "validationIgnoreChildProperties": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "tests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testType"
          },
          "minLength": 1
        },
        "testOptions": {
          "type": "object"
        }
      },
      "required": [
        "title",
        "category"
      ],
      "additionalProperties": false
    },
    "controlTypeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/control/types/"
        }
      ]
    },
    "interfaceType": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "category": {
          "$ref": "#/definitions/controlCategoryReference"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        }
      },
      "required": [
        "title",
        "description",
        "category"
      ],
      "additionalProperties": false
    },
    "mod": {
      "allOf": [
        {
          "$ref": "http://json-schema.org/draft-07/schema#"
        },
        {
          "type": "object",
          "properties": {
            "$id": {
              "type": "string"
            },
            "definitions": {
              "type": "object",
              "properties": {
                "tests": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/testType"
                  }
                }
              },
              "additionalProperties": {
                "$ref": "http://json-schema.org/draft-07/schema#"
              },
              "default": {}
            },
            "title": {
              "$ref": "#/definitions/title"
            },
            "description": {
              "$ref": "#/definitions/description"
            },
            "author": {
              "$ref": "#/definitions/author"
            },
            "license": {
              "$ref": "#/definitions/license"
            },
            "version": {
              "$ref": "#/definitions/version"
            },
            "scripts": {
              "$ref": "#/definitions/scripts"
            },
            "peerDependencies": {
              "$ref": "#/definitions/peerDependencies"
            },
            "engines": {
              "$ref": "#/definitions/engines"
            },
            "data": {
              "type": "object",
              "additionalProperties": true,
              "default": {}
            },
            "resource": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/resourceCategory"
                  },
                  "default": {}
                },
                "types": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/resourceType"
                  },
                  "default": {}
                },
                "interfaces": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/interfaceType"
                  },
                  "default": {}
                }
              },
              "additionalProperties": false,
              "default": {}
            },
            "control": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/controlCategory"
                  },
                  "default": {}
                },
                "types": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/controlType"
                  },
                  "default": {}
                }
              },
              "additionalProperties": false,
              "default": {}
            },
            "action": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/controlCategory"
                  },
                  "default": {}
                },
                "types": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/actionType"
                  },
                  "default": {}
                }
              },
              "additionalProperties": false,
              "default": {}
            },
            "policy": {
              "type": "object",
              "properties": {
                "types": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/policyType"
                  },
                  "default": {}
                }
              },
              "additionalProperties": false,
              "default": {}
            },
            "report": {
              "type": "object",
              "properties": {
                "types": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/reportType"
                  },
                  "default": {}
                }
              },
              "additionalProperties": false,
              "default": {}
            },
            "permission": {
              "type": "object",
              "properties": {
                "levels": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/permissionLevel"
                  },
                  "default": {}
                },
                "types": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/permissionType"
                  },
                  "default": {}
                }
              },
              "additionalProperties": false,
              "default": {}
            }
          },
          "required": [
            "$id",
            "title"
          ],
          "additionalProperties": false
        }
      ]
    },
    "scripts": {
      "type": "object"
    },
    "peerDependencies": {
      "type": "object"
    },
    "engines": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "te": {
          "type": "string",
          "pattern": "^((\\^|~|>|>=|<|<=)?(0|[1-9]\\d*)\\.?(\\*|0|[1-9]\\d*)?\\.?(\\*|0|[1-9]\\d*)?(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?|\\*)$"
        }
      }
    },
    "permissionLevel": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "parent": {
          "oneOf": [
            {
              "$ref": "#/definitions/permissionLevelReference"
            }
          ]
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    },
    "permissionLevelReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/permission/levels/"
        }
      ]
    },
    "permissionType": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "parent": {
          "oneOf": [
            {
              "$ref": "#/definitions/permissionTypeReference"
            }
          ]
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    },
    "permissionTypeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/permission/types/"
        }
      ]
    },
    "permission": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "parent": {
          "oneOf": [
            {
              "$ref": "#/definitions/permissionReference"
            }
          ]
        }
      },
      "required": [
        "title"
      ],
      "additionalProperties": false
    },
    "permissionReference": {
      "allOf": [
        {
          "type": "string"
        }
      ]
    },
    "policyType": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        },
        "readOnly": {
          "$ref": "#/definitions/readOnly"
        },
        "secretLevel": {
          "$ref": "#/definitions/secretLevel"
        },
        "secret": {
          "type": "boolean"
        },
        "private": {
          "$ref": "#/definitions/private"
        },
        "parent": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "$ref": "#/definitions/policyTypeReference"
            }
          ]
        },
        "targets": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resourceTypeReference"
              }
            }
          ]
        },
        "aka": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/trimmedString"
          }
        },
        "category": {
          "$ref": "#/definitions/controlCategoryReference"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/definitions/policySettingsDefault"
            },
            {
              "default": "data"
            }
          ]
        },
        "input": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 1
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            }
          ]
        },
        "inline": {
          "type": "string",
          "minLength": 1
        },
        "duration": {
          "$ref": "#/definitions/duration"
        },
        "function": {
          "$ref": "#/definitions/lambdaFunction"
        },
        "stateMachine": {
          "type": "object"
        },
        "validationIgnoreChildProperties": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "tests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyTestType"
          },
          "minLength": 1
        },
        "testOptions": {
          "type": "object"
        },
        "defaultTemplate": {
          "type": "string"
        },
        "defaultTemplateInput": {
          "type": "string"
        },
        "defaultPrecedence": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/$schema"
        }
      },
      "required": [
        "title",
        "targets",
        "category",
        "schema"
      ],
      "additionalProperties": false
    },
    "policyTypeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/policy/types/"
        }
      ]
    },
    "policySettingsDefault": {
      "description": "the default setting type for a policy.",
      "type": "string",
      "pattern": "^(none|data|template)$"
    },
    "policyTestType": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/description"
        },
        "input": {
          "type": "object"
        },
        "env": {
          "$ref": "#/definitions/testEnvType"
        },
        "expect": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object"
            }
          ]
        },
        "expectError": {
          "type": "object"
        },
        "skip": {
          "type": "boolean",
          "default": false
        },
        "data": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "templateInput": {
          "type": "object"
        },
        "options": {
          "type": "object"
        }
      },
      "anyOf": [
        {
          "required": [
            "description",
            "data"
          ]
        },
        {
          "required": [
            "description",
            "template",
            "templateInput"
          ]
        },
        {
          "required": [
            "description",
            "input"
          ]
        }
      ],
      "additionalProperties": false
    },
    "reportType": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        },
        "parent": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "$ref": "#/definitions/policyTypeReference"
            }
          ]
        },
        "targets": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resourceTypeReference"
              }
            }
          ]
        },
        "aka": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/trimmedString"
          }
        },
        "category": {
          "$ref": "#/definitions/controlCategoryReference"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/definitions/policySettingsDefault"
            },
            {
              "default": "template"
            }
          ]
        },
        "outputFormat": {
          "$ref": "#/definitions/reportOutputFormat"
        },
        "input": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 1
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              }
            }
          ]
        },
        "inline": {
          "type": "string",
          "minLength": 1
        },
        "function": {
          "type": "object"
        },
        "stateMachine": {
          "type": "object"
        },
        "validationIgnoreChildProperties": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "tests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyTestType"
          },
          "minLength": 1
        },
        "defaultTemplate": {
          "type": "string"
        },
        "defaultTemplateInput": {
          "type": "string"
        },
        "defaultPrecedence": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/$schema"
        }
      },
      "required": [
        "title",
        "targets",
        "category",
        "schema"
      ],
      "additionalProperties": false
    },
    "reportOutputFormat": {
      "description": "the output format for a report.",
      "type": "string",
      "pattern": "^(pdf|csv)$",
      "default": "pdf"
    },
    "pivotIds": {
      "type": "array",
      "items": {
        "type": "integer"
      },
      "tests": [
        {
          "description": "base",
          "input": [
            12121212121,
            121121212121
          ]
        },
        {
          "description": "invalid - empty",
          "input": null,
          "expected": false
        }
      ]
    },
    "pivotLevels": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "tests": [
        {
          "description": "base",
          "input": [
            "self",
            "descendant"
          ]
        },
        {
          "description": "invalid - empty",
          "input": "",
          "expected": false
        }
      ]
    },
    "automation": {
      "type": "object",
      "properties": {
        "match": {
          "type": "object"
        },
        "state": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ]
        },
        "resource": {
          "$ref": "#/definitions/pivotIds"
        },
        "resourceLevel": {
          "$ref": "#/definitions/pivotLevels"
        },
        "resourceType": {
          "$ref": "#/definitions/pivotIds"
        },
        "resourceTypeLevel": {
          "$ref": "#/definitions/pivotLevels"
        },
        "resourceCategory": {
          "$ref": "#/definitions/pivotIds"
        },
        "resourceCategoryLevel": {
          "$ref": "#/definitions/pivotLevels"
        }
      },
      "additionalProperties": false,
      "tests": [
        {
          "description": "base",
          "input": {
            "match": {
              "Aws": {
                "AccountID": "123456789012",
                "Region": "us-east-1",
                "TagsMap": {}
              }
            },
            "state": "active",
            "resource": [
              12121212122,
              12121212121
            ],
            "resourceLevel": [
              "self",
              "descendant"
            ],
            "resourceType": [
              12121212122,
              12121212121
            ],
            "resourceTypeLevel": [
              "self",
              "descendant"
            ]
          }
        },
        {
          "description": "error case - resource is string",
          "input": {
            "match": {
              "Aws": {
                "AccountID": "123456789012",
                "Region": "us-east-1",
                "TagsMap": {}
              }
            },
            "state": "active",
            "resource": [
              "abc",
              12121212121
            ],
            "resourceLevel": [
              "self",
              "descendant"
            ],
            "resourceType": [
              12121212122,
              12121212121
            ],
            "resourceTypeLevel": [
              "self",
              "descendant"
            ]
          },
          "expected": false
        },
        {
          "description": "error case - unknown field",
          "input": {
            "match": {
              "Aws": {
                "AccountID": "123456789012",
                "Region": "us-east-1",
                "TagsMap": {}
              }
            },
            "state": "active",
            "resource": [
              "12121212122",
              12121212121
            ],
            "resourceLevel": [
              "self",
              "descendant"
            ],
            "resourceType": [
              12121212122,
              12121212121
            ],
            "resourceTypeLevels": [
              "self",
              "descendant"
            ]
          },
          "expected": false
        }
      ]
    },
    "resourceGroup": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "automation": {
          "$ref": "#/definitions/automation"
        },
        "parent": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            }
          ]
        },
        "targets": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resourceTypeReference"
              }
            }
          ]
        },
        "turbot": {
          "$ref": "#/definitions/resourceMetadata"
        }
      },
      "required": [
        "title",
        "automation"
      ],
      "additionalProperties": false
    },
    "resourceCategory": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "parent": {
          "$ref": "#/definitions/resourceCategoryReference"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        }
      },
      "required": [
        "title",
        "icon"
      ],
      "additionalProperties": false
    },
    "resourceCategoryReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/resource/categories/"
        }
      ]
    },
    "resourceType": {
      "type": "object",
      "properties": {
        "title": {
          "$ref": "#/definitions/title"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        },
        "interfaces": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceInterfaceReference"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resourceInterfaceReference"
              }
            }
          ]
        },
        "parent": {
          "$ref": "#/definitions/resourceTypeReference"
        },
        "resourceParents": {
          "oneOf": [
            {
              "$ref": "#/definitions/resourceTypeReference"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/resourceTypeReference"
              }
            }
          ]
        },
        "category": {
          "$ref": "#/definitions/resourceCategoryReference"
        },
        "discoverable": {
          "type": "boolean"
        },
        "secret": {
          "type": "boolean"
        },
        "secretLevel": {
          "$ref": "#/definitions/secretLevel"
        },
        "tests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testType"
          },
          "minLength": 1
        },
        "schema": {
          "$ref": "#/definitions/$schema"
        },
        "metadataMap": {
          "type": "object"
        },
        "metadataMapTests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/testType"
          }
        },
        "terraform": {
          "$ref": "#/definitions/terraformResourceTypeMetadata"
        }
      },
      "required": [
        "title",
        "category",
        "schema"
      ],
      "additionalProperties": false
    },
    "resourceTypeReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/resource/types/"
        }
      ]
    },
    "resourceInterfaceReference": {
      "allOf": [
        {
          "$ref": "#/definitions/$ref"
        },
        {
          "pattern": "#/resource/interfaces/"
        }
      ]
    },
    "resourceMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "tags": {
          "type": "object"
        },
        "versionId": {
          "type": "string"
        },
        "processId": {
          "type": "string"
        },
        "akas": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceParentAka": {
          "type": "string"
        },
        "createTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "deleteTimestamp": {
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "updateTimestamp": {
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "type": "object"
        },
        "metadata": {
          "type": "object"
        },
        "parentId": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "resourceGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceTypeId": {
          "type": "string"
        },
        "terraform": {
          "type": "object"
        },
        "actorIdentityId": {
          "type": [
            "string",
            "null"
          ]
        },
        "actorPersonaId": {
          "type": [
            "string",
            "null"
          ]
        },
        "actorRoleId": {
          "type": [
            "string",
            "null"
          ]
        },
        "alternatePersona": {
          "type": [
            "string",
            "null"
          ]
        },
        "state": {
          "type": "string"
        },
        "searchData": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    "resourceBase": {
      "type": "object",
      "properties": {
        "turbot": {
          "$ref": "#/definitions/resourceMetadata"
        }
      }
    }
  },
  "policy": {
    "types": {
      "changeWindow": {
        "title": "Change Window",
        "icon": "fal-hammer",
        "description": "Determines which (if any) changes are allowed outside of the change\nwindow. By default, all changes are allowed.\n\nIf this policy is not set to `All Changes`, then Turbot will not\nautomatically run any actions that would alter a resource.  Instead, it\nwill queue them to run during the next change windows.\n\nIf set to allow `Forced Changes Only`, actions will not run automatically,\nhowever a user may choose to run a control manually.\n\nDuring the change window, all changes are allowed, and any queued actions\nwill run.\n",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/interfaces/maintainable",
          "#/resource/types/folder"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "No Changes",
            "Forced Changes Only",
            "Turbot Event Handlers Only",
            "Turbot Event Handlers and Forced Changes Only",
            "All Changes"
          ],
          "default": "All Changes"
        }
      },
      "changeWindowSchedule": {
        "title": "Schedule",
        "icon": "fal-clock",
        "description": "The period of time when Turbot is permitted to apply changes to resources.\nThis policy allows you to define recurring schedules and durations in which\nchanges are allowed to occur. During change windows, all changes are\nallowed, and any queued actions will run.\n\nTurbot assumes UTC.\n\nThe format of this policy is a list of yaml object, each\nwith a name, description, a start time, and duration\n(in hours). For example:\n\n```\n- name: Weekly\n  description: 'Weekly, Sundays 2am-8am'\n  cron: '0 02 * * SUN'\n  duration: 6\n\n- name: Daily\n  description: 'Daily, 10pm - 2am'\n  start: 'at 10:00pm'\n  duration: 4\n```\n",
        "parent": "#/policy/types/changeWindow",
        "targets": [
          "#/resource/interfaces/maintainable",
          "#/resource/types/folder"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/changeWindowSchedule"
          },
          "default": []
        }
      },
      "claimPrecedenceDefault": {
        "title": "Claim Precedence [Default]",
        "icon": "fal-globe",
        "description": "An ordered list of who is allowed to claim a resource. A stack cannot\nclaim a resource if it is already claimed by another stack at a higher\nlevel of precedence.\n\nBy default, all resources are configured to use the precedence defined\nhere, though they can override their Claim Precedence.\nThe list is comprised of Turbot control type references, as well\nas constants:\n  - **current** - The current stack (usually the one that created it)\n  - **source** - The `Configured > Source` sub-policy\n\nThe references will allow wildcards following standard bash globbing.\nNote that `*` matches any character except `/`. Use `**` to match\nrecursively.\n",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**"
          ]
        }
      },
      "domainName": {
        "title": "Domain Name",
        "icon": "fal-globe",
        "description": "Fully qualified domain name of the workspace - for example,\n`pilot-gnb.cloud.turbot.com`. Set to the domain name only, do not include\nprotocol or path information.\n\nOnly required when using the Public API Gateway option.\n\nSee also: `Turbot > Workspace > Gateway Domain Name`\n",
        "parent": "#/policy/types/workspace",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.){2,}([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]){2,}$"
        }
      },
      "gatewayDomainName": {
        "title": "Gateway Domain Name",
        "icon": "fas-globe",
        "description": "Fully qualified domain name of the publicly accessible gateway to the\nworkspace - for example, `gateway.turbot.acme.com`. Set to the domain\nname only, do not include protocol or path information.\n\nIf you are using the Public API Gateway option, you should ensure that\ngateway is set in the `Turbot > Workspace > Gateway Domain Name` policy to\nyour gateway DNS name. You can find the value in the ApiGatewayEventsURL\noutput of the TEF stack. The policy should be set to the DNS name only,\nwithout the protocol or path. This is usually `gateway.{installation domain}`\n– for example if your installation domain is `turbot.mycompany.com`, the\ngateway would be `gateway.turbot.mycompany.com`.\n\nIf the API Gateway option is not being used then this policy should be blank.\n\nSee also: `Turbot > Workspace > Domain Name`\n",
        "parent": "#/policy/types/workspace",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "pattern": "^(?:(?:[a-z0-9]+|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.){1,}(?:[a-z0-9]+|[a-z0-9][a-z0-9\\-]*[a-z0-9])(?:\\/[A-Za-z0-9_-]+)*"
        }
      },
      "firehose": {
        "title": "Firehose",
        "icon": "fal-paper-plane",
        "readOnly": true,
        "description": "Turbot Firehose\n",
        "parent": "#/resource/types/turbot",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot"
      },
      "interval": {
        "title": "Interval",
        "icon": "fal-passport",
        "description": "Define an interval at which all instances of a control or policy type will be automatically\nre-run. For example, if set to `days: 1` for a control then it will always be run at least\ndaily.\n\nNote: It is rare to set this policy, and often a temporary measure. Control\nand policy types define their interval by default if required, and make\nextensive use of automated triggers in Turbot.\n",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/controlType",
          "#/resource/types/policyType"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "$ref": "#/definitions/duration"
        }
      },
      "modAutoUpdate": {
        "title": "Auto Update",
        "icon": "fal-directions",
        "parent": "#/resource/types/mod",
        "targets": "#/resource/types/mod",
        "category": "#/control/categories/turbot",
        "description": "Specify if this mod should be automatically updated from the Turbot\nregistry. The current version is checked against the `Turbot > Mod >\nDesired Version` policy, which is calculated from the `Turbot > Mod >\nVersion Range` policy.\n\n`Check` will alarm if the version is out of date, while `Enforce` will\nattempt to automatically update the mod.\n\nIf dependencies for the update are not met, then the update will simply be\ntried again later.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check",
            "Enforce"
          ],
          "default": "Skip"
        }
      },
      "modDesiredVersion": {
        "title": "Desired Version",
        "description": "The desired version of the mod, usually calculated by matching `Turbot >\nMod > Version Range` against mod versions currently available in the Turbot\nRegistry.\n\nThe desired version is then used by `Turbot > Mod > Auto Update` to determine\nif an update is available, and the target version to use.\n",
        "icon": "fal-directions",
        "parent": "#/policy/types/modAutoUpdate",
        "targets": "#/resource/types/mod",
        "category": "#/control/categories/turbot",
        "readOnly": true,
        "defaultInterval": {
          "days": 1
        },
        "minInterval": {
          "days": 1
        },
        "maxInterval": {
          "days": 7
        },
        "schema": {
          "type": "string"
        }
      },
      "modVersionRange": {
        "title": "Version Range",
        "description": "Specify the allowed range of versions for this mod. This version range is\nused to calculate `Turbot > Mod > Desired Version`, so the mod can be\nautomatically updated per `Turbot > Mod > Auto Update`.\n\nSpecial string values are automatically replaced in this policy:\n\n| Value | Description\n|-|-\n| `{{MAJOR}}` | The major version of the currently installed mod. if no mod is installed, the major version of latest recommended release.\n| `{{MINOR}}` | The minor version of the currently installed mod. if no mod is installed, the minor version of latest recommended release.\n| `{{PATCH}}` | The patch version of the currently installed mod. if no mod is installed, the patch version of latest recommended release.\n\nExamples:\n\n| Value | Description\n|-|-\n| `^{{MAJOR}}` | Latest version in the same major release that is installed\n| `^{{MAJOR}}.{{MINOR}}.{{PATCH}}` | Latest version in the same major release that is installed that is greater than or equal to the version currently installed\n| `^5` or `5.*` | Latest version in the 5.x major release\n| `~{{MAJOR}}.{{MINOR}}` or `{{MAJOR}}.{{MINOR}}.*` | Latest version in the same minor release that is installed\n| `~4.5` or `4.5.*` | Latest version in the 4.5 minor release\n| `{{MAJOR}}.{{MINOR}}.{{PATCH}}` | Currently installed version exactly (essentially, same as Skip)\n| `*` | Latest version\n| `>=5` | Latest version, but at least version 5\n",
        "icon": "fal-directions",
        "parent": "#/policy/types/modAutoUpdate",
        "targets": "#/resource/types/mod",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "pattern": "^((\\^|~|>|>=|<|<=)?(0|[1-9]\\d*)\\.?(\\*|0|[1-9]\\d*)?\\.?(\\*|0|[1-9]\\d*)?(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?|\\*|(\\^|~|>|>=|<|<=)?({{MAJOR}})?\\.?({{MINOR}}|\\*)?\\.?({{PATCH}}|\\*)?)$",
          "default": "^{{MAJOR}}"
        }
      },
      "runnableMonitor": {
        "title": "Runnable Monitor",
        "icon": "fal-tachometer-fast",
        "description": "The maximum number of runnables (controls and policies) to restart when found to be 'stale'.\n\nStale: runnables in error or tbd state with less than 56 days since last state change, but no next tick timestamp set.\n",
        "parent": "#/resource/types/turbot",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 50,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "retention": {
        "title": "Retention",
        "icon": "fal-calendar-check",
        "description": "One of the principal design goals of Turbot is to enable change - to help\nensure security, reliability, and consistency in dynamic environments. As a\nresult, capturing change and storing historical information are fundamental\nto the way Turbot operates. In fact, Turbot creates a new version for each\nresource every time that resource is changed, providing a full history of\nthe resource. Controls, Policy Settings, Policy Values, and Logs are also\nversioned per resource.\n\nWhile there is some benefit is storing all versions of all entities\nforever, there is a tradeoff in performance and storage capacity. Every\nversion must be stored and indexed. Every version added is another to\nsearch through.\n\n`Turbot > Workspace > Retention > *` policies automatically cleanup that\ndata to ensure you have the critical information, but the system remains\nefficient and performant.\n\nAlways use `Enforce: Enable purging via Smart Retention` unless you have discussed\nyour use case with Turbot Support.\n",
        "targets": [
          "#/resource/types/turbot"
        ],
        "parent": "#/policy/types/workspace",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Preview purging via Smart Retention",
            "Enforce: Enable purging via Smart Retention"
          ],
          "default": "Enforce: Enable purging via Smart Retention"
        }
      },
      "minimumRetention": {
        "title": "Minimum Retention",
        "icon": "fal-tachometer-slow",
        "description": "\nThe minimum number of days that Turbot will\nkeep historical versions of a deleted resource.\n\nWhen a resource is deleted, Turbot marks the resource as deleted, but does\nnot immediately delete the historical versions of the resource (or its\npolicies, controls, logs, etc). Turbot Smart Retention maintains the most\nrecent versions in the CMDB for a length of time that is proportionate to\nthe resource's lifetime, subject to a minimum and maximum threshold.\n\nFor example, an instance that was only active for a week will maintain 1\nweek of history, while one that was active for 6 months should retain\nhistorical versions for a 6 months after it is deleted. Well this is\ngenerally appropriate, Turbot provides policies to specify a minimum and\nmaximum retention as well.\n\nNote that when a resource version is deleted, all of the associated\npolicies, controls, processes, and process logs are deleted as well.\n\nSee also: `Turbot > Workspace > Retention > Maximum Retention`\n",
        "parent": "#/policy/types/retention",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 7,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "maximumRetention": {
        "title": "Maximum Retention",
        "icon": "fal-tachometer-fast",
        "description": "The maximum number of days that Turbot will\nkeep historical versions of a deleted resource.\n\nWhen a resource is deleted, Turbot marks the resource as deleted, but does\nnot immediately delete the historical versions of the resource (or its\npolicies, controls, logs, etc). Turbot Smart Retention maintains the most\nrecent versions in the CMDB for a length of time that is proportionate to\nthe resource's lifetime, subject to a minimum and maximum threshold.\n\nFor example, an instance that was only active for a week will maintain 1\nweek of history, while one that was active for 6 months should retain\nhistorical versions for a 6 months after it is deleted. Well this is\ngenerally appropriate, Turbot provides policies to specify a minimum and\nmaximum retention as well.\n\nNote that when a resource version is deleted, all of the associated\npolicies, controls, processes, and process logs are deleted as well.\n\nSee also: `Turbot > Workspace > Retention > Minimum Retention`\n",
        "parent": "#/policy/types/retention",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 365,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "debugLogRetention": {
        "title": "Debug Log Retention",
        "icon": "fal-tachometer-fast",
        "description": "The maxmimum number of days that Turbot will maintain debug information in\nprocess logs.\n\nNote: Since v5.19.0 process logs are managed in object storage. This policy\nrelates to debug logs stored in the database layer only from before that\nchange.\n",
        "parent": "#/policy/types/retention",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 14,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "resourcePurgeLimit": {
        "title": "Resource Purge Limit",
        "icon": "fal-tachometer-fast",
        "description": "The number of resource versions to purge in each retention control run. An\nappropriate size ensures rapid cleanup, but without large operations causing\nspikes in database load.\n\nGenerally only needs to be changed in large environments undergoing rapid\nchange or backlogs of work.\n",
        "parent": "#/policy/types/retention",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 30,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "debugLogPurgeLimit": {
        "title": "Debug Log Purge Limit",
        "icon": "fal-tachometer-fast",
        "description": "The number of debug log records to purge in each retention control run. An\nappropriate size ensures rapid cleanup, but without large operations causing\nspikes in database load.\n\nGenerally only needs to be changed in large environments undergoing rapid\nchange or backlogs of work.\n",
        "parent": "#/policy/types/retention",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1000,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "processPurgeLimit": {
        "title": "Process Version Purge Limit",
        "icon": "fal-tachometer-fast",
        "description": "This policy specifies the number of process versions to purge in each\nretention control run. An appropriate size ensures rapid cleanup, but\nwithout large operations causing spikes in database load.\n\nGenerally only needs to be changed in large environments undergoing rapid\nchange or backlogs of work.\n\nSee also: `Turbot > Workspace > Retention > Process Retention`\n",
        "parent": "#/policy/types/retention",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1000,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "processRetention": {
        "title": "Process Retention",
        "icon": "fal-tachometer-slow",
        "description": "When a process is terminated, Turbot marks the process as deleted, but does\nnot immediately delete the historical versions of the process. This policy\nspecifies the maximum number of days that versions of a deleted process\nwill be maintained.\n\nThis policy sets the minimum number of days that Turbot will keep\nhistorical versions of a terminated process.\n\nSee also: `Turbot > Workspace > Retention > Process Purge Limit`\n",
        "parent": "#/policy/types/retention",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 2,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "stackAnsibleVersion": {
        "title": "Stack Ansible Version [Default]",
        "description": "The Version of Ansible to use for Turbot Ansible Stacks.\n\nSpecify an [npm-style semver](https://docs.npmjs.com/misc/semver) string to\ndetermine which version of the Ansible container Turbot will use to run\nthis stack.\n\nExamples:\n\n`~2.5`: Latest version in the 2.5.x release\n\n`*`: Latest version\n",
        "icon": "fal-code-merge",
        "parent": "#/resource/types/turbot",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "default": "2.5.*"
        }
      },
      "stackTerraformVersion": {
        "title": "Stack Terraform Version [Default]",
        "description": "The Version of Terraform to use for Turbot Custom Stacks and Configured\ncontrols.\n\nSpecify an [npm-style semver](https://docs.npmjs.com/misc/semver) string to\ndetermine which version of the Terraform container Turbot will use to run\nthis stack.\n\nAll Configured controls will use this version unless they are claimed by\nanother stack. Custom stacks will use this policy as a default in their\nStack > Terraform Version policy.\n\nExamples:\n\n| Value | Description\n|-|-\n| `~0.11` | Latest version in the 0.11.x release\n| `*` | Latest version\n",
        "icon": "fal-code-merge",
        "parent": "#/resource/types/turbot",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "default": "0.11.*"
        }
      },
      "workspace": {
        "title": "Workspace",
        "icon": "fal-passport",
        "parent": "#/resource/types/turbot",
        "category": "turbot#/control/categories/turbot",
        "description": "Manage workspace configuration.\n"
      },
      "apiSecrets": {
        "title": "API Secrets",
        "icon": "fal-passport",
        "description": "API and GraphQL requests to Turbot can be authenticated using a JWT token.\nThe typical flow is to login (using SAML, password, or access keys) and\nobtain a JWT token. Subsequent requests are then authorized by the JWT\ntoken.\n\nThe JWT token is signed by Turbot using an `API Secret`, as set by this\npolicy. This ensures that fake tokens cannot be generated or used.\n\nTurbot sets this policy on installation to complex password unique to your\nworkspace. This is a secure, effective default.\n\nTo ensure secrets work, even during rotation, this policy is defined as an\narray. The first item is the current secret and is used to sign all newly\nissued tokens. Other secrets in the array are used for verifying existing\ntokens only.\n\nIf you wish or need to rotate this secret, you should:\n1. Add a new secret as the first item in the array, leaving existing secrets below.\n2. Allow time for all use of existing secrets to end. This will vary depending on\n   console timeout settings, etc - but is generally less than 24 hours.\n3. Update the policy to remove old secrets that are no longer valid.\n\nSee also: `Turbot > Workspace > Webhook Secrets` defines secrets for longer\nterm webhook URLs deployed for event ingestion.\n",
        "parent": "#/policy/types/workspace",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "secret": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "default": [
            "turbot"
          ]
        }
      },
      "webhookSecrets": {
        "title": "Webhook Secrets",
        "icon": "fal-passport",
        "secret": true,
        "description": "Turbot has a dedicated webhook endpoint to receive external events from\ncloud providers, services and other infrastructure. Requests to this endpoint\nare not subject to the usual API authentication, but instead rely on webhook\nJWT tokens.\n\nThe JWT token is signed by Turbot using a `Webhook Secret`, as set by this\npolicy. This ensures that fake tokens cannot be generated or used.\n\nTurbot sets this policy on installation to complex password unique to your\nworkspace. This is a secure, effective default.\n\nTo ensure secrets work, even during rotation, this policy is defined as an\narray. The first item is the current secret and is used to sign all newly\nissued tokens. Other secrets in the array are used for verifying existing\ntokens only.\n\nWebhook Secrets are generally either distributed manually, making them difficult\nto rotate, or managed by Turbot (e.g. with Stacks) and automatically rotated\nper the `Turbot > Workspace > Webhook Secrets > Rotation` policy.\n\nIf you wish or need to rotate this secret manually, you should:\n1. Add a new secret as the first item in the array, leaving existing secrets below.\n2. Allow time for all existing webhook URLs to be updated to the new token - usually manually.\n3. Update the policy to remove old secrets that are no longer valid.\n\nThis policy defines a list of objects, including creation, expiration and\nactive information for each secret. For example:\n```\n[\n  {\n    \"secret\": \"E!TJ8x4!P15ic=DN\",\n    \"created\": \"2020-07-28T21:32:27.537Z\",\n    \"expiration\": \"2021-03-31T00:00:00.000Z\",\n    \"isActive\": true\n  }\n]\n```\n\nSee also: `Turbot > Workspace > API Secrets` defines secrets for short term\nJWT tokens used in the UI and general API requests.\n",
        "parent": "#/policy/types/workspace",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "secret": {
                "type": "string"
              },
              "created": {
                "type": "string",
                "format": "date-time"
              },
              "expiration": {
                "type": "string",
                "format": "date-time"
              },
              "isActive": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          },
          "minItems": 2,
          "default": [
            {
              "secret": "turbot",
              "isActive": false
            }
          ]
        }
      },
      "webhookSecretRotation": {
        "title": "Rotation",
        "icon": "fal-passport",
        "description": "Check or Enforce that `Turbot > Workspace > Webhook Secrets` are being\nper the `Turbot > Workspace > Webhook Secrets > Expiration Period` policy.\nFor example, secrets must be rotated every year.\n\nThis policy is very useful when combined with Turbot's automatic management\nof event handlers across cloud providers. Turbot will setup webhook handlers\nin hundreds of cloud accounts, and then automatically rotate the JWT token\nthey use to send events back to Turbot. This rotation can automate that entire\nprocess.\n\nIf managing your event handlers and webhooks to Turbot by hand, then it's\nrecommended to use `Check: Webhook secret requires rotation`. This notifies\nyou that your secret has reached the policy maximum for your organization and\nis due for rotation.\n\nIf your organization requires continuous rotation of secrets, then use Turbot\nautomation combined with `Enforce: Rotate webhook secret`.\n\nA common (and practical) policy position is having the ability to rotate secrets\nwhen required - as opposed to continuous rotating them. In that case you could\nset this policy to `Check` combined with an expiration period of `Never`.\n",
        "parent": "#/policy/types/webhookSecrets",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Webhook secret requires rotation",
            "Enforce: Rotate webhook secret"
          ],
          "example": [
            "Check: Webhook secret requires rotation"
          ],
          "default": "Skip"
        }
      },
      "webhookSecretsExpirationPeriod": {
        "title": "Expiration Period",
        "icon": "fal-user-clock",
        "description": "Rotation of webhook JWT tokens should be performed to ensure the `Expiration\nPeriod` is never exceeded. For example, if `Webhook Secrets > Rotation`\nis set to `Enforce: ...` and this policy is set to `1 year`, then webhook\nsecrets will actually be rotated every 6 months or so (half the period).\n",
        "parent": "#/policy/types/webhookSecrets",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "enum": [
            "1 month",
            "2 months",
            "3 months",
            "6 months",
            "1 year",
            "2 years",
            "3 years",
            "5 years",
            "Never"
          ],
          "default": "Never"
        }
      },
      "workspaceVersion": {
        "title": "Workspace Version",
        "icon": "fal-passport",
        "readOnly": true,
        "description": "[Turbot Enterprise version](https://turbot.com/v5/docs/releases/te) currently installed for this workspace.\n\nThis policy is automatically updated as part of each workspace upgrade.\n",
        "parent": "#/policy/types/workspace",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
          "example": "5.27.0"
        }
      },
      "workspaceFeatureFlags": {
        "title": "Feature Flags",
        "icon": "fal-flag",
        "readOnly": true,
        "description": "Feature flags enabled for this workspace.\n\nThis policy is automatically updated as part of each workspace upgrade.\n",
        "parent": "#/policy/types/workspace",
        "targets": "#/resource/types/turbot",
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "dependenciesBatchSize": {
        "title": "Dependencies Batch Size",
        "icon": "fal-tachometer-fast",
        "description": "The number of controls and policy values dependencies to be migrated to the new dependencies table\n",
        "parent": "#/policy/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 300,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "notificationsCleanupBatchSize": {
        "title": "Notifications Batch Size",
        "icon": "fal-tachometer-fast",
        "description": "Notifications to clean for obsoleted notifications-types.\n",
        "parent": "#/policy/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1000,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "policyValuesHistoryCleanupBatchSize": {
        "title": "Policy Values History Cleanup Batch Size",
        "icon": "fal-tachometer-fast",
        "description": "Define the batch size for policy values history cleanup.\n",
        "parent": "#/policy/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 1000,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "controlsMetadataBatchSize": {
        "title": "Controls Metadata Batch Size",
        "icon": "fal-tachometer-fast",
        "description": "The number of controls to be updated with its metadata information. The metadata includes the\nresource path and resource type information of the associated resource.\n",
        "parent": "#/policy/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10000,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "searchDataBatchSize": {
        "title": "Search Data Batch Size",
        "icon": "fal-tachometer-fast",
        "description": "The number of controls and policy values to be updated with trunk details in search data. This repairs\nthe controls and policies with empty trunk information\n\nThe trunk information in search data helps the user to perform FTS ( Free Text Search ) on controls and policy values using a partial trunk title.\n",
        "parent": "#/policy/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 300,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "policyValuesMetadataBatchSize": {
        "title": "Policy values Metadata Batch Size",
        "icon": "fal-tachometer-fast",
        "description": "The number of policy values to be updated with its metadata information. The metadata includes the\nresource path and resource type information of the associated resource.\n",
        "parent": "#/policy/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10000,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      },
      "resourcesMetadataBatchSize": {
        "title": "Resources Metadata Batch Size",
        "icon": "fal-tachometer-fast",
        "description": "The number of resources to be updated with its metadata information. The metadata includes the\nresource type path information of the associated resource.\n",
        "parent": "#/policy/types/workspace",
        "targets": [
          "#/resource/types/turbot"
        ],
        "category": "#/control/categories/turbot",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10000,
          "defaultMetadata": {
            "precedence": "must"
          }
        }
      }
    }
  },
  "build": "20210524110245019"
}