{
  "$id": "tmod:@turbot/aws-kms",
  "title": "@turbot/aws-kms",
  "author": "Turbot HQ, Inc",
  "version": "5.8.1",
  "license": "For LICENSE see https://turbot.com/license",
  "peerDependencies": {
    "@turbot/aws": "^5.0.0",
    "@turbot/turbot": "^5.22.0",
    "@turbot/turbot-iam": "^5.1.0",
    "@turbot/aws-iam": "^5.1.0"
  },
  "scripts": {
    "prepack": "./build.sh"
  },
  "data": [
    {
      "permission": "kms:CancelKeyDeletion",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:CreateAlias",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:CreateGrant",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Limited to AWS resource grants only through an explicit deny on the Lockdown group to prevent cross-account grants."
    },
    {
      "permission": "kms:CreateKey",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Can be used to add policies to keys. Turbot detects and resets any non-default policies added during key creation."
    },
    {
      "permission": "kms:Decrypt",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:DeleteAlias",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:DeleteImportedKeyMaterial",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:DescribeKey",
      "grant": "Metadata",
      "resourceType": "key",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Provides Metadata about the key only."
    },
    {
      "permission": "kms:DisableKey",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:DisableKeyRotation",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:EnableKey",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:EnableKeyRotation",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:Encrypt",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:GenerateDataKey",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:GenerateDataKeyWithoutPlaintext",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:GenerateRandom",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:GetKeyPolicy",
      "grant": "Metadata",
      "resourceType": "key",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:GetKeyRotationStatus",
      "grant": "Metadata",
      "resourceType": "key",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:GetParametersForImport",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Only a public key is returned; the import token is not returned."
    },
    {
      "permission": "kms:ImportKeyMaterial",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:ListAliases",
      "grant": "Metadata",
      "resourceType": "key",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:ListGrants",
      "grant": "Metadata",
      "resourceType": "key",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:ListKeyPolicies",
      "grant": "Metadata",
      "resourceType": "key",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:ListKeys",
      "grant": "Metadata",
      "resourceType": "key",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Provides Metadata about the keys only."
    },
    {
      "permission": "kms:ListResourceTags",
      "grant": "Metadata",
      "resourceType": "key",
      "operationType": "Read",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:ListRetirableGrants",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:PutKeyPolicy",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Key policies are reset by a guardrail after creation."
    },
    {
      "permission": "kms:ReEncryptFrom",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:ReEncryptTo",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:RetireGrant",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:RevokeGrant",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:ScheduleKeyDeletion",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:TagResource",
      "grant": "Operator",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:UntagResource",
      "grant": "Operator",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:UpdateAlias",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "kms:UpdateKeyDescription",
      "grant": "Admin",
      "resourceType": "key",
      "operationType": "Update",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    }
  ],
  "definitions": {
    "kms": {
      "allOf": [
        {
          "$ref": "turbot#/definitions/service"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "const": "KMS"
            },
            "turbot": {
              "type": "object",
              "properties": {
                "akas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/kmsAka"
                  }
                },
                "title": {
                  "const": "KMS"
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "aws#/definitions/awsMetadata"
                    }
                  }
                }
              }
            }
          },
          "additionalProperties": true,
          "tests": [
            {
              "description": "Base - All Valid properties",
              "input": {
                "name": "KMS",
                "turbot": {
                  "akas": [
                    "arn:aws:kms:us-east-1:123456789012"
                  ],
                  "title": "KMS",
                  "custom": {
                    "aws": {
                      "accountId": 123456789012,
                      "regionName": "us-east-1"
                    }
                  }
                }
              }
            },
            {
              "description": "Invalid - incorrect name",
              "input": {
                "name": "elasticcomputecloud",
                "turbot": null,
                "akas": [
                  "arn:aws:kms:us-east-1:123456789012"
                ],
                "title": "KMS",
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1"
                  }
                }
              },
              "expected": false
            },
            {
              "description": "Invalid - Service name missing",
              "input": {
                "turbot": {
                  "akas": [
                    "arn:aws:kms:us-east-1:123456789012"
                  ],
                  "title": "KMS",
                  "custom": {
                    "aws": {
                      "accountId": 123456789012,
                      "regionName": "us-east-1"
                    }
                  }
                }
              },
              "expected": false
            }
          ]
        }
      ]
    },
    "kmsAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}$",
      "tests": [
        {
          "description": "base",
          "input": "arn:aws:kms:us-east-1:123123123123"
        },
        {
          "description": "invalid service name",
          "input": "arn:aws:xyz:us-east-1:123123123123",
          "expected": false
        },
        {
          "description": "invalid account id",
          "input": "arn:aws:kms:us-east-1:123382743123123123",
          "expected": false
        },
        {
          "description": "invalid region name",
          "input": "arn:aws:kms:us-eastdk-74381:123123123123",
          "expected": false
        }
      ]
    },
    "key": {
      "type": "object",
      "properties": {
        "KeyId": {
          "$ref": "#/definitions/KeyId"
        },
        "Arn": {
          "$ref": "#/definitions/keyAka"
        },
        "AliasArn": {
          "type": "string",
          "pattern": "^.{20,2048}$"
        },
        "AliasName": {
          "type": "string",
          "pattern": "^.{1,256}$"
        },
        "Tags": {
          "type": "array"
        },
        "AWSAccountId": {
          "type": "string",
          "pattern": "^[a-z0-9-]{12}$"
        },
        "CreationDate": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "DeletionDate": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Description": {
          "type": "string",
          "maxLen": "8192"
        },
        "Enabled": {
          "type": "boolean"
        },
        "ExpirationModel": {
          "type": "string",
          "pattern": "^(KEY_MATERIAL_EXPIRES|KEY_MATERIAL_DOES_NOT_EXPIRE)$"
        },
        "KeyManager": {
          "type": "string",
          "pattern": "^(AWS|CUSTOMER)$"
        },
        "KeyState": {
          "$ref": "#/definitions/keyState"
        },
        "KeyUsage": {
          "type": "string",
          "pattern": "^ENCRYPT_DECRYPT$"
        },
        "Origin": {
          "type": "string",
          "pattern": "^(AWS_KMS|EXTERNAL)$"
        },
        "ValidTo": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Policy": {
          "type": "object"
        },
        "KeyRotationStatus": {
          "type": "boolean"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/keyAka"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/KeyId"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid key",
          "input": {
            "KeyId": "39dcbfab-70e6-4368-b592-6f547c2afe7f",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:kms:us-west-2:492552618977:key/39dcbfab-70e6-4368-b592-6f547c2afe7f"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "39dcbfab-70e6-4368-b592-6f547c2afe7f",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "KeyId": {
      "type": "string",
      "pattern": "^[-a-z0-9-]{1,255}$",
      "tests": [
        {
          "description": "base",
          "input": "my-key12345"
        },
        {
          "input": "alias/testing-cmdb-responses"
        }
      ]
    },
    "keyState": {
      "type": "string",
      "enum": [
        "Enabled",
        "Disabled",
        "PendingDeletion",
        "PendingImport",
        "Unavailable"
      ],
      "tests": [
        {
          "input": "Enabled"
        },
        {
          "description": "invalid",
          "input": "Creating",
          "expected": false
        }
      ]
    },
    "keyAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key/[0-9a-f-]+(?:[0-9a-f]{1,255})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:kms:us-west-2:492552618977:key/39dcbfab-70e6-4368-b592-6f547c2afe7f"
        },
        {
          "description": "Invalid - Malformed  aka",
          "input": "arn:aws:kms:usa-west-2:49255261897322237:keys/39dcbfab-70e6-4368-b592-6f547c2afe7f",
          "expected": false
        }
      ]
    },
    "aliasKey": {
      "type": "object",
      "properties": {
        "AliasName": {
          "type": "string"
        },
        "KeyId": {
          "$ref": "#/definitions/KeyId"
        }
      },
      "required": [
        "AliasName"
      ],
      "additionalProperties": true
    }
  },
  "permission": {
    "types": {
      "kms": {
        "title": "KMS",
        "parent": "aws#/permission/types/aws",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iam"
      }
    }
  },
  "policy": {
    "types": {
      "kmsCustomEventPatterns": {
        "title": "@turbot/aws-kms",
        "icon": "fal-file-invoice",
        "parent": "aws#/policy/types/eventHandlersEventsRulesCustomEventPatterns",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The CloudWatch Events event pattern used by the AWS KMS module to specify\nwhich events to forward to the Turbot Event Handlers.\n",
        "category": "turbot#/control/categories/configured",
        "schema": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "kmsEnabled": {
        "title": "Enabled",
        "icon": "fal-toggle-on",
        "parent": "#/resource/types/kms",
        "category": "turbot#/control/categories/iamPermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Configure whether the AWS KMS service is enabled.\nThis will only affect Turbot managed User Roles and will allow the Turbot managed user to access AWS KMS service.\n  - `Enabled` policy allows Turbot managed users to perform all the actions for the service\n  - `Enabled: Metadata Only` policy allows Turbot managed users to perform only the metadata level actions for the service (like `describe*`, `list*`)\n\n**Note:**\n  - `Disabled` policy disables the service but does NOT disable the API for Turbot or SuperUsers\n  - All the resource data stored in the Turbot CMDB is considered to be metadata\n  - For more information related to permissions and grant levels, please check the [documentation](https://turbot.com/v5/docs/concepts/iam/permissions)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Enabled: Metadata Only",
            "Disabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Disabled"
        }
      },
      "kmsApiEnabled": {
        "title": "API Enabled",
        "icon": "fal-lock-alt",
        "parent": "#/resource/types/kms",
        "category": "turbot#/control/categories/iamPermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Configure whether the AWS KMS API is enabled.\n\n**Note:** Disabling the service disables the API for ALL users and roles, and Turbot will have no access to the API.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > KMS > Enabled"
          ],
          "default": "Enabled"
        }
      },
      "kmsPermissions": {
        "title": "Permissions",
        "icon": "fal-traffic-light-go",
        "parent": "#/resource/types/kms",
        "category": "turbot#/control/categories/iamPermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Configure whether permissions policies are in effect for AWS KMS.\n\nThis setting does not affect account level permissions (AWS/Admin, AWS/Owner, etc)\n\n**Note:** The behavior of this policy depends on the value of AWS > Permissions.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > KMS > Enabled & AWS > KMS > API Enabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Enabled if AWS > KMS > Enabled & AWS > KMS > API Enabled"
        }
      },
      "kmsPermissionsLockdown": {
        "title": "Lockdown",
        "icon": "fal-lock",
        "parent": "#/policy/types/kmsPermissions",
        "category": "turbot#/control/categories/iamPermissions"
      },
      "kmsPermissionsLockdownApiBoundary": {
        "title": "API Boundary",
        "icon": "fal-tachometer-alt-average",
        "parent": "#/policy/types/kmsPermissionsLockdown",
        "category": "turbot#/control/categories/iamPermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Configure whether the AWS kms API is enabled for all users and roles in turbot-managed boundary policies.\n\n**Note:** Disabling the service disables the API for ALL users and roles, and Turbot will have no access to the API.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled if AWS > KMS > API Enabled"
          ],
          "example": [
            "Enabled if AWS > KMS > API Enabled"
          ],
          "default": "Enabled if AWS > KMS > API Enabled"
        }
      },
      "kmsPermissionsLevels": {
        "title": "Levels",
        "icon": "fal-layer-group",
        "parent": "#/policy/types/kmsPermissions",
        "category": "turbot#/control/categories/iamPermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "Define the permissions levels that can be used to grant access to an AWS account.\nPermissions levels defined will appear in the UI to assign access to Turbot users.\nThis policy provides a default for Permissions > Levels in each service,\nhowever you can explicitly override the setting for each service if desired\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Metadata",
              "ReadOnly",
              "Operator",
              "Admin",
              "Owner"
            ]
          }
        },
        "defaultTemplate": "{% if $.availableLevels.items[0].value | length == 0 %} [] {% endif %}{% for item in $.availableLevels.items[0].value %}- {{ item }}\n{% endfor %}",
        "defaultTemplateInput": [
          "{\n  item: account {\n    turbot{\n      id\n    }\n  }\n}\n",
          "{\n  availableLevels: policyValues(filter:\"policyTypeLevel:self resourceId:{{ $.item.turbot.id }} policyTypeId:'tmod:@turbot/aws-iam#/policy/types/permissionsLevelsDefault'\") {\n    items {\n      value\n    }\n  }\n}\n"
        ]
      },
      "kmsPermissionsLevelsModifiers": {
        "title": "Modifiers",
        "icon": "fal-user-edit",
        "parent": "#/policy/types/kmsPermissionsLevels",
        "category": "turbot#/control/categories/iamPermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A map of AWS API to Turbot Permission Level used to customize Turbot's standard permissions.\nYou can add, remove or redefine the mapping of AWS API operations to Turbot permissions levels here.\n\n**Note:** Modifiers are cumulative - if you add a permission to the Metadata level, it is also added to ReadOnly, Operator and Admin.\nModifier policies set here apply ONLY to the AWS level\n\n```\nexample:\n  - \"glacier:createvault\": admin\n  - \"glacier:ListVaults\": metadata\n  - \"s3:DeleteBucket\": none\n```\n",
        "schema": {
          "$ref": "aws-iam#/definitions/awsModifierList"
        }
      },
      "awsCompiledServicePermissions": {
        "title": "@turbot/aws-kms",
        "icon": "fal-calculator",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledServicePermissions",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A calculated policy that Turbot uses to create a compiled list of ALL permissions for AWS KMS\nthat is used as input to the control that manages the IAM stack.\n",
        "schema": {
          "$ref": "aws-iam#/definitions/awsRightDefinitionList"
        }
      },
      "awsLevelsCompiled": {
        "title": "@turbot/aws-kms",
        "icon": "fal-calculator",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevels",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A calculated policy that Turbot uses to create a compiled list of ALL permissions for AWS KMS\nthat is used as input to the stack that manages the Turbot IAM permissions objects.\n",
        "schema": {
          "$ref": "aws-iam#/definitions/awsLevelDefinitionList"
        }
      },
      "awsCompiledApiBoundary": {
        "title": "@turbot/aws-kms",
        "icon": "fal-border-outer",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevelsApiBoundary",
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A read-only policy generated by Turbot that lists the APIs that\nshould be added to the turbot-managed (hard) boundary policy,\nthereby enabling them to be assigned to users and roles.\nThis value will change depending on the value of the value of the\n`AWS > KMS > Permissions > Lockdown > API Boundary` policy\n",
        "schema": {
          "type": "array"
        }
      },
      "kmsRegionsDefault": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/kms",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS KMS resources are supported for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS KMS resources' Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/regionsDefault\") {\n    value\n  }\n}\n"
      },
      "kmsApprovedRegionsDefault": {
        "title": "Approved Regions [Default]",
        "icon": "fal-check-double",
        "parent": "#/resource/types/kms",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS KMS resources are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS KMS resources' Approved > Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/approvedRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "kmsTagsTemplate": {
        "title": "Tags Template [Default]",
        "icon": "fal-tags",
        "description": "A template used to generate the keys and values for AWS KMS resources.\n\nBy default, all KMS resource Tags > Template policies will use this value.\n",
        "parent": "#/resource/types/kms",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/resourceTags",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws#/policy/types/defaultTagsTemplate\") {\n    value\n  }\n}\n"
      },
      "keyActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Determine the action to take when an AWS KMS key, based on the `AWS > KMS > Key > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > KMS > Key > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "keyActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/keyActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "The number of days since the AWS KMS key\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > KMS > Key > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "keyActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/keyActive",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "The age after which the AWS KMS key\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > KMS > Key > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "keyActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/keyActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nkeys to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > KMS > Key > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "keyActiveStatus": {
        "title": "Status",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/keyActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "The policy allows you to\ncheck which status determines if the AWS KMS key is active.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > KMS > Key > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n\nThe policy values for AWS KMS key are deprecated and replaced by new values.\nThe deprecated values will be removed in next major version.\n\n| Deprecated Values                   | Current Values                         |\n|-------------------------------------|----------------------------------------|\n| Active if status is enabled         | Active if $.KeyState is enabled        |\n| Force active if status is enabled   | Force active if $.KeyState is enabled  |\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if status is enabled",
            "Force active if status is enabled",
            "Active if $.KeyState is enabled",
            "Force active if $.KeyState is enabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "keyApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Determine the action to take when an AWS KMS key is not approved based on `AWS > KMS > Key > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "keyApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/keyApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "A list of AWS regions in which AWS KMS keys are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS KMS key is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > KMS > Key > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-kms#/policy/types/kmsApprovedRegionsDefault\")\n}\n"
      },
      "keyApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/keyApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Determine whether the AWS KMS key is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS KMS key is not approved, it will be subject to the action specified in the `AWS > KMS > Key > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > KMS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > KMS > Enabled"
        }
      },
      "keyApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/keyApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "The policy allows you to set keys to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS KMS key is not matched by the approved list, it will be subject to the action specified in the `AWS > KMS > Key > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "keyApprovedCustomerMasterKeySpec": {
        "title": "Customer Master Key Spec",
        "icon": "fal-check-double",
        "parent": "#/policy/types/keyApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "A list of customer master key spec that the AWS KMS key is approved to use.\n\nThe expected format is an array of customer master key spec. You may use the `*` and `?` wildcard characters (and [more](https://github.com/micromatch/micromatch#matching-features)).\n\nThis policy will be evaluated by the Approved control. If an AWS KMS key is not matched by the approved list, it will be subject to the action specified in the `AWS > KMS > Key > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^(RSA_2048|RSA_3072|RSA_4096|ECC_NIST_P256|ECC_NIST_P384|ECC_NIST_P521|ECC_SECG_P256K1|SYMMETRIC_DEFAULT)$"
          }
        }
      },
      "keyCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS KMS key into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > KMS > Key > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "keyConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it.\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "keyConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/keyConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource.",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "keyConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/keyConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "keyDefaultCustomerManagedKey": {
        "title": "KMS Key [Default]",
        "icon": "fal-key",
        "parent": "aws#/resource/types/region",
        "targets": "aws#/resource/types/region",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the KMS key to be used by the encryption at rest control.\n\n**Note**: Please make sure the key defined in the template has required permissions.\n",
        "schema": {
          "anyOf": [
            {
              "type": "string",
              "pattern": "^alias/[a-zA-Z0-9:/_-]{1,249}$"
            },
            {
              "type": "string",
              "pattern": "^[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key/[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:alias/[a-zA-Z0-9:/_-]{1,249}$"
            }
          ]
        },
        "defaultTemplate": "{%- if $.prefix %}alias/{{ $.prefix }}/default{%- else -%}alias/{{ $.prefix }}/default{%- endif -%}",
        "defaultTemplateInput": "{\n  prefix: policy(uri: \"#/policy/types/encryptionKmsKeyAliasNamePrefix\")\n}\n"
      },
      "encryption": {
        "title": "Encryption",
        "icon": "fal-shield",
        "category": "turbot#/control/categories/other",
        "parent": "aws#/policy/types/turbot",
        "targets": "aws#/resource/types/region",
        "description": "Configure the Turbot Encryption Key stack. This stack configures\nthe default customer managed key.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Configured",
            "Check: Not configured",
            "Enforce: Configured",
            "Enforce: Not configured"
          ],
          "default": "Skip"
        }
      },
      "encryptionKms": {
        "title": "KMS",
        "icon": "fal-key",
        "category": "turbot#/control/categories/other",
        "parent": "#/policy/types/encryption"
      },
      "encryptionKmsKey": {
        "title": "Key",
        "icon": "fal-key",
        "category": "turbot#/control/categories/other",
        "parent": "#/policy/types/encryptionKms"
      },
      "encryptionKmsKeyAliasNamePrefix": {
        "title": "Alias Name Prefix",
        "icon": "fal-key",
        "category": "turbot#/control/categories/other",
        "parent": "#/policy/types/encryptionKmsKey",
        "targets": "aws#/resource/types/region",
        "description": "A string to be used as a prefix to the turbot generated name on the\nTurbot Managed Encryption Key. The name will be pre-pended with this value.\n",
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9:/_-]+$",
          "maxLength": 249,
          "default": "turbot",
          "example": "turbot"
        }
      },
      "keyEncryptionSource": {
        "title": "Source",
        "icon": "fal-calculator",
        "category": "turbot#/control/categories/other",
        "parent": "#/policy/types/encryption",
        "targets": "aws#/resource/types/region",
        "readOnly": true,
        "description": "The terraform source for creating and managing the customer managed key. This is a read-only policy controlled by turbot.\n",
        "schema": {
          "type": "string",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "encryptionTerraformVersion": {
        "title": "Terraform Version",
        "icon": "fal-bring-forward",
        "parent": "#/policy/types/encryption",
        "category": "turbot#/control/categories/configured",
        "readOnly": true,
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The version of Terraform to use for this stack.\nSpecify an [npm-style semver](https://docs.npmjs.com/misc/semver) string to\ndetermine which version of the Terraform container\nTurbot will use to run this stack.\n\nA Turbot `Stack` is a set of resources configured by Turbot,\nas specified  via Terraform source.  Stacks are responsible\nfor the creation and deletion of multiple resources. Once created,\nstack resources are responsible for configuring themselves from\nthe stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "default": "0.11.*"
        }
      },
      "keyPolicyStatements": {
        "title": "Policy Statements",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceApproved"
      },
      "keyPolicyStatementsApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "description": "Configure policy statements for KMS keys. This control defines whether to verify if the key policy statements are approved, as well as the subsequent action to take on unapproved statements.\n\nIf set to `Enforce: Delete unapproved`, any unapproved statements will be revoked from the key's policy.\n\nPlease note that if the policy is set to `Enforce: Delete unapproved` and the new key policy does not contain statements that allow the Turbot role to continue to manage the key's policy, this control will fail to apply the new policy due to a best practice from AWS that prevents key administrators from removing their own access.\n",
        "parent": "#/policy/types/keyPolicyStatements",
        "targets": [
          "#/resource/types/key"
        ],
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "keyPolicyStatementsApprovedRules": {
        "title": "Rules",
        "icon": "fal-clipboard-list-check",
        "description": "An [Object Control List (OCL)](https://turbot.com/v5/docs/reference/ocl) with a list of filter rules to approve or reject key policy statements.\n",
        "parent": "#/policy/types/keyPolicyStatementsApproved",
        "targets": [
          "#/resource/types/key"
        ],
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "default": "# Approve unmatched rules\nAPPROVE *",
          "x-schema-form": {
            "type": "textarea"
          }
        }
      },
      "keyRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS KMS keys are supported for use.\n\nAny keys in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-kms#/policy/types/kmsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "keyRotation": {
        "title": "Rotation",
        "icon": "fal-key",
        "description": "Set customer master key policies for automatic key rotation by AWS. Turbot recommends setting this option to Enforce: Enabled, ensuring that KMS keys are rotated annually.",
        "parent": "#/resource/types/key",
        "targets": "#/resource/types/key",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Enabled",
            "Check: Disabled",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Check: Enabled"
          ],
          "default": "Skip"
        }
      },
      "keyTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Determine the action to take when an AWS KMS key tags are not updated based on the `AWS > KMS > Key > Tags > *` policies.\n\nThe control ensure AWS KMS key tags include tags defined in `AWS > KMS > Key > Tags > Template`.\n\nTags not defined in Key Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "keyTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/keyTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "The template is used to generate the keys and values for AWS KMS key.\n\nTags not defined in Key Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-kms#/policy/types/kmsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "keyUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS KMS keys that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > KMS > Key > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "keyUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/keyUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 1000
        }
      },
      "aliasConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/alias",
        "description": "Determine how to configure this resource.  Note that if the resource\nis managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "targets": "#/resource/types/alias",
        "category": "turbot#/control/categories/configured",
        "schema": {
          "enum": [
            "Skip if using Configured > Source",
            "Check: Configured if using Configured > Source",
            "Enforce: Configured if using Configured > Source"
          ],
          "default": "Enforce: Configured if using Configured > Source"
        }
      },
      "aliasConfiguredSource": {
        "title": "Source",
        "icon": "fal-cogs",
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "parent": "#/policy/types/aliasConfigured",
        "targets": "#/resource/types/alias",
        "category": "turbot#/control/categories/configured",
        "schema": {
          "type": "string",
          "default": "{\"resource\": {}}\n",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "aliasConfiguredPrecedence": {
        "title": "Precedence",
        "icon": "fal-cogs",
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n\nBy default, all resources are configured to use the precedence defined\nhere, though they can override their Claim Precedence\n",
        "parent": "#/policy/types/aliasConfigured",
        "targets": "#/resource/types/alias",
        "category": "turbot#/control/categories/configured",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**"
          ]
        }
      }
    }
  },
  "resource": {
    "types": {
      "kms": {
        "title": "KMS",
        "icon": "fal-key",
        "description": "AWS KMS Service",
        "parent": "aws#/resource/types/aws",
        "category": "turbot#/resource/categories/cloudService",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:kms:{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}\"\n",
          "resourceParentAka": "\"arn:{{ $.turbot.custom.aws.partition }}::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}\"\n",
          "title": "KMS"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "name": "KMS",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:kms:us-east-1:123456789012"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012",
              "title": "KMS"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/kms"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/kms"
            },
            {
              "type": "object",
              "required": [
                "name"
              ]
            }
          ]
        }
      },
      "key": {
        "title": "Key",
        "icon": "fal-key",
        "parent": "#/resource/types/kms",
        "category": "turbot#/resource/categories/storageObject",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{% if $.AliasName %}{{ $.AliasName }}{% else %}{{ $.KeyId }}{% endif %}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:kms:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:key/{{ $.KeyId }}\"\n",
          "resourceParentAka": "\"arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}\"\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "KeyId": "39dcbfab-70e6-4368-b592-6f547c2afe7f",
              "AliasName": "aws/acm",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "aws/acm",
              "akas": [
                "arn:aws:kms:us-east-1:123456789012:key/39dcbfab-70e6-4368-b592-6f547c2afe7f"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "terraform": {
          "type": "aws_kms_key",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.KeyId}}",
          "propertyMap": {
            "key_id": "KeyId"
          },
          "stateDefaults": {
            "deletion_window_in_days": 0
          },
          "lifecycle": {
            "cmdbDelete": "delete"
          }
        },
        "schema": {
          "$ref": "#/definitions/key"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/key"
            },
            {
              "type": "object",
              "required": [
                "KeyId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/key"
            },
            {
              "type": "object",
              "properties": {
                "KeyId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "alias": {
        "title": "Alias",
        "icon": "fal-key",
        "parent": "#/resource/types/kms",
        "resourceParents": "#/resource/types/key",
        "metadataTemplates": {
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:kms:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:{{ $.AliasName }}\"\n",
          "resourceParentAka": "\"arn:{{ $.turbot.custom.aws.partition }}:kms:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:key/{{ $.KeyId }}\"\n",
          "title": "{{ $.AliasName }}"
        },
        "category": "turbot#/resource/categories/storageObject",
        "schema": {
          "$ref": "#/definitions/aliasKey"
        },
        "terraform": {
          "type": "aws_kms_alias",
          "stateIdTemplate": "{{$.AliasName}}",
          "propertyMap": {
            "name": "AliasName",
            "target_key_id": "KeyId"
          },
          "lifecycle": {
            "cmdbDelete": "delete"
          }
        }
      }
    }
  },
  "action": {
    "types": {
      "keyDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/key",
        "targets": [
          "#/resource/types/key"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS KMS key from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/key/delete",
          "bundle": "functions/key/delete/dist/index.zip",
          "memory": 1024,
          "hash": "40a35f2759"
        }
      },
      "keyUpdateKeyPolicyStatements": {
        "title": "Update Key Policy Statements",
        "icon": "fal-edit",
        "description": "Update the KMS Key policy statements.",
        "parent": "#/resource/types/key",
        "targets": [
          "#/resource/types/key"
        ],
        "category": "turbot#/control/categories/other",
        "function": {
          "src": "functions/key/updateKeyPolicyStatements",
          "bundle": "functions/key/updateKeyPolicyStatements/dist/index.zip",
          "memory": 1024,
          "hash": "b56b8cf227"
        }
      },
      "keyRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS KMS service Key resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Key resources in the CMDB.\n",
        "events": [
          "kms:CancelKeyDeletion",
          "kms:CreateAlias",
          "kms:CreateKey",
          "kms:DeleteAlias",
          "kms:DisableKey",
          "kms:DisableKeyRotation",
          "kms:EnableKey",
          "kms:EnableKeyRotation",
          "kms:PutKeyPolicy",
          "kms:ScheduleKeyDeletion",
          "kms:TagResource",
          "kms:UntagResource",
          "kms:UpdateAlias",
          "kms:UpdateKeyDescription"
        ]
      },
      "keySetRotation": {
        "title": "Set Rotation",
        "description": "Set customer master key policies for automatic key rotation by AWS.",
        "parent": "#/resource/types/key",
        "targets": "#/resource/types/key",
        "category": "turbot#/control/categories/other",
        "help": "#/help/keySetRotation",
        "validationIgnoreChildProperties": [
          "params"
        ],
        "function": {
          "src": "functions/key/setRotation",
          "bundle": "functions/key/setRotation/dist/index.zip",
          "memory": 1024,
          "hash": "499db052cb"
        }
      },
      "keyUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Update the tags for AWS KMS key tags.",
        "function": {
          "src": "functions/key/updateTags",
          "bundle": "functions/key/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "1e2eb0b8ca"
        }
      }
    }
  },
  "control": {
    "types": {
      "keyActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Take an action when an AWS KMS key is not active based on the\n`AWS > KMS > Key > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > KMS > Key > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/keyCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "keyApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Take an action when an AWS KMS key is not approved based on `AWS > KMS > Key > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/keyCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "keyCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Record and synchronize details for the AWS KMS key into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > KMS > Key > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/key/cmdb",
          "bundle": "functions/key/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "8194b791bf"
        }
      },
      "keyConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Maintain AWS > KMS > Key configuration.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it.\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "encryption": {
        "title": "Encryption",
        "icon": "fal-shield",
        "category": "turbot#/control/categories/other",
        "parent": "aws#/control/types/turbot"
      },
      "encryptionKmsKey": {
        "title": "KMS",
        "icon": "fal-shield",
        "description": "Configure the set of resources in a Turbot Stack per the AWS > Turbot > Encryption > Source > Source policy.\n\nTurbot Stacks are used to manage a set of resources via Terraform. Stacks are responsible for the creation and deletion of multiple resources, but once created, the resources are responsible for configuring themselves with their Configured control, using the Source from the parent stack.\n\nThe AWS > Turbot > Encryption > Source stack is responsible for configuring the kms key required for the encryption at rest.\n",
        "category": "turbot#/control/categories/other",
        "parent": "#/control/types/encryption",
        "targets": "aws#/resource/types/region",
        "flags": [
          "transientStorage"
        ],
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "keyDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS KMS key resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > KMS > Key > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/keyCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/key/discovery",
          "bundle": "functions/key/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "0be7af1be2"
        }
      },
      "keyPolicyStatements": {
        "title": "Policy Statements",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/other"
      },
      "keyPolicyStatementsRulesApproved": {
        "title": "Approved",
        "icon": "fal-coins",
        "description": "Configure policy statements for KMS keys. This control defines whether to verify if the key policy statements are approved, as well as the subsequent action to take on unapproved statements.\n\nIf set to `Enforce: Delete unapproved`, any unapproved statements will be revoked from the key's policy.\n\nPlease note that if the policy is set to `Enforce: Delete unapproved` and the new key policy does not contain statements that allow the Turbot role to continue to manage the key's policy, this control will fail to apply the new policy due to a best practice from AWS that prevents key administrators from removing their own access.\n",
        "parent": "#/control/types/keyPolicyStatements",
        "targets": [
          "#/resource/types/key"
        ],
        "category": "turbot#/control/categories/resourceApproved",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyPolicyStatementsApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          }
        ]
      },
      "keyRotation": {
        "title": "Rotation",
        "icon": "fal-key",
        "description": "Check whether the Rotation Status of the Key is enabled or not.",
        "parent": "#/resource/types/key",
        "targets": "#/resource/types/key",
        "category": "turbot#/control/categories/other",
        "help": "#/help/keyRotation"
      },
      "keyTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/key",
        "targets": [
          "#/resource/types/key"
        ],
        "description": "Take an action when an AWS KMS key tags is not updated based on the `AWS > KMS > Key > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > KMS > Key > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "keyUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/key",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS KMS key resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > KMS > Key > Usage` policy, and set the limit with the `AWS > KMS > Key > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/keyUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "aliasConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "description": "Maintain KMS alias configuration",
        "parent": "#/resource/types/alias",
        "targets": "#/resource/types/alias",
        "category": "turbot#/control/categories/configured",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      }
    }
  },
  "build": "20210513112857299"
}