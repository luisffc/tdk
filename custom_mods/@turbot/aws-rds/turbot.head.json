{
  "$id": "tmod:@turbot/aws-rds",
  "title": "@turbot/aws-rds",
  "author": "Turbot HQ, Inc",
  "version": "5.12.0",
  "license": "For LICENSE see https://turbot.com/license",
  "peerDependencies": {
    "@turbot/aws": "^5.0.0",
    "@turbot/turbot": "^5.22.0",
    "@turbot/turbot-iam": "^5.1.0",
    "@turbot/aws-iam": "^5.1.0"
  },
  "scripts": {
    "prepack": "./build.sh"
  },
  "data": [
    {
      "permission": "cloudwatch:DescribeAlarms",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAM.html"
    },
    {
      "permission": "cloudwatch:GetMetricStatistics",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAM.html"
    },
    {
      "permission": "ec2:DescribeAccountAttributes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAM.html"
    },
    {
      "permission": "ec2:DescribeAvailabilityZones",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAM.html"
    },
    {
      "permission": "ec2:DescribeSecurityGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAM.html"
    },
    {
      "permission": "ec2:DescribeSubnets",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAM.html"
    },
    {
      "permission": "ec2:DescribeVpcs",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAM.html"
    },
    {
      "permission": "pi:*",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Performance Insights is currently in preview."
    },
    {
      "permission": "rds:AddRoleToDBCluster",
      "grant": "Admin",
      "resourceType": "dbCluster",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:AddSourceIdentifierToSubscription",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:AddTagsToResource",
      "grant": "Operator",
      "resourceType": "dbInstance|dbCluster|dbSnapshotManual|optionGroup|subnetGroup|dbParameterGroup|dbClusterParameterGroup|dbClusterSnapshotManual",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ApplyPendingMaintenanceAction",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:AuthorizeDBSecurityGroupIngress",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another."
    },
    {
      "permission": "rds:BacktrackDBCluster",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CopyDBClusterParameterGroup",
      "grant": "Admin",
      "resourceType": "dbClusterParameterGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CopyDBClusterSnapshot",
      "grant": "Operator",
      "resourceType": "dbClusterSnapshotManual",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CopyDBParameterGroup",
      "grant": "Admin",
      "resourceType": "dbParameterGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CopyDBSnapshot",
      "grant": "Operator",
      "resourceType": "dbSnapshotManual",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CopyOptionGroup",
      "grant": "Admin",
      "resourceType": "optionGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBCluster",
      "grant": "Admin",
      "resourceType": "dbCluster",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBClusterEndpoint",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBClusterParameterGroup",
      "grant": "Admin",
      "resourceType": "dbClusterParameterGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBClusterSnapshot",
      "grant": "Operator",
      "resourceType": "dbClusterSnapshotManual",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBInstance",
      "grant": "Admin",
      "resourceType": "dbInstance",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBInstanceReadReplica",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBParameterGroup",
      "grant": "Admin",
      "resourceType": "dbParameterGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBSecurityGroup",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admin can manage DB security group controls access to EC2-Classic DB instances that are not in a VPC."
    },
    {
      "permission": "rds:CreateDBSnapshot",
      "grant": "Operator",
      "resourceType": "dbSnapshotManual",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateDBSubnetGroup",
      "grant": "Whitelist",
      "resourceType": "subnetGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "rdsPermissionsLevelsSubnetGroupAdministration",
      "help": "Permission controlled by AWS > RDS > Subnet Group Management"
    },
    {
      "permission": "rds:CreateEventSubscription",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:CreateOptionGroup",
      "grant": "Admin",
      "resourceType": "optionGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DeleteDBCluster",
      "grant": "Admin",
      "resourceType": "dbCluster",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DeleteDBClusterEndpoint",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DeleteDBClusterParameterGroup",
      "grant": "Admin",
      "resourceType": "dbClusterParameterGroup",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DeleteDBClusterSnapshot",
      "grant": "Admin",
      "resourceType": "dbClusterSnapshotManual",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Deletion of snapshots is limited to Admins even though Operators can create them."
    },
    {
      "permission": "rds:DeleteDBInstance",
      "grant": "Admin",
      "resourceType": "dbInstance",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DeleteDBInstanceAutomatedBackup",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can delete automated backups based on the source instance's DbiResourceId value or the restorable instance's resource ID."
    },
    {
      "permission": "rds:DeleteDBParameterGroup",
      "grant": "Admin",
      "resourceType": "dbParameterGroup",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DeleteDBSecurityGroup",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DeleteDBSnapshot",
      "grant": "Admin",
      "resourceType": "dbSnapshotManual",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Deletion of snapshots is limited to Admins even though Operators can create them."
    },
    {
      "permission": "rds:DeleteDBSubnetGroup",
      "grant": "Whitelist",
      "resourceType": "subnetGroup",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "rdsPermissionsLevelsSubnetGroupAdministration",
      "help": "Permission controlled by AWS > RDS > Subnet Group Management"
    },
    {
      "permission": "rds:DeleteEventSubscription",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DeleteOptionGroup",
      "grant": "Admin",
      "resourceType": "optionGroup",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeAccountAttributes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeCertificates",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBClusterBacktracks",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBClusterEndpoints",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBClusterParameterGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBClusterParameters",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBClusterSnapshotAttributes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBClusterSnapshots",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBClusters",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBEngineVersions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBInstanceAutomatedBackups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBInstances",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBLogFiles",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBParameterGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBParameters",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBSecurityGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBSnapshotAttributes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBSnapshots",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeDBSubnetGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeEngineDefaultClusterParameters",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeEngineDefaultParameters",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeEventCategories",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeEventSubscriptions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeEvents",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeOptionGroupOptions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeOptionGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeOrderableDBInstanceOptions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribePendingMaintenanceActions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeReservedDBInstances",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeReservedDBInstancesOfferings",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeSourceRegions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DescribeValidDBInstanceModifications",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DownloadCompleteDBLogFile",
      "grant": "ReadOnly",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:DownloadDBLogFilePortion",
      "grant": "ReadOnly",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:FailoverDBCluster",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ListTagsForResource",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ModifyCurrentDBClusterCapacity",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can set the capacity of an Aurora Serverless DB cluster to a specific value."
    },
    {
      "permission": "rds:ModifyDBCluster",
      "grant": "Admin",
      "resourceType": "dbCluster",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ModifyDBClusterEndpoint",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can modify the properties of an endpoint in an Amazon Aurora DB cluster."
    },
    {
      "permission": "rds:ModifyDBClusterParameterGroup",
      "grant": "Admin",
      "resourceType": "dbClusterParameterGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ModifyDBClusterSnapshotAttribute",
      "grant": "Admin",
      "resourceType": "dbClusterSnapshotManual",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Allows for cross-account access."
    },
    {
      "permission": "rds:ModifyDBInstance",
      "grant": "Admin",
      "resourceType": "dbInstance",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ModifyDBParameterGroup",
      "grant": "Admin",
      "resourceType": "dbParameterGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ModifyDBSnapshot",
      "grant": "Operator",
      "resourceType": "dbSnapshotManual",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Can update a manual DB snapshot's engine version. Currently only supports MySQL."
    },
    {
      "permission": "rds:ModifyDBSnapshotAttribute",
      "grant": "Admin",
      "resourceType": "dbSnapshotManual",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Allows for cross-account access."
    },
    {
      "permission": "rds:ModifyDBSubnetGroup",
      "grant": "Whitelist",
      "resourceType": "subnetGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "rdsPermissionsLevelsSubnetGroupAdministration",
      "help": "Permission controlled by AWS > RDS > Subnet Group Management"
    },
    {
      "permission": "rds:ModifyEventSubscription",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ModifyOptionGroup",
      "grant": "Admin",
      "resourceType": "optionGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:PromoteReadReplica",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:PromoteReadReplicaDBCluster",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:PurchaseReservedDBInstancesOffering",
      "grant": "Owner",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RebootDBInstance",
      "grant": "Operator",
      "resourceType": "dbInstance",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RemoveRoleFromDBCluster",
      "grant": "Admin",
      "resourceType": "dbCluster",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RemoveSourceIdentifierFromSubscription",
      "grant": "Operator",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RemoveTagsFromResource",
      "grant": "Operator",
      "resourceType": "dbInstance|dbCluster|dbSnapshotManual|optionGroup|subnetGroup|dbParameterGroup|dbClusterParameterGroup|dbClusterSnapshotManual",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ResetDBClusterParameterGroup",
      "grant": "Admin",
      "resourceType": "dbClusterParameterGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:ResetDBParameterGroup",
      "grant": "Admin",
      "resourceType": "dbParameterGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RestoreDBClusterFromS3",
      "grant": "Admin",
      "resourceType": "dbCluster",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RestoreDBClusterFromSnapshot",
      "grant": "Admin",
      "resourceType": "dbCluster",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RestoreDBClusterToPointInTime",
      "grant": "Admin",
      "resourceType": "dbCluster",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RestoreDBInstanceFromDBSnapshot",
      "grant": "Admin",
      "resourceType": "dbInstance",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RestoreDBInstanceFromS3",
      "grant": "Admin",
      "resourceType": "dbInstance",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admin can create backup of there database and store it in s3."
    },
    {
      "permission": "rds:RestoreDBInstanceToPointInTime",
      "grant": "Admin",
      "resourceType": "dbInstance",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:RevokeDBSecurityGroupIngress",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:StartDBCluster",
      "grant": "Operator",
      "resourceType": "dbCluster",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:StartDBInstance",
      "grant": "Operator",
      "resourceType": "dbInstance",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:StopDBCluster",
      "grant": "Operator",
      "resourceType": "dbCluster",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "rds:StopDBInstance",
      "grant": "Operator",
      "resourceType": "dbInstance",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    }
  ],
  "action": {
    "types": {
      "dbClusterDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/dbCluster",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS RDS db cluster from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/dbCluster/delete",
          "bundle": "functions/dbCluster/delete/dist/index.zip",
          "memory": 1024,
          "hash": "f0ba6e48d0"
        }
      },
      "dbClusterRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS RDS service DB Cluster resources.\n\nThe router receives events from the event handler and creates, updates, or deletes DB Cluster resources in the CMDB.\n",
        "events": [
          "rds:AddRoleToDBCluster",
          "rds:AddTagsToResource",
          "rds:CreateDBCluster",
          "rds:DeleteDBCluster",
          "rds:ModifyDBCluster",
          "rds:RemoveRoleFromDBCluster",
          "rds:RemoveTagsFromResource",
          "rds:RestoreDBClusterFromS3",
          "rds:RestoreDBClusterFromSnapshot",
          "rds:RestoreDBClusterToPointInTime",
          "rds:StartDBCluster",
          "rds:StopDBCluster"
        ]
      },
      "dbClusterStart": {
        "title": "Start",
        "icon": "fal-play",
        "description": "Start AWS > RDS > DB Cluster.",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceSchedule",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "function": {
          "src": "functions/dbCluster/start",
          "bundle": "functions/dbCluster/start/dist/index.zip",
          "memory": 1024,
          "hash": "d054e0814f"
        }
      },
      "dbClusterStop": {
        "title": "Stop",
        "icon": "fal-stop",
        "description": "Stops AWS RDS DB Cluster.",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceSchedule",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "function": {
          "src": "functions/dbCluster/stop",
          "bundle": "functions/dbCluster/stop/dist/index.zip",
          "memory": 1024,
          "hash": "c2093b57b3"
        }
      },
      "dbClusterUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Update the tags for AWS RDS db cluster tags.",
        "function": {
          "src": "functions/dbCluster/updateTags",
          "bundle": "functions/dbCluster/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "5f33c7ca7b"
        }
      },
      "dbClusterParameterGroupDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS RDS db cluster parameter group from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/dbClusterParameterGroup/delete",
          "bundle": "functions/dbClusterParameterGroup/delete/dist/index.zip",
          "memory": 1024,
          "hash": "5a19d9e88a"
        }
      },
      "dbClusterParameterGroupRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS RDS service DB Cluster Parameter Group resources.\n\nThe router receives events from the event handler and creates, updates, or deletes DB Cluster Parameter Group resources in the CMDB.\n",
        "events": [
          "rds:AddTagsToResource",
          "rds:CopyDBClusterParameterGroup",
          "rds:CreateDBClusterParameterGroup",
          "rds:DeleteDBClusterParameterGroup",
          "rds:ModifyDBClusterParameterGroup",
          "rds:RemoveTagsFromResource",
          "rds:ResetDBClusterParameterGroup"
        ]
      },
      "dbClusterParameterGroupUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Update the tags for AWS RDS db cluster parameter group tags.",
        "function": {
          "src": "functions/dbClusterParameterGroup/updateTags",
          "bundle": "functions/dbClusterParameterGroup/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "5f33c7ca7b"
        }
      },
      "dbClusterSnapshotManualDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS RDS db cluster snapshot [manual] from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/dbClusterSnapshotManual/delete",
          "bundle": "functions/dbClusterSnapshotManual/delete/dist/index.zip",
          "memory": 1024,
          "hash": "6ce29c3154"
        }
      },
      "dbClusterSnapshotManualRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS RDS service DB Cluster Snapshot [Manual] resources.\n\nThe router receives events from the event handler and creates, updates, or deletes DB Cluster Snapshot [Manual] resources in the CMDB.\n",
        "events": [
          "rds:AddTagsToResource",
          "rds:CopyDBClusterSnapshot",
          "rds:CreateDBClusterSnapshot",
          "rds:DeleteDBClusterSnapshot",
          "rds:ModifyDBClusterSnapshotAttribute",
          "rds:RemoveTagsFromResource"
        ]
      },
      "dbClusterSnapshotManualSetTrustedAccess": {
        "title": "Set Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Set Trusted Access for AWS > RDS > DB Cluster Snapshot [Manual].",
        "function": {
          "src": "functions/dbClusterSnapshotManual/setTrustedAccess",
          "bundle": "functions/dbClusterSnapshotManual/setTrustedAccess/dist/index.zip",
          "memory": 1024,
          "hash": "fd635b3a5f"
        }
      },
      "dbClusterSnapshotManualUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Update the tags for AWS RDS db cluster snapshot [manual] tags.",
        "function": {
          "src": "functions/dbClusterSnapshotManual/updateTags",
          "bundle": "functions/dbClusterSnapshotManual/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "5f33c7ca7b"
        }
      },
      "dbInstanceCreateOrUpdateParameterGroup": {
        "title": "Update Parameter Group",
        "icon": "fal-object-group",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Create or update Parameter Group for an dbInstance",
        "function": {
          "src": "functions/dbInstance/createOrUpdateParameterGroup",
          "bundle": "functions/dbInstance/createOrUpdateParameterGroup/dist/index.zip",
          "memory": 1024,
          "hash": "01419d5199"
        }
      },
      "dbInstanceDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/dbInstance",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS RDS db instance from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/dbInstance/delete",
          "bundle": "functions/dbInstance/delete/dist/index.zip",
          "memory": 1024,
          "hash": "1912d02d34"
        }
      },
      "dbInstanceDisablePublicAccessibility": {
        "title": "Disable Public Accessibility",
        "icon": "fal-cog",
        "description": "Setting db instance to be NOT publicly accessible.",
        "parent": "#/resource/types/dbInstance",
        "targets": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "help": "#/help/dbInstanceDisablePublicAccessibility",
        "validationIgnoreChildProperties": [
          "params"
        ],
        "function": {
          "src": "functions/dbInstance/disablePublicAccessibility",
          "bundle": "functions/dbInstance/disablePublicAccessibility/dist/index.zip",
          "memory": 1024,
          "hash": "a352e01cbc"
        }
      },
      "dbInstanceReboot": {
        "title": "DB Instance Reboot",
        "icon": "fal-power-off",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Reboot DB Instance after parameter group apply.",
        "function": {
          "src": "functions/dbInstance/reboot",
          "bundle": "functions/dbInstance/reboot/dist/index.zip",
          "memory": 1024,
          "hash": "3527d1fd21"
        }
      },
      "dbInstanceRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS RDS service DB Instance resources.\n\nThe router receives events from the event handler and creates, updates, or deletes DB Instance resources in the CMDB.\n",
        "events": [
          "rds:AddTagsToResource",
          "rds:CreateDBInstance",
          "rds:DeleteDBInstance",
          "rds:ModifyDBInstance",
          "rds:RebootDBInstance",
          "rds:RemoveTagsFromResource",
          "rds:RestoreDBInstanceFromDBSnapshot",
          "rds:RestoreDBInstanceFromS3",
          "rds:RestoreDBInstanceToPointInTime",
          "rds:StartDBInstance",
          "rds:StopDBInstance"
        ]
      },
      "dbInstanceSnapshotAndDeleteInstance": {
        "title": "Snapshot and delete instance",
        "icon": "fal-play",
        "description": "Take Snapshot and delete AWS RDS instance.",
        "parent": "#/resource/types/dbInstance",
        "targets": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "function": {
          "src": "functions/dbInstance/snapshotAndDeleteInstance",
          "bundle": "functions/dbInstance/snapshotAndDeleteInstance/dist/index.zip",
          "memory": 1024,
          "hash": "375e8855f1"
        }
      },
      "dbInstanceSnapshotAndStopInstance": {
        "title": "Snapshot and stop instance",
        "icon": "fal-play",
        "description": "Take Snapshot and stop AWS RDS instance.",
        "parent": "#/resource/types/dbInstance",
        "targets": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "function": {
          "src": "functions/dbInstance/snapshotAndStopInstance",
          "bundle": "functions/dbInstance/snapshotAndStopInstance/dist/index.zip",
          "memory": 1024,
          "hash": "e3acbc1c13"
        }
      },
      "instanceStart": {
        "title": "Start",
        "icon": "fal-play",
        "description": "Start AWS > RDS > DB Instance.",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceSchedule",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "function": {
          "src": "functions/dbInstance/start",
          "bundle": "functions/dbInstance/start/dist/index.zip",
          "memory": 1024,
          "hash": "dc66ee6f91"
        }
      },
      "instanceStop": {
        "title": "Stop",
        "icon": "fal-stop",
        "description": "Stops AWS RDS DB Instance.",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceSchedule",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "function": {
          "src": "functions/dbInstance/stop",
          "bundle": "functions/dbInstance/stop/dist/index.zip",
          "memory": 1024,
          "hash": "d7bddd09a4"
        }
      },
      "dbInstanceUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Update the tags for AWS RDS db instance tags.",
        "function": {
          "src": "functions/dbInstance/updateTags",
          "bundle": "functions/dbInstance/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "e1ef552434"
        }
      },
      "dbParameterGroupDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/dbParameterGroup",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS RDS db parameter group from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/dbParameterGroup/delete",
          "bundle": "functions/dbParameterGroup/delete/dist/index.zip",
          "memory": 1024,
          "hash": "ad88a73d87"
        }
      },
      "dbParameterGroupRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS RDS service DB Parameter Group resources.\n\nThe router receives events from the event handler and creates, updates, or deletes DB Parameter Group resources in the CMDB.\n",
        "events": [
          "rds:AddTagsToResource",
          "rds:CopyDBParameterGroup",
          "rds:CreateDBParameterGroup",
          "rds:DeleteDBParameterGroup",
          "rds:ModifyDBParameterGroup",
          "rds:RemoveTagsFromResource",
          "rds:ResetDBParameterGroup"
        ]
      },
      "dbParameterGroupUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Update the tags for AWS RDS db parameter group tags.",
        "function": {
          "src": "functions/dbParameterGroup/updateTags",
          "bundle": "functions/dbParameterGroup/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "5f33c7ca7b"
        }
      },
      "dbSnapshotManualDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/dbSnapshotManual",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS RDS db snapshot [manual] from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/dbSnapshotManual/delete",
          "bundle": "functions/dbSnapshotManual/delete/dist/index.zip",
          "memory": 1024,
          "hash": "0ed657aa98"
        }
      },
      "dbSnapshotManualRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS RDS service DB Snapshot [Manual] resources.\n\nThe router receives events from the event handler and creates, updates, or deletes DB Snapshot [Manual] resources in the CMDB.\n",
        "events": [
          "rds:AddTagsToResource",
          "rds:CopyDBSnapshot",
          "rds:CreateDBSnapshot",
          "rds:DeleteDBSnapshot",
          "rds:ModifyDBSnapshot",
          "rds:ModifyDBSnapshotAttribute",
          "rds:RemoveTagsFromResource"
        ]
      },
      "dbSnapshotManualSetTrustedAccess": {
        "title": "Set Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/dbSnapshotManual",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Set Trusted Access for AWS > RDS > DB Snapshot [Manual].",
        "function": {
          "src": "functions/dbSnapshotManual/setTrustedAccess",
          "bundle": "functions/dbSnapshotManual/setTrustedAccess/dist/index.zip",
          "memory": 1024,
          "hash": "20829c6092"
        }
      },
      "dbSnapshotManualUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Update the tags for AWS RDS db snapshot [manual] tags.",
        "function": {
          "src": "functions/dbSnapshotManual/updateTags",
          "bundle": "functions/dbSnapshotManual/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "ebc8f6de24"
        }
      },
      "optionGroupDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/optionGroup",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS RDS option group from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/optionGroup/delete",
          "bundle": "functions/optionGroup/delete/dist/index.zip",
          "memory": 1024,
          "hash": "1f85e735e9"
        }
      },
      "optionGroupRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS RDS service Option Group resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Option Group resources in the CMDB.\n",
        "events": [
          "rds:AddTagsToResource",
          "rds:CopyOptionGroup",
          "rds:CreateOptionGroup",
          "rds:DeleteOptionGroup",
          "rds:ModifyOptionGroup",
          "rds:RemoveTagsFromResource"
        ]
      },
      "optionGroupUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Update the tags for AWS RDS option group tags.",
        "function": {
          "src": "functions/optionGroup/updateTags",
          "bundle": "functions/optionGroup/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "ebc8f6de24"
        }
      },
      "subnetGroupDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/subnetGroup",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS RDS subnet group from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/subnetGroup/delete",
          "bundle": "functions/subnetGroup/delete/dist/index.zip",
          "memory": 1024,
          "hash": "1a4bd02231"
        }
      },
      "subnetGroupRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS RDS service Subnet Group resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Subnet Group resources in the CMDB.\n",
        "events": [
          "rds:AddTagsToResource",
          "rds:CreateDBSubnetGroup",
          "rds:DeleteDBSubnetGroup",
          "rds:ModifyDBSubnetGroup",
          "rds:RemoveTagsFromResource"
        ]
      },
      "subnetGroupUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Update the tags for AWS RDS subnet group tags.",
        "function": {
          "src": "functions/subnetGroup/updateTags",
          "bundle": "functions/subnetGroup/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "ebc8f6de24"
        }
      }
    }
  },
  "control": {
    "types": {
      "dbClusterActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Take an action when an AWS RDS db cluster is not active based on the\n`AWS > RDS > DB Cluster > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbClusterCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "dbClusterApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Take an action when an AWS RDS db cluster is not approved based on `AWS > RDS > DB Cluster > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbClusterCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbClusterCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Record and synchronize details for the AWS RDS db cluster into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Cluster > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/dbCluster/cmdb",
          "bundle": "functions/dbCluster/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "79ab24f158"
        }
      },
      "dbClusterConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Maintain AWS > RDS > DB Cluster configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "dbClusterDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS RDS db cluster resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > RDS > DB Cluster > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/dbClusterCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/dbCluster/discovery",
          "bundle": "functions/dbCluster/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "59f1ef2308"
        }
      },
      "dbClusterSchedule": {
        "title": "Schedule",
        "icon": "fal-clock",
        "parent": "#/resource/types/dbCluster",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Set a schedule for starting and stopping an AWS RDS db cluster.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\ndb cluster has a turbot_custom_schedule tag, then the schedule specified by\nthe tag will be in effect.\n",
        "precheck": [
          {
            "control": {
              "uri": "tmod:@turbot/aws-rds#/control/types/dbClusterCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbClusterTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/dbCluster",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Take an action when an AWS RDS db cluster tags is not updated based on the `AWS > RDS > DB Cluster > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > RDS > DB Cluster > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "dbClusterUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS RDS db cluster resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > RDS > DB Cluster > Usage` policy, and set the limit with the `AWS > RDS > DB Cluster > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "dbClusterParameterGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Take an action when an AWS RDS db cluster parameter group is not active based on the\n`AWS > RDS > DB Cluster Parameter Group > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Parameter Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterParameterGroupActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbClusterParameterGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "dbClusterParameterGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Take an action when an AWS RDS db cluster parameter group is not approved based on `AWS > RDS > DB Cluster Parameter Group > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterParameterGroupApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbClusterParameterGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbClusterParameterGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Record and synchronize details for the AWS RDS db cluster parameter group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Cluster Parameter Group > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterParameterGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/dbClusterParameterGroup/cmdb",
          "bundle": "functions/dbClusterParameterGroup/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "fff8f5a4af"
        }
      },
      "dbClusterParameterGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Maintain AWS > RDS > DB Cluster Parameter Group configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "dbClusterParameterGroupDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS RDS db cluster parameter group resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > RDS > DB Cluster Parameter Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterParameterGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/dbClusterParameterGroupCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/dbClusterParameterGroup/discovery",
          "bundle": "functions/dbClusterParameterGroup/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "7919384bfa"
        }
      },
      "dbClusterParameterGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Take an action when an AWS RDS db cluster parameter group tags is not updated based on the `AWS > RDS > DB Cluster Parameter Group > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > RDS > DB Cluster Parameter Group > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterParameterGroupTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "dbClusterParameterGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS RDS db cluster parameter group resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > RDS > DB Cluster Parameter Group > Usage` policy, and set the limit with the `AWS > RDS > DB Cluster Parameter Group > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterParameterGroupUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "dbClusterSnapshotManualActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Take an action when an AWS RDS db cluster snapshot [manual] is not active based on the\n`AWS > RDS > DB Cluster Snapshot [Manual] > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Snapshot [Manual] > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterSnapshotManualActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbClusterSnapshotManualCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "dbClusterSnapshotManualApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Take an action when an AWS RDS db cluster snapshot [manual] is not approved based on `AWS > RDS > DB Cluster Snapshot [Manual] > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterSnapshotManualApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbClusterSnapshotManualCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbClusterSnapshotManualCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Record and synchronize details for the AWS RDS db cluster snapshot [manual] into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Cluster Snapshot [Manual] > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterSnapshotManualCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/dbClusterSnapshotManual/cmdb",
          "bundle": "functions/dbClusterSnapshotManual/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "f81f23b581"
        }
      },
      "dbClusterSnapshotManualConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Maintain AWS > RDS > DB Cluster Snapshot [Manual] configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "dbClusterSnapshotManualDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS RDS db cluster snapshot [manual] resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > RDS > DB Cluster Snapshot [Manual] > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterSnapshotManualCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/dbClusterSnapshotManualCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/dbClusterSnapshotManual/discovery",
          "bundle": "functions/dbClusterSnapshotManual/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "0938d01763"
        }
      },
      "dbClusterSnapshotManualTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Take an action when an AWS RDS db cluster snapshot [manual] tags is not updated based on the `AWS > RDS > DB Cluster Snapshot [Manual] > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > RDS > DB Cluster Snapshot [Manual] > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterSnapshotManualTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "dbClusterSnapshotManualTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Manage trusted access for AWS RDS DB Cluster Snapshot [Manual]s.\n\nAWS allows RDS DB Cluster Snapshot [Manual]s to be shared with specific AWS accounts.\nThis control allows you to configure whether such sharing is allowed, and to which accounts.\n\nIf set to `Enforce`, access to non-trusted accounts will be removed.\n"
      },
      "dbClusterSnapshotManualUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS RDS db cluster snapshot [manual] resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > RDS > DB Cluster Snapshot [Manual] > Usage` policy, and set the limit with the `AWS > RDS > DB Cluster Snapshot [Manual] > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbClusterSnapshotManualUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "dbInstanceActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Take an action when an AWS RDS db instance is not active based on the\n`AWS > RDS > DB Instance > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Instance > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbInstanceActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbInstanceCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "dbInstanceApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Take an action when an AWS RDS db instance is not approved based on `AWS > RDS > DB Instance > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbInstanceApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbInstanceCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbInstanceCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Record and synchronize details for the AWS RDS db instance into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Instance > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbInstanceCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/dbInstance/cmdb",
          "bundle": "functions/dbInstance/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "0621258ae5"
        }
      },
      "dbInstanceConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Maintain AWS > RDS > DB Instance configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "dbInstanceDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS RDS db instance resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > RDS > DB Instance > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbInstanceCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/dbInstanceCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/dbInstance/discovery",
          "bundle": "functions/dbInstance/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "0d35303025"
        }
      },
      "dbInstanceParameterGroup": {
        "title": "Parameter Group",
        "icon": "fal-object-group",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Determine whether to check or enforce a specific Parameter Group for this DB Instance.\n\nUse the `Parameter Group > Name` sub-policy to set which Parameter Group to configure for this instance.\n"
      },
      "dbInstancePubliclyAccessible": {
        "title": "Publicly Accessible",
        "icon": "fal-cog",
        "description": "Ensure the RDS instance is not publicly accessible.",
        "parent": "#/resource/types/dbInstance",
        "targets": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "help": "#/help/dbInstancePubliclyAccessible"
      },
      "instanceSchedule": {
        "title": "Schedule",
        "icon": "fal-clock",
        "parent": "#/resource/types/dbInstance",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Set a schedule for starting and stopping an AWS RDS db instance.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\ndb instance has a turbot_custom_schedule tag, then the schedule specified by\nthe tag will be in effect.\n",
        "precheck": [
          {
            "control": {
              "uri": "tmod:@turbot/aws-rds#/control/types/dbInstanceCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbInstanceTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/dbInstance",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Take an action when an AWS RDS db instance tags is not updated based on the `AWS > RDS > DB Instance > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > RDS > DB Instance > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbInstanceTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "dbInstanceUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS RDS db instance resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > RDS > DB Instance > Usage` policy, and set the limit with the `AWS > RDS > DB Instance > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbInstanceUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "dbParameterGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Take an action when an AWS RDS db parameter group is not active based on the\n`AWS > RDS > DB Parameter Group > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Parameter Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbParameterGroupActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbParameterGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "dbParameterGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Take an action when an AWS RDS db parameter group is not approved based on `AWS > RDS > DB Parameter Group > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbParameterGroupApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbParameterGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbParameterGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Record and synchronize details for the AWS RDS db parameter group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Parameter Group > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbParameterGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/dbParameterGroup/cmdb",
          "bundle": "functions/dbParameterGroup/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "deedb38d59"
        }
      },
      "dbParameterGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Maintain AWS > RDS > DB Parameter Group configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "dbParameterGroupDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS RDS db parameter group resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > RDS > DB Parameter Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbParameterGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/dbParameterGroupCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/dbParameterGroup/discovery",
          "bundle": "functions/dbParameterGroup/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "7a31862968"
        }
      },
      "dbParameterGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/dbParameterGroup",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Take an action when an AWS RDS db parameter group tags is not updated based on the `AWS > RDS > DB Parameter Group > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > RDS > DB Parameter Group > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbParameterGroupTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "dbParameterGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS RDS db parameter group resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > RDS > DB Parameter Group > Usage` policy, and set the limit with the `AWS > RDS > DB Parameter Group > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbParameterGroupUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "dbSnapshotManualActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Take an action when an AWS RDS db snapshot [manual] is not active based on the\n`AWS > RDS > DB Snapshot [Manual] > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Snapshot [Manual] > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbSnapshotManualActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbSnapshotManualCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "dbSnapshotManualApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Take an action when an AWS RDS db snapshot [manual] is not approved based on `AWS > RDS > DB Snapshot [Manual] > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbSnapshotManualApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/dbSnapshotManualCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbSnapshotManualCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Record and synchronize details for the AWS RDS db snapshot [manual] into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Snapshot [Manual] > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbSnapshotManualCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/dbSnapshotManual/cmdb",
          "bundle": "functions/dbSnapshotManual/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "6951590e5b"
        }
      },
      "dbSnapshotManualConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Maintain AWS > RDS > DB Snapshot [Manual] configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "dbSnapshotManualDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS RDS db snapshot [manual] resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > RDS > DB Snapshot [Manual] > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbSnapshotManualCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/dbSnapshotManualCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/dbSnapshotManual/discovery",
          "bundle": "functions/dbSnapshotManual/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "e7c65a1512"
        }
      },
      "dbSnapshotManualTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/dbSnapshotManual",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Take an action when an AWS RDS db snapshot [manual] tags is not updated based on the `AWS > RDS > DB Snapshot [Manual] > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > RDS > DB Snapshot [Manual] > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbSnapshotManualTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "dbSnapshotManualTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Manage trusted access for AWS RDS DB Snapshot [Manual]s.\n\nAWS allows RDS DB Snapshot [Manual]s to be shared with specific AWS accounts.\nThis control allows you to configure whether such sharing is allowed, and to which accounts.\n\nIf set to `Enforce`, access to non-trusted accounts will be removed.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbSnapshotManualTrustedAccess",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Trusted Access set to Skip"
          },
          {
            "control": {
              "uri": "tmod:@turbot/aws-rds#/control/types/dbSnapshotManualCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "dbSnapshotManualUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS RDS db snapshot [manual] resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > RDS > DB Snapshot [Manual] > Usage` policy, and set the limit with the `AWS > RDS > DB Snapshot [Manual] > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/dbSnapshotManualUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "optionGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Take an action when an AWS RDS option group is not active based on the\n`AWS > RDS > Option Group > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > Option Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/optionGroupActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/optionGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "optionGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Take an action when an AWS RDS option group is not approved based on `AWS > RDS > Option Group > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/optionGroupApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/optionGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "optionGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Record and synchronize details for the AWS RDS option group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > Option Group > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/optionGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/optionGroup/cmdb",
          "bundle": "functions/optionGroup/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "b72292a44d"
        }
      },
      "optionGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Maintain AWS > RDS > Option Group configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "optionGroupDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS RDS option group resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > RDS > Option Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/optionGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/optionGroupCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/optionGroup/discovery",
          "bundle": "functions/optionGroup/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "fc26b51365"
        }
      },
      "optionGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/optionGroup",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Take an action when an AWS RDS option group tags is not updated based on the `AWS > RDS > Option Group > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > RDS > Option Group > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/optionGroupTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "optionGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS RDS option group resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > RDS > Option Group > Usage` policy, and set the limit with the `AWS > RDS > Option Group > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/optionGroupUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "rdsStack": {
        "title": "Stack",
        "icon": "fal-layer-group",
        "parent": "#/resource/types/rds",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure a custom stack on AWS, per the custom `Stack > Source`.\n\nA Turbot `Stack` is a set of resources configured by Turbot, as specified\nvia Terraform source.  Stacks are responsible for the creation and deletion\nof multiple resources. Once created, stack resources are responsible for\nconfiguring themselves from the stack source via their `Configured` control.\n",
        "flags": [
          "transientStorage"
        ],
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "subnetGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Take an action when an AWS RDS subnet group is not active based on the\n`AWS > RDS > Subnet Group > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > Subnet Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetGroupActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/subnetGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "subnetGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Take an action when an AWS RDS subnet group is not approved based on `AWS > RDS > Subnet Group > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetGroupApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/subnetGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "subnetGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Record and synchronize details for the AWS RDS subnet group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > Subnet Group > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/subnetGroup/cmdb",
          "bundle": "functions/subnetGroup/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "4de716baac"
        }
      },
      "subnetGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Maintain AWS > RDS > Subnet Group configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "subnetGroupDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Discover all AWS RDS subnet group resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > RDS > Subnet Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/subnetGroupCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/subnetGroup/discovery",
          "bundle": "functions/subnetGroup/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "6fe389b87f"
        }
      },
      "subnetGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/subnetGroup",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Take an action when an AWS RDS subnet group tags is not updated based on the `AWS > RDS > Subnet Group > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > RDS > Subnet Group > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetGroupTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "subnetGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS RDS subnet group resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > RDS > Subnet Group > Usage` policy, and set the limit with the `AWS > RDS > Subnet Group > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/subnetGroupUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      }
    }
  },
  "definitions": {
    "dbCluster": {
      "type": "object",
      "properties": {
        "ActivityStreamMode": {
          "$ref": "#/definitions/streamMode"
        },
        "ActivityStreamStatus": {
          "$ref": "#/definitions/streamStatus"
        },
        "ActivityStreamKmsKeyId": {
          "type": "string"
        },
        "ActivityStreamKinesisStreamName": {
          "type": "string"
        },
        "CopyTagsToSnapshot": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "AllocatedStorage": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "AssociatedRoles": {
          "$ref": "#/definitions/associatedRoles"
        },
        "AvailabilityZones": {
          "$ref": "#/definitions/availabilityZones"
        },
        "BacktrackConsumedChangeRecords": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "BacktrackWindow": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "BackupRetentionPeriod": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "Capacity": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "CharacterSetName": {
          "$ref": "#/definitions/name"
        },
        "CloneGroupId": {
          "$ref": "#/definitions/name"
        },
        "ClusterCreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "CrossAccountClone": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "CustomEndpoints": {
          "type": "array"
        },
        "DatabaseName": {
          "$ref": "#/definitions/dbClusterIdentifier"
        },
        "DBClusterArn": {
          "$ref": "#/definitions/dbClusterArn"
        },
        "DBClusterIdentifier": {
          "$ref": "#/definitions/dbClusterIdentifier"
        },
        "DBClusterMembers": {
          "$ref": "#/definitions/dbClusterMembers"
        },
        "DBClusterOptionGroupMemberships": {
          "$ref": "#/definitions/dbClusterOptionGroupMemberships"
        },
        "DBClusterParameterGroup": {
          "$ref": "#/definitions/name"
        },
        "DbClusterResourceId": {
          "$ref": "#/definitions/dbClusterResourceId"
        },
        "DBSubnetGroup": {
          "$ref": "#/definitions/name"
        },
        "DeletionProtection": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "EarliestBacktrackTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "EarliestRestorableTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "EnabledCloudwatchLogsExports": {
          "$ref": "#/definitions/values"
        },
        "Endpoint": {
          "$ref": "#/definitions/name"
        },
        "Engine": {
          "$ref": "#/definitions/name"
        },
        "EngineMode": {
          "$ref": "#/definitions/engineMode"
        },
        "EngineVersion": {
          "$ref": "#/definitions/name"
        },
        "HostedZoneId": {
          "$ref": "#/definitions/hostedZoneId"
        },
        "HttpEndpointEnabled": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "IAMDatabaseAuthenticationEnabled": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "KmsKeyId": {
          "$ref": "#/definitions/kmsKeyId"
        },
        "LatestRestorableTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "MasterUsername": {
          "$ref": "#/definitions/name"
        },
        "MultiAZ": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "PercentProgress": {
          "$ref": "#/definitions/name"
        },
        "Port": {
          "$ref": "#/definitions/port"
        },
        "PreferredBackupWindow": {
          "$ref": "#/definitions/preferredBackupWindow"
        },
        "PreferredMaintenanceWindow": {
          "$ref": "#/definitions/preferredMaintenanceWindow"
        },
        "ReaderEndpoint": {
          "$ref": "#/definitions/name"
        },
        "ReadReplicaIdentifiers": {
          "$ref": "#/definitions/values"
        },
        "ReplicationSourceIdentifier": {
          "$ref": "#/definitions/name"
        },
        "ScalingConfigurationInfo": {
          "$ref": "#/definitions/scalingConfigurationInfo"
        },
        "Status": {
          "$ref": "#/definitions/dbClusterStatus"
        },
        "StorageEncrypted": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "VpcSecurityGroups": {
          "type": "array"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dbClusterArn"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/dbClusterIdentifier"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "Tags": [
              {
                "Key": "key01",
                "Value": "value01"
              }
            ],
            "AllocatedStorage": 123,
            "ActivityStreamMode": "sync",
            "ActivityStreamStatus": "started",
            "AssociatedRoles": [
              {
                "FeatureName": "foo",
                "RoleArn": "arn:aws:iam::111666065714:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
              }
            ],
            "AvailabilityZones": [
              "ap-south-1a",
              "ap-south-1b"
            ],
            "BacktrackConsumedChangeRecords": 143,
            "BacktrackWindow": 0,
            "BackupRetentionPeriod": 12,
            "Capacity": 10,
            "CharacterSetName": "food",
            "CloneGroupId": "clonedcluster",
            "ClusterCreateTime": "2018-08-28T08:28:10.516Z",
            "DatabaseName": "fosds",
            "DBClusterArn": "arn:aws:rds:ap-south-1:111666065714:cluster:turbot-rds-test-1-1",
            "DBClusterIdentifier": "fsd-sdfds",
            "DBClusterMembers": [
              {
                "DBClusterParameterGroupStatus": "foo",
                "DBInstanceIdentifier": "foosdfsd",
                "IsClusterWriter": true,
                "PromotionTier": 1
              }
            ],
            "DBClusterOptionGroupMemberships": [
              {
                "DBClusterOptionGroupName": "foo"
              },
              {
                "Status": "foo"
              }
            ],
            "DBClusterParameterGroup": "foo",
            "DbClusterResourceId": "cluster-DKHY2AMIPHVBZ7OGF4TCPOGJA4",
            "DBSubnetGroup": "foosd",
            "EarliestBacktrackTime": "2018-08-28T08:28:10.516Z",
            "EarliestRestorableTime": "2018-08-28T08:28:10.516Z",
            "EnabledCloudwatchLogsExports": [
              "570da01b",
              "570da01b"
            ],
            "Endpoint": "turbot-rds-test-1-1.cluster-cpgmswtt1cws.ap-south-1.rds.amazonaws.com",
            "Engine": "aurora",
            "EngineMode": "provisioned",
            "EngineVersion": "5.6.10a",
            "HostedZoneId": "Z2VFMSZA74J7XZ",
            "IAMDatabaseAuthenticationEnabled": false,
            "KmsKeyId": "abcde",
            "LatestRestorableTime": "2018-08-28T09:12:15.789Z",
            "MasterUsername": "turbot",
            "MultiAZ": false,
            "PercentProgress": "100%",
            "Port": 3306,
            "PreferredBackupWindow": "12:12-12:24",
            "PreferredMaintenanceWindow": "wed:11:23-wed:11:53",
            "ReaderEndpoint": "turbot-rds-test-1-1.cluster-ro-cpgmswtt1cws.ap-south-1.rds.amazonaws.com",
            "ReadReplicaIdentifiers": [
              "570da01b",
              "570da01b"
            ],
            "ReplicationSourceIdentifier": "foo",
            "ScalingConfigurationInfo": {
              "AutoPause": false,
              "MaxCapacity": 10,
              "MinCapacity": 1,
              "SecondsUntilAutoPause": 11
            },
            "StorageEncrypted": false,
            "turbot": {
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:cluster:turbot-rds-test-1-1"
              ],
              "tags": {
                "key01": "value01"
              },
              "title": "fsd-sdfds",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "dbClusterIdentifier": {
      "type": "string",
      "pattern": "^([a-z][-a-z0-9]*)$",
      "tests": [
        {
          "input": "foo"
        },
        {
          "input": "avesfss"
        },
        {
          "description": "null value",
          "input": null,
          "expected": false
        },
        {
          "description": "empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - can not end with underscore",
          "input": "a0123-_",
          "expected": false
        },
        {
          "description": "invalid - cannot start with a number",
          "input": "0123-asd",
          "expected": false
        }
      ]
    },
    "dbClusterArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:cluster:[-a-zA-Z0-9]*?",
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:cluster:turbot-rds-test-1-1"
        },
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:cluster:dbname"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11166665714:cluster:dbname",
          "expected": false
        }
      ]
    },
    "dbClusterMembers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dbClusterMember"
      },
      "tests": [
        {
          "input": [
            {
              "DBClusterParameterGroupStatus": "default.aurora5.6",
              "DBInstanceIdentifier": "foosdfsd",
              "IsClusterWriter": true,
              "PromotionTier": 1
            }
          ]
        }
      ]
    },
    "dbClusterMember": {
      "type": "object",
      "properties": {
        "DBClusterParameterGroupStatus": {
          "$ref": "#/definitions/name"
        },
        "DBInstanceIdentifier": {
          "$ref": "#/definitions/dbClusterIdentifier"
        },
        "IsClusterWriter": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "PromotionTier": {
          "$ref": "#/definitions/allocatedStorage"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "DBClusterParameterGroupStatus": "default.aurora5.6",
            "DBInstanceIdentifier": "foosdfsd",
            "IsClusterWriter": true,
            "PromotionTier": 1
          }
        },
        {
          "description": "invalid - isclusterwriter is in not boolean",
          "input": {
            "DBClusterParameterGroupStatus": "default.aurora5.6",
            "DBInstanceIdentifier": "arn:aws:iam::111666065714:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
            "IsClusterWriter": "pending",
            "PromotionTier": "hi"
          },
          "expected": false
        }
      ]
    },
    "engineMode": {
      "type": "string",
      "enum": [
        "provisioned",
        "serverless"
      ],
      "tests": [
        {
          "input": "serverless"
        },
        {
          "input": "provisioned"
        },
        {
          "describe": "invalid - value not allowed",
          "input": "vaid",
          "expected": false
        }
      ]
    },
    "scalingConfigurationInfo": {
      "type": "object",
      "properties": {
        "AutoPause": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "MaxCapacity": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "MinCapacity": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "SecondsUntilAutoPause": {
          "$ref": "#/definitions/allocatedStorage"
        }
      },
      "tests": [
        {
          "input": {
            "AutoPause": false,
            "MaxCapacity": 10,
            "MinCapacity": 1,
            "SecondsUntilAutoPause": 11
          }
        }
      ]
    },
    "dbClusterOptionGroupMemberships": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dbClusterOptionGroupStatus"
      },
      "tests": [
        {
          "input": [
            {
              "DBClusterOptionGroupName": "foo",
              "Status": "foo"
            }
          ]
        }
      ]
    },
    "dbClusterOptionGroupStatus": {
      "type": "object",
      "properties": {
        "DBClusterOptionGroupName": {
          "$ref": "#/definitions/name"
        },
        "Status": {
          "$ref": "#/definitions/name"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "DBClusterOptionGroupName": "foo",
            "Status": "foo"
          }
        },
        {
          "description": "invalid - array passed instead of string",
          "input": {
            "DBClusterOptionGroupName": "foo",
            "Status": [
              "foo"
            ]
          },
          "expected": false
        }
      ]
    },
    "dbClusterResourceId": {
      "type": "string",
      "pattern": "^cluster-([A-Z0-9])*$",
      "tests": [
        {
          "input": "cluster-DKHY2AMIPHVBZ7OGF4TCPOGJA4"
        },
        {
          "input": "cluster-DKHY2AMIPHVBZ7OGF4TCPOGJA5"
        },
        {
          "description": "invalid - pattern not matched",
          "input": "DKHY2AMIPHVBZ7OGF4TCPOGJA5",
          "expected": false
        }
      ]
    },
    "dbClusterStatus": {
      "type": "string",
      "enum": [
        "available",
        "backing-up",
        "backtracking",
        "cloning-failed",
        "creating",
        "deleting",
        "failing-over",
        "inaccessible-encryption-credentials",
        "maintenance",
        "migrating",
        "migration-failed",
        "modifying",
        "promoting",
        "renaming",
        "resetting-master-credentials",
        "starting",
        "stopped",
        "stopping",
        "update-iam-db-auth",
        "upgrading"
      ],
      "tests": [
        {
          "input": "available"
        },
        {
          "input": "creating"
        },
        {
          "description": "invalid - not listed in options",
          "input": "reactive",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        },
        {
          "description": "invalid - status in upper case",
          "input": "ACTIVE",
          "expected": false
        }
      ]
    },
    "streamMode": {
      "type": "string",
      "enum": [
        "sync",
        "async"
      ]
    },
    "streamStatus": {
      "type": "string",
      "enum": [
        "stopped",
        "starting",
        "started",
        "stopping"
      ]
    },
    "dbClusterParameterGroup": {
      "type": "object",
      "properties": {
        "DBClusterParameterGroupArn": {
          "$ref": "#/definitions/dbClusterParameterGroupArn"
        },
        "DBClusterParameterGroupName": {
          "$ref": "#/definitions/dbClusterParameterGroupName"
        },
        "DBParameterGroupFamily": {
          "$ref": "#/definitions/name"
        },
        "Description": {
          "$ref": "#/definitions/name"
        },
        "Marker": {
          "type": "string"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dbClusterParameterGroupArn"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/dbClusterParameterGroupName"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "DBClusterParameterGroupArn": "arn:aws:rds:ap-south-1:111666065714:cluster-pg:default.aurora5.6",
            "DBClusterParameterGroupName": "default.aurora5.6",
            "DBParameterGroupFamily": "aurora5.6",
            "Description": "Default cluster parameter group for aurora5.6",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:rds:us-east-1:123456789012:cluster-pg:default.aurora5.6"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "title": "default.aurora5.6",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "dbClusterParameterGroupName": {
      "type": "string",
      "pattern": "^(((?!.*--)[a-zA-Z][a-zA-Z0-9.-]*){1,254})$",
      "tests": [
        {
          "input": "foo"
        },
        {
          "input": "avesfss"
        },
        {
          "input": "default.aurora5.6"
        },
        {
          "description": "null value",
          "input": null,
          "expected": false
        },
        {
          "description": "empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - can not end with underscore",
          "input": "a0123-_",
          "expected": false
        },
        {
          "description": "invalid - cannot start with a number",
          "input": "0123-asd",
          "expected": false
        }
      ]
    },
    "dbClusterParameterGroupArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:cluster-pg:[-a-zA-Z.0-9]*?",
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:cluster-pg:default.aurora5.6"
        },
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:cluster-pg:default.mysql5.1"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11166606571:cluster-pg1:default.aurora5.6",
          "expected": false
        }
      ]
    },
    "snapshotType": {
      "type": "string",
      "enum": [
        "automated",
        "manual",
        "shared",
        "public"
      ],
      "tests": [
        {
          "input": "automated"
        },
        {
          "input": "manual"
        },
        {
          "input": "public"
        },
        {
          "description": "invalid - case sensitive",
          "input": "Public",
          "expected": false
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "dbClusterSnapshotManual": {
      "type": "object",
      "properties": {
        "AllocatedStorage": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "AvailabilityZones": {
          "$ref": "#/definitions/availabilityZones"
        },
        "ClusterCreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "SnapshotCreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "DBClusterIdentifier": {
          "$ref": "#/definitions/dbClusterIdentifier"
        },
        "DBClusterSnapshotArn": {
          "$ref": "#/definitions/dbClusterSnapshotArn"
        },
        "DBClusterSnapshotIdentifier": {
          "$ref": "#/definitions/dbClusterSnapshotIdentifier"
        },
        "SnapshotType": {
          "$ref": "#/definitions/snapshotType"
        },
        "Engine": {
          "$ref": "#/definitions/name"
        },
        "EngineVersion": {
          "$ref": "#/definitions/name"
        },
        "LicenseModel": {
          "$ref": "#/definitions/name"
        },
        "MasterUsername": {
          "$ref": "#/definitions/name"
        },
        "PercentProgress": {
          "$ref": "#/definitions/name"
        },
        "IAMDatabaseAuthenticationEnabled": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "KmsKeyId": {
          "$ref": "#/definitions/kmsKeyId"
        },
        "Port": {
          "$ref": "#/definitions/port"
        },
        "Status": {
          "$ref": "#/definitions/dbClusterSnapshotStatus"
        },
        "StorageEncrypted": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dbClusterSnapshotArn"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/dbClusterSnapshotIdentifier"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "turbot": {
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:cluster-snapshot:test01"
              ],
              "tags": {
                "key01": "value01"
              },
              "title": "turbot-rds-test-1-1-2018-08-28-22-17",
              "custom": {
                "aws": {
                  "accountId": 111666065714,
                  "regionName": "ap-south-1"
                }
              }
            },
            "AllocatedStorage": 0,
            "AvailabilityZones": [
              "ap-south-1a",
              "ap-south-1b"
            ],
            "ClusterCreateTime": "2018-08-28T08:28:10.516Z",
            "SnapshotCreateTime": "2018-08-28T22:17:23.097Z",
            "DBClusterIdentifier": "turbot-rds-test-1-1",
            "DBClusterSnapshotArn": "arn:aws:rds:ap-south-1:111666065714:cluster-snapshot:test01",
            "DBClusterSnapshotIdentifier": "test01",
            "SnapshotType": "automated",
            "Engine": "aurora",
            "EngineVersion": "5.6.10a",
            "LicenseModel": "aurora",
            "MasterUsername": "turbot",
            "PercentProgress": "100%",
            "IAMDatabaseAuthenticationEnabled": false,
            "KmsKeyId": "abcdcd",
            "Port": 1,
            "Status": "available",
            "StorageEncrypted": false,
            "VpcId": "vpc-dfafe5b7",
            "Tags": [
              {
                "Key": "key01",
                "Value": "value01"
              }
            ]
          }
        }
      ]
    },
    "dbClusterSnapshotIdentifier": {
      "type": "string",
      "pattern": "^(rds:[a-z][-a-z0-9]*)|(^[a-z][-a-z0-9]*)$",
      "tests": [
        {
          "input": "test01"
        },
        {
          "input": "rds:turbo-2018-08-28-22-17"
        },
        {
          "description": "null value",
          "input": null,
          "expected": false
        },
        {
          "description": "empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - can not end with underscore",
          "input": "a0123-_",
          "expected": false
        },
        {
          "description": "invalid - cannot start with a number",
          "input": "0123-asd",
          "expected": false
        }
      ]
    },
    "dbClusterSnapshotArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:cluster-snapshot:[-a-zA-Z.0-9]*?",
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:cluster-snapshot:rds:turbot-rds-test-1-1-2018-08-28-22-17"
        },
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:cluster-snapshot:rds:turbot-2018-08-28-22-17"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11166606571:cluster-snapshot:rds:turbot-rds-test-1-1-2018-08-28-22-17",
          "expected": false
        }
      ]
    },
    "dbClusterSnapshotStatus": {
      "type": "string",
      "enum": [
        "available",
        "backing-up",
        "backtracking",
        "cloning-failed",
        "creating",
        "deleting",
        "failing-over",
        "inaccessible-encryption-credentials",
        "maintenance",
        "migrating",
        "migration-failed",
        "modifying",
        "promoting",
        "renaming",
        "resetting-master-credentials",
        "starting",
        "stopped",
        "stopping",
        "update-iam-db-auth",
        "copying",
        "upgrading"
      ],
      "tests": [
        {
          "input": "available"
        },
        {
          "input": "backtracking"
        },
        {
          "description": "invalid - not listed in options",
          "input": "reactive",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        },
        {
          "description": "invalid - status in upper case",
          "input": "ACTIVE",
          "expected": false
        }
      ]
    },
    "dbInstance": {
      "type": "object",
      "properties": {
        "AllocatedStorage": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "Arn": {
          "$ref": "#/definitions/outpostArn"
        },
        "AssociatedRoles": {
          "type": "array"
        },
        "AutoMinorVersionUpgrade": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "AvailabilityZones": {
          "$ref": "#/definitions/availabilityZones"
        },
        "BackupRetentionPeriod": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "CACertificateIdentifier": {
          "$ref": "#/definitions/name"
        },
        "CharacterSetName": {
          "$ref": "#/definitions/name"
        },
        "CopyTagsToSnapshot": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "DBClusterIdentifier": {
          "$ref": "#/definitions/dbClusterIdentifier"
        },
        "DBInstanceArn": {
          "$ref": "#/definitions/dbInstanceArn"
        },
        "DBInstanceClass": {
          "$ref": "#/definitions/dbInstanceClass"
        },
        "DBInstanceIdentifier": {
          "$ref": "#/definitions/dbClusterIdentifier"
        },
        "DbInstancePort": {
          "$ref": "#/definitions/port"
        },
        "DBInstanceStatus": {
          "$ref": "#/definitions/dbInstanceStatus"
        },
        "DbiResourceId": {
          "$ref": "#/definitions/dbiResourceId"
        },
        "DBName": {
          "$ref": "#/definitions/name"
        },
        "DBSecurityGroups": {
          "$ref": "#/definitions/dbSecurityGroups"
        },
        "DBSubnetGroup": {
          "$ref": "#/definitions/dbSubnetGroup"
        },
        "Subnets": {
          "$ref": "#/definitions/dbSubnets"
        },
        "SubnetOutpost": {
          "$ref": "#/definitions/dbSubnetOutposts"
        },
        "DeletionProtection": {
          "type": "boolean"
        },
        "DBParameterGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dbParameterGroup"
          }
        },
        "DomainMemberships": {
          "$ref": "#/definitions/domainMemberships"
        },
        "EnabledCloudwatchLogsExports": {
          "$ref": "#/definitions/values"
        },
        "Endpoint": {
          "$ref": "#/definitions/endpoint"
        },
        "Engine": {
          "$ref": "#/definitions/name"
        },
        "EngineVersion": {
          "$ref": "#/definitions/name"
        },
        "EnhancedMonitoringResourceArn": {
          "type": "string"
        },
        "IAMDatabaseAuthenticationEnabled": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "InstanceCreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Iops": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "KmsKeyId": {
          "$ref": "#/definitions/kmsKeyId"
        },
        "LatestRestorableTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "LicenseModel": {
          "$ref": "#/definitions/licenseModel"
        },
        "ListenerEndpoint": {
          "type": "object"
        },
        "MasterUsername": {
          "$ref": "#/definitions/name"
        },
        "MaxAllocatedStorage": {
          "type": "number"
        },
        "MonitoringInterval": {
          "type": "integer"
        },
        "MonitoringRoleArn": {
          "type": "string"
        },
        "MultiAZ": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "OptionGroupMemberships": {
          "$ref": "#/definitions/optionGroupMemberships"
        },
        "PendingModifiedValues": {
          "$ref": "#/definitions/pendingModifiedValues"
        },
        "PerformanceInsightsEnabled": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "PerformanceInsightsRetentionPeriod": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "PreferredBackupWindow": {
          "$ref": "#/definitions/preferredBackupWindow"
        },
        "PreferredMaintenanceWindow": {
          "$ref": "#/definitions/preferredMaintenanceWindow"
        },
        "ProcessorFeatures": {
          "$ref": "#/definitions/processorFeatures"
        },
        "PromotionTier": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "PubliclyAccessible": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "ReadReplicaDBClusterIdentifiers": {
          "$ref": "#/definitions/values"
        },
        "ReadReplicaDBInstanceIdentifiers": {
          "$ref": "#/definitions/values"
        },
        "ReadReplicaSourceDBInstanceIdentifier": {
          "$ref": "#/definitions/name"
        },
        "SecondaryAvailabilityZone": {
          "$ref": "#/definitions/availabilityZones"
        },
        "StatusInfos": {
          "$ref": "#/definitions/statusInfos"
        },
        "StorageEncrypted": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "StorageType": {
          "$ref": "#/definitions/name"
        },
        "Timezone": {
          "$ref": "#/definitions/name"
        },
        "VpcSecurityGroups": {
          "$ref": "#/definitions/vpcSecurityGroupMembership"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dbInstanceArn"
              }
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/dbClusterIdentifier"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "turbot": {
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:db:turbot-rds-test-1-1"
              ],
              "tags": {
                "Env": "Test",
                "App": "turbot"
              },
              "title": "turbot-rds-test-1-1",
              "custom": {
                "aws": {
                  "accountId": 111666065714,
                  "regionName": "ap-south-1"
                }
              }
            },
            "AllocatedStorage": 0,
            "AutoMinorVersionUpgrade": true,
            "AvailabilityZones": [
              "ap-south-1a",
              "ap-south-1b"
            ],
            "BackupRetentionPeriod": 12,
            "CACertificateIdentifier": "rds-ca-2015",
            "CharacterSetName": "mysql",
            "CopyTagsToSnapshot": true,
            "DBClusterIdentifier": "turbot-rds-test-1-1",
            "DBInstanceArn": "arn:aws:rds:ap-south-1:111666065714:db:rohit-12",
            "DBInstanceClass": "db.t2.small",
            "DBInstanceIdentifier": "rohit-12",
            "DbInstancePort": 1,
            "DBInstanceStatus": "available",
            "DbiResourceId": "db-NRSFKNFJACOEGQAJFEBPGQX2PY",
            "DBName": "rds_1",
            "DBParameterGroups": [
              {
                "DBParameterGroupName": "postgres10",
                "ParameterApplyStatus": "in-sync"
              }
            ],
            "DBSecurityGroups": [
              {
                "DBSecurityGroupName": "default.aurora5.6",
                "Status": "available"
              }
            ],
            "DBSubnetGroup": {
              "DBSubnetGroupArn": "arn:aws:rds:ap-south-1:111666065714:subgrp:default",
              "DBSubnetGroupDescription": "default",
              "DBSubnetGroupName": "default",
              "SubnetGroupStatus": "Complete",
              "VpcId": "vpc-dfafe5b7",
              "Subnets": [
                {
                  "SubnetIdentifier": "subnet-570da01b",
                  "SubnetStatus": "Active",
                  "SubnetAvailabilityZone": {
                    "name": "ap-south-1b"
                  }
                }
              ]
            },
            "DomainMemberships": [
              {
                "Domain": "turbot.com",
                "FQDN": "www.turbot.com",
                "IAMRoleName": "turbot-test",
                "Status": "joined"
              }
            ],
            "EnabledCloudwatchLogsExports": [
              "Adding",
              "RDS"
            ],
            "Endpoint": {
              "Address": "rohit-12.cpgmswtt1cws.ap-south-1.rds.amazonaws.com",
              "HostedZoneId": "Z2VFMSZA74J7XZ",
              "Port": 3306
            },
            "Engine": "aurora",
            "EngineVersion": "5.6.10a",
            "IAMDatabaseAuthenticationEnabled": false,
            "Iops": 12,
            "InstanceCreateTime": "2018-08-28T08:35:28.626Z",
            "KmsKeyId": "abcdcd",
            "LatestRestorableTime": "2018-08-28T08:35:28.626Z",
            "LicenseModel": "general-public-license",
            "MasterUsername": "turbot",
            "MultiAZ": false,
            "OptionGroupMemberships": [
              {
                "OptionGroupName": "default:aurora-5-6",
                "Status": "in-sync"
              }
            ],
            "PendingModifiedValues": {
              "AllocatedStorage": 0,
              "BackupRetentionPeriod": 12,
              "CACertificateIdentifier": "wqerqwttert",
              "DBInstanceClass": "db.t2.small",
              "DBInstanceIdentifier": "turbot-exmple",
              "DBSubnetGroupName": "turbot-sgn",
              "EngineVersion": "5.6.10a",
              "Iops": 12,
              "MasterUserPassword": "!@#234#53454",
              "LicenseModel": "general-public-license",
              "MultiAZ": false,
              "Port": 3306,
              "PendingCloudwatchLogsExports": {
                "LogTypesToDisable": [
                  "urpis animi un",
                  "que ratione, dignis"
                ],
                "LogTypesToEnable": [
                  "werwer",
                  "trrutrtu"
                ]
              },
              "ProcessorFeatures": [
                {
                  "Name": "urpis animi unque ratione, dignis",
                  "Value": "werwer trrutrtu"
                }
              ],
              "StorageType": "aurora"
            },
            "PerformanceInsightsEnabled": true,
            "PerformanceInsightsRetentionPeriod": 14,
            "PreferredBackupWindow": "12:12-12:12",
            "PreferredMaintenanceWindow": "thu:08:34-thu:09:04",
            "ProcessorFeatures": [
              {
                "Name": "urpis animi unque ratione, dignis",
                "Value": "werwer trrutrtu"
              }
            ],
            "PromotionTier": 12,
            "PubliclyAccessible": true,
            "ReadReplicaDBClusterIdentifiers": [
              "turibt",
              "example"
            ],
            "ReadReplicaDBInstanceIdentifiers": [
              "exaple",
              "test"
            ],
            "ReadReplicaSourceDBInstanceIdentifier": "turbot-test",
            "SecondaryAvailabilityZone": [
              "ap-south-1a",
              "ap-south-1b"
            ],
            "StatusInfos": [
              {
                "Name": "urpis animi unque ratione, dignis",
                "Value": "werwer trrutrtu"
              }
            ],
            "StorageEncrypted": true,
            "StorageType": "aurora",
            "Timezone": "UTC−03",
            "VpcSecurityGroups": {
              "Status": "ACTIVE",
              "VpcSecurityGroupId": "sg-d9b64db3"
            },
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ]
          }
        }
      ]
    },
    "dbInstanceClass": {
      "type": "string",
      "enum": [
        "db.m5.24xlarge",
        "db.m5.16xlarge",
        "db.m5.12xlarge",
        "db.m5.8xlarge",
        "db.m5.4xlarge",
        "db.m5.2xlarge",
        "db.m5.xlarge",
        "db.m5.large",
        "db.m4.16xlarge",
        "db.m4.10xlarge",
        "db.m4.4xlarge",
        "db.m4.2xlarge",
        "db.m4.xlarge",
        "db.m4.large",
        "db.m3.2xlarge",
        "db.m3.xlarge",
        "db.m3.large",
        "db.m3.medium",
        "db.m1.xlarge",
        "db.m1.large",
        "db.m1.medium",
        "db.m1.small",
        "db.z1d.12xlarge",
        "db.z1d.6xlarge",
        "db.z1d.3xlarge",
        "db.z1d.2xlarge",
        "db.z1d.xlarge",
        "db.z1d.large",
        "db.x1e.32xlarge",
        "db.x1e.16xlarge",
        "db.x1e.8xlarge",
        "db.x1e.4xlarge",
        "db.x1e.2xlarge",
        "db.x1e.xlarge",
        "db.x1.32xlarge",
        "db.x1.16xlarge",
        "db.r5.24xlarge",
        "db.r5.16xlarge",
        "db.r5.12xlarge",
        "db.r5.8xlarge",
        "db.r5.4xlarge",
        "db.r5.2xlarge",
        "db.r5.xlarge",
        "db.r5.large",
        "db.r4.16xlarge",
        "db.r4.8xlarge",
        "db.r4.4xlarge",
        "db.r4.2xlarge",
        "db.r4.xlarge",
        "db.r4.large",
        "db.r3.8xlarge",
        "db.r3.4xlarge",
        "db.r3.2xlarge",
        "db.r3.xlarge",
        "db.r3.large",
        "db.m2.4xlarge",
        "db.m2.2xlarge",
        "db.m2.xlarge",
        "db.t3.2xlarge",
        "db.t3.xlarge",
        "db.t3.large",
        "db.t3.medium",
        "db.t3.small",
        "db.t3.micro",
        "db.t2.2xlarge",
        "db.t2.xlarge",
        "db.t2.large",
        "db.t2.medium",
        "db.t2.small",
        "db.t2.micro"
      ],
      "tests": [
        {
          "input": "db.t2.small"
        },
        {
          "input": "db.r3.8xlarge"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - value not from list",
          "input": "db.r3.9xlarge",
          "expected": false
        }
      ]
    },
    "dbiResourceId": {
      "type": "string",
      "pattern": "^db-[A-Z0-9]+$",
      "tests": [
        {
          "input": "db-NRSFKNFJACOEGQAJFEBPGQX2PY"
        },
        {
          "input": "db-NRSFKNFJACOEGQAJFRDSGQX2PY"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - cannot start with dot",
          "input": ".aaa",
          "expected": false
        },
        {
          "description": "invalid - cannot end with dot",
          "input": "aaa.",
          "expected": false
        },
        {
          "description": "invalid - percentile not allowed pattern",
          "input": "aaa%bbb",
          "expected": false
        },
        {
          "description": "invalid - number provided",
          "input": 123,
          "expected": false
        }
      ]
    },
    "dbInstanceIdentifier": {
      "type": "string",
      "pattern": "^subnet-[a-f0-9]{8}$",
      "tests": [
        {
          "input": "subnet-8760a01b"
        },
        {
          "input": "subnet-570da01b"
        },
        {
          "description": "invalid - can not end with underscore",
          "input": "a0123-_",
          "expected": false
        },
        {
          "description": "invalid - cannot start with a number",
          "input": "0123-asd",
          "expected": false
        }
      ]
    },
    "dbInstanceArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:db:[-a-zA-Z.0-9]*?",
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:db:turbot-rds-test-1-1-2018-08-28-22-17"
        },
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:db:rohit-12"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11166606571:db:rohit-12",
          "expected": false
        }
      ]
    },
    "optionGroupMemberships": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/optionGroupStatus"
      },
      "tests": [
        {
          "input": [
            {
              "DBClusterOptionGroupName": "foo",
              "Status": "removing"
            }
          ]
        }
      ]
    },
    "optionGroupStatus": {
      "type": "object",
      "properties": {
        "OptionGroupName": {
          "$ref": "#/definitions/name"
        },
        "Status": {
          "$ref": "#/definitions/optionGroupMembershipStatus"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "DBClusterOptionGroupName": "foo",
            "Status": "in-sync"
          }
        },
        {
          "description": "invalid - array passed instead of string",
          "input": {
            "DBClusterOptionGroupName": "foo",
            "Status": [
              "removing"
            ]
          },
          "expected": false
        }
      ]
    },
    "optionGroupMembershipStatus": {
      "type": "string",
      "enum": [
        "in-sync",
        "pending-apply",
        "pending-removal",
        "pending-maintenance-apply",
        "pending-maintenance-removal",
        "applying",
        "removing",
        "failed"
      ],
      "tests": [
        {
          "input": "in-sync"
        },
        {
          "input": "applying"
        },
        {
          "description": "invalid - case sensitive",
          "input": "IN-SYNC",
          "expected": false
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "endpoint": {
      "type": "object",
      "properties": {
        "Address": {
          "$ref": "#/definitions/address"
        },
        "HostedZoneId": {
          "$ref": "#/definitions/hostedZoneId"
        },
        "Port": {
          "$ref": "#/definitions/port"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "Address": "rohit-12.cpgmswtt1cws.ap-south-1.rds.amazonaws.com",
            "HostedZoneId": "Z2VFMSZA74J7XZ",
            "Port": 3306
          }
        }
      ]
    },
    "statusInfos": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/statusInfo"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "Name": "urpis animi unque ratione, dignis",
              "Value": "werwer trrutrtu"
            }
          ]
        }
      ]
    },
    "statusInfo": {
      "type": "object",
      "properties": {
        "Message": {
          "$ref": "#/definitions/name"
        },
        "Normal": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "Status": {
          "$ref": "#/definitions/dbStatus"
        },
        "StatusType": {
          "$ref": "#/definitions/statusType"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "Message": "urpis animi unque ratione, dignis",
            "Normal": false,
            "Status": "replicating",
            "StatusType": "read replication"
          }
        },
        {
          "description": "invalid - wrong details provided",
          "input": {
            "Message": "urpis animi unque ratione, dignis",
            "Normal": false,
            "Status": "replicating",
            "StatusType": [
              "read replication"
            ]
          },
          "expected": false
        }
      ]
    },
    "dbStatus": {
      "type": "string",
      "enum": [
        "replicating",
        "replication stop point set",
        "replication stop point reached",
        "error",
        "stopped",
        "terminated"
      ],
      "tests": [
        {
          "input": "terminated"
        },
        {
          "input": "stopped"
        },
        {
          "description": "invalid - case sensitive",
          "input": "Terminated",
          "expected": false
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "statusType": {
      "type": "string",
      "enum": [
        "read replication"
      ],
      "tests": [
        {
          "input": "read replication"
        },
        {
          "description": "invalid - case sensitive",
          "input": "Read replication",
          "expected": false
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "pendingModifiedValues": {
      "type": "object",
      "properties": {
        "AllocatedStorage": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "BackupRetentionPeriod": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "CACertificateIdentifier": {
          "$ref": "#/definitions/name"
        },
        "DBInstanceClass": {
          "$ref": "#/definitions/dbInstanceClass"
        },
        "DBInstanceIdentifier": {
          "$ref": "#/definitions/dbClusterIdentifier"
        },
        "DBSubnetGroupName": {
          "$ref": "#/definitions/name"
        },
        "EngineVersion": {
          "$ref": "#/definitions/name"
        },
        "Iops": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "MasterUserPassword": {
          "$ref": "#/definitions/name"
        },
        "LicenseModel": {
          "$ref": "#/definitions/licenseModel"
        },
        "MultiAZ": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "Port": {
          "$ref": "#/definitions/port"
        },
        "PendingCloudwatchLogsExports": {
          "$ref": "#/definitions/pendingCloudwatchLogsExports"
        },
        "ProcessorFeatures": {
          "$ref": "#/definitions/processorFeatures"
        },
        "StorageType": {
          "$ref": "#/definitions/name"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "AllocatedStorage": 0,
            "BackupRetentionPeriod": 12,
            "CACertificateIdentifier": "wqerqwttert",
            "DBInstanceClass": "db.t2.small",
            "DBInstanceIdentifier": "turbot-exmple",
            "DBSubnetGroupName": "turbot-sgn",
            "EngineVersion": "5.6.10a",
            "Iops": 12,
            "MasterUserPassword": "!@#234#53454",
            "LicenseModel": "general-public-license",
            "MultiAZ": false,
            "Port": 3306,
            "PendingCloudwatchLogsExports": {
              "LogTypesToDisable": [
                "urpis animi un",
                "que ratione, dignis"
              ],
              "LogTypesToEnable": [
                "werwer",
                "trrutrtu"
              ]
            },
            "ProcessorFeatures": [
              {
                "Name": "urpis animi unque ratione, dignis",
                "Value": "werwer trrutrtu"
              }
            ],
            "StorageType": "aurora",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ]
          }
        }
      ]
    },
    "pendingCloudwatchLogsExports": {
      "type": "object",
      "properties": {
        "LogTypesToDisable": {
          "$ref": "#/definitions/values"
        },
        "LogTypesToEnable": {
          "$ref": "#/definitions/values"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "LogTypesToDisable": [
              "urpis animi un",
              "que ratione, dignis"
            ],
            "LogTypesToEnable": [
              "werwer",
              "trrutrtu"
            ]
          }
        },
        {
          "description": "invalid - wrong details provided",
          "input": {
            "LogTypesToDisable": "jkldgkld",
            "LogTypesToEnable": [
              "turubtu",
              "rotihti"
            ]
          },
          "expected": false
        }
      ]
    },
    "processorFeatures": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/processorFeature"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "Name": "urpis animi unque ratione, dignis",
              "Value": "werwer trrutrtu"
            }
          ]
        }
      ]
    },
    "processorFeature": {
      "type": "object",
      "properties": {
        "Name": {
          "$ref": "#/definitions/name"
        },
        "Value": {
          "$ref": "#/definitions/name"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "Name": "urpis animi unque ratione, dignis",
            "Value": "werwer trrutrtu"
          }
        },
        {
          "description": "invalid - wrong details provided",
          "input": {
            "Name": "jkldgkld",
            "Value": [
              "turubtu",
              "rotihti"
            ]
          },
          "expected": false
        }
      ]
    },
    "domainMemberships": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/domainMembership"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "Domain": "turbot.com",
              "FQDN": "www.turbot.com",
              "IAMRoleName": "turbot-test",
              "Status": "joined"
            }
          ]
        }
      ]
    },
    "domainMembership": {
      "type": "object",
      "properties": {
        "Domain": {
          "$ref": "#/definitions/name"
        },
        "FQDN": {
          "$ref": "#/definitions/name"
        },
        "IAMRoleName": {
          "$ref": "#/definitions/name"
        },
        "Status": {
          "$ref": "#/definitions/name"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "Domain": "turbot.com",
            "FQDN": "www.turbot.com",
            "IAMRoleName": "turbot-test",
            "Status": "joined"
          }
        },
        {
          "description": "invalid - wrong details provided",
          "input": {
            "Domain": "turbot.com",
            "FQDN": [
              "www.turbot.com"
            ],
            "IAMRoleName": "turbot-test",
            "Status": "joined"
          },
          "expected": false
        }
      ]
    },
    "dbSecurityGroups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dbSecurityGroup"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "DBSecurityGroupName": "default.aurora5.6",
              "Status": "available"
            }
          ]
        },
        {
          "description": "invalid - object passed instead of array",
          "input": {
            "DBSecurityGroupName": "default.aurora5.6",
            "Status": "available"
          },
          "expected": false
        }
      ]
    },
    "dbSecurityGroup": {
      "type": "object",
      "properties": {
        "DBSecurityGroupName": {
          "$ref": "#/definitions/name"
        },
        "Status": {
          "$ref": "#/definitions/name"
        }
      },
      "tests": [
        {
          "input": {
            "DBSecurityGroupName": "default.aurora5.6",
            "Status": "available"
          }
        }
      ]
    },
    "dbSubnetGroup": {
      "type": "object",
      "properties": {
        "DBSubnetGroupName": {
          "type": "string",
          "$ref": "#/definitions/name"
        },
        "SubnetGroupStatus": {
          "type": "string",
          "$ref": "#/definitions/name"
        },
        "Subnets": {
          "type": "array",
          "$ref": "#/definitions/dbSubnets"
        },
        "DBSubnetGroupArn": {
          "$ref": "#/definitions/dbSubnetGroupArn"
        },
        "DBSubnetGroupDescription": {
          "$ref": "#/definitions/name"
        },
        "VpcId": {
          "type": "string"
        },
        "Arn": {
          "$ref": "#/definitions/outpostArn"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dbSubnetGroupArn"
              }
            },
            "title": {
              "$ref": "#/definitions/name"
            },
            "custom": {
              "type": "object",
              "properties": {
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                },
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                }
              }
            }
          }
        }
      },
      "tests": [
        {
          "input": {
            "DBSubnetGroupName": "default",
            "SubnetGroupStatus": "Complete",
            "DBSubnetGroupArn": "arn:aws:rds:ap-south-1:111666065714:subgrp:default",
            "DBSubnetGroupDescription": "default",
            "VpcId": "vpc-dfafe5b7",
            "Subnets": [
              {
                "SubnetIdentifier": "subnet-570da01b",
                "SubnetStatus": "Active",
                "SubnetAvailabilityZone": {
                  "name": "ap-south-1b"
                }
              }
            ],
            "Tags": [
              {
                "Key": "key01",
                "Value": "value01"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:subgrp:default"
              ],
              "tagsMap": {
                "Key01": "Value01"
              },
              "title": "default",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          },
          "description": "all details provided"
        }
      ],
      "additionalProperties": true
    },
    "dbSubnets": {
      "type": "array",
      "items": {
        "SubnetIdentifier": {
          "type": "string"
        },
        "SubnetOutpost": {
          "$ref": "#/definitions/dbSubnetOutposts"
        }
      }
    },
    "dbSubnetOutposts": {
      "type": "object",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/outpostArn"
        }
      }
    },
    "outpostArn": {
      "type": "string"
    },
    "address": {
      "type": "string",
      "pattern": "[a-z][-a-z0-9]*.[a-z0-9]{12}.[a-z]{2}-[a-z]+-\\d{1}.rds.amazonaws.com",
      "tests": [
        {
          "input": "turbot-123.cpgmswtt1cws.ap-south-1.rds.amazonaws.com"
        },
        {
          "input": "rohit-12.cpgmswtt1cws.ap-south-1.rds.amazonaws.com"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11166665714:cluster:dbname",
          "expected": false
        }
      ]
    },
    "dbInstanceStatus": {
      "type": "string",
      "enum": [
        "available",
        "backing-up",
        "backtracking",
        "configuring-enhanced-monitoring",
        "converting-to-vpc",
        "creating",
        "deleting",
        "failed",
        "inaccessible-encryption-credentials",
        "configuring-iam-database-auth",
        "maintenance",
        "migrating",
        "moving-to-vpc",
        "configuring-log-exports",
        "modifying",
        "incompatible-parameters",
        "incompatible-restore",
        "incompatible-network",
        "incompatible-option-group",
        "renaming",
        "resetting-master-credentials",
        "rebooting",
        "restore-error",
        "starting",
        "stopped",
        "stopping",
        "storage-full",
        "storage-optimization",
        "upgrading"
      ],
      "tests": [
        {
          "input": "available"
        },
        {
          "input": "backtracking"
        },
        {
          "description": "invalid - not listed in options",
          "input": "reactive",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        },
        {
          "description": "invalid - status in upper case",
          "input": "ACTIVE",
          "expected": false
        }
      ]
    },
    "dbParameterGroupArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:pg:(((?!.*--)[a-z][a-z0-9-]{1,255})[a-z0-9])",
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:pg:aurora56-test01-1"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:1116660574:pg:aurora56-test01-1",
          "expected": false
        }
      ]
    },
    "dbParameterGroup": {
      "type": "object",
      "properties": {
        "DBParameterGroupArn": {
          "$ref": "#/definitions/dbParameterGroupArn"
        },
        "DBParameterGroupFamily": {
          "$ref": "#/definitions/name"
        },
        "DBParameterGroupName": {
          "$ref": "#/definitions/dbParameterGroupName"
        },
        "Description": {
          "$ref": "#/definitions/name"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dbParameterGroupArn"
              }
            },
            "title": {
              "$ref": "#/definitions/name"
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                },
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "DBParameterGroupArn": "arn:aws:rds:ap-south-1:111666065714:pg:default.aurora5.6",
            "DBParameterGroupFamily": "aurora5.6",
            "DBParameterGroupName": "default.aurora5.6",
            "Description": "Default parameter group for aurora5.6",
            "Tags": [
              {
                "Key": "key01",
                "Value": "value01"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:rds:us-east-1:123456789012:pg:aurora56-test01-1"
              ],
              "title": "default.aurora5.6",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              },
              "tagsMap": {
                "key01": "value01"
              }
            }
          }
        }
      ]
    },
    "dbParameterGroupName": {
      "type": "string",
      "pattern": "^[a-z A-Z 0-9.-/?]{1,255}$",
      "tests": [
        {
          "input": "default.aurora5.6"
        },
        {
          "input": "default.test9.0"
        },
        {
          "description": "invalid - must be in lowercase",
          "input": "test-me-Please",
          "expected": false
        }
      ]
    },
    "dbSnapshotManual": {
      "type": "object",
      "properties": {
        "AllocatedStorage": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "AvailabilityZone": {
          "$ref": "#/definitions/availabilityZones"
        },
        "DBInstanceIdentifier": {
          "$ref": "#/definitions/dbClusterIdentifier"
        },
        "DBSnapshotArn": {
          "$ref": "#/definitions/dbSnapshotArn"
        },
        "DBSnapshotIdentifier": {
          "$ref": "#/definitions/dbClusterSnapshotIdentifier"
        },
        "Encrypted": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "Engine": {
          "$ref": "#/definitions/name"
        },
        "EngineVersion": {
          "$ref": "#/definitions/name"
        },
        "IAMDatabaseAuthenticationEnabled": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "InstanceCreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "Iops": {
          "$ref": "#/definitions/allocatedStorage"
        },
        "KmsKeyId": {
          "$ref": "#/definitions/kmsKeyId"
        },
        "LicenseModel": {
          "$ref": "#/definitions/licenseModel"
        },
        "MasterUsername": {
          "$ref": "#/definitions/name"
        },
        "OptionGroupName": {
          "$ref": "#/definitions/name"
        },
        "PercentProgress": {
          "$ref": "#/definitions/name"
        },
        "Port": {
          "$ref": "#/definitions/port"
        },
        "ProcessorFeatures": {
          "$ref": "#/definitions/processorFeatures"
        },
        "SnapshotCreateTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "SnapshotType": {
          "$ref": "#/definitions/snapshotType"
        },
        "SourceDBSnapshotIdentifier": {
          "$ref": "#/definitions/sourceDBClusterSnapshotArn"
        },
        "SourceRegion": {
          "$ref": "aws#/definitions/regionName"
        },
        "Status": {
          "$ref": "#/definitions/dbSnapshotStatus"
        },
        "StorageType": {
          "$ref": "#/definitions/name"
        },
        "TdeCredentialArn": {
          "$ref": "#/definitions/name"
        },
        "Timezone": {
          "$ref": "#/definitions/name"
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "DbiResourceId": {
          "type": "string"
        },
        "Marker": {
          "type": "string"
        },
        "DBSnapshotAttributes": {
          "type": "array"
        },
        "DBSnapshotAttributesMap": {
          "type": "object"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dbSnapshotArn"
              }
            },
            "tags": {
              "$ref": "#/definitions/tagsMap"
            },
            "title": {
              "$ref": "#/definitions/dbClusterIdentifier"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "AllocatedStorage": 0,
            "AvailabilityZones": [
              "ap-south-1a\"",
              "ap-south-1b"
            ],
            "DBInstanceIdentifier": "rohit-turbot-mysql-test-1",
            "DBSnapshotArn": "arn:aws:rds:ap-south-1:111666065714:snapshot:rds:turbot-rds-test-1-1-2018-08-28-22-17",
            "DBSnapshotIdentifier": "rds:turbot-rds-test-1-1-2018-08-28-22-17",
            "Encrypted": false,
            "Engine": "aurora",
            "EngineVersion": "5.6.10a",
            "IAMDatabaseAuthenticationEnabled": false,
            "InstanceCreateTime": "2018-08-28T08:28:10.516Z",
            "Iops": 12,
            "KmsKeyId": "abcdcd",
            "LicenseModel": "general-public-license",
            "MasterUsername": "turbot",
            "OptionGroupName": "default:mysql-5-7",
            "PercentProgress": "100%",
            "Port": 1,
            "ProcessorFeatures": [
              {
                "Name": "urpis animi unque ratione, dignis",
                "Value": "werwer trrutrtu"
              }
            ],
            "SnapshotCreateTime": "2018-08-28T22:17:23.097Z",
            "SnapshotType": "automated",
            "SourceDBSnapshotIdentifier": null,
            "SourceRegion": "ap-south-1",
            "Status": "available",
            "StorageType": "gp2",
            "TdeCredentialArn": "sweofotdgorsodscoaqweowe123243531fdgt",
            "Timezone": "UTC+3:0",
            "VpcId": "vpc-dfafe5b7",
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:snapshot:rds:turbot-rds-test-1-1-2018-08-28-22-17"
              ],
              "tagsMap": {
                "testKey": "testValue"
              },
              "title": "rohit-turbot-mysql-test-1",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "dbSnapshotArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:snapshot:[-a-zA-Z.0-9]*?",
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:snapshot:rds:turbot-rds-test-1-1-2018-08-28-22-17"
        },
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:snapshot:rds:rohit-turbot-mysql-test-1-2018-08-31-09-19"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11166606571:snapshot:rds:rohit-turbot-mysql-test-1-2018-08-31-09-19",
          "expected": false
        }
      ]
    },
    "dbSnapshotStatus": {
      "type": "string",
      "enum": [
        "available",
        "backing-up",
        "backtracking",
        "creating",
        "deleting",
        "failed",
        "inaccessible-encryption-credentials",
        "configuring-iam-database-auth",
        "maintenance",
        "migrating",
        "moving-to-vpc",
        "configuring-log-exports",
        "modifying",
        "incompatible-parameters",
        "incompatible-restore",
        "incompatible-network",
        "incompatible-option-group",
        "renaming",
        "resetting-master-credentials",
        "rebooting",
        "restore-error",
        "starting",
        "stopped",
        "stopping",
        "storage-full",
        "upgrading"
      ],
      "tests": [
        {
          "input": "upgrading"
        },
        {
          "input": "stopped"
        },
        {
          "description": "invalid - not listed in options",
          "input": "reactive",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        },
        {
          "description": "invalid - status in upper case",
          "input": "ACTIVE",
          "expected": false
        }
      ]
    },
    "rdsOptionGroup": {
      "type": "object",
      "properties": {
        "OptionGroupName": {
          "$ref": "#/definitions/name"
        },
        "Filters": {
          "$ref": "#/definitions/filters"
        },
        "Marker": {
          "$ref": "#/definitions/name"
        },
        "MaxRecords": {
          "$ref": "#/definitions/maxRecords"
        },
        "EngineName": {
          "$ref": "#/definitions/name"
        },
        "MajorEngineVersion": {
          "$ref": "#/definitions/name"
        },
        "OptionGroupDescription": {
          "$ref": "#/definitions/name"
        },
        "OptionGroupsList": {
          "$ref": "#/definitions/optionGroupsList"
        },
        "Tags": {
          "$ref": "#/definitions/tagList"
        },
        "AllowsVpcAndNonVpcInstanceMemberships": {
          "type": "boolean"
        },
        "VpcId": {
          "type": "string"
        },
        "Options": {
          "type": "array"
        },
        "OptionGroupArn": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/optionGroupArn"
              }
            },
            "title": {
              "$ref": "#/definitions/name"
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "OptionGroupName": "default:aurora-5-6",
            "OptionGroupDescription": "optiongroup for test",
            "Filters": [
              "aaa",
              [
                "123456789012"
              ],
              [
                "1234656sdfsdfs"
              ]
            ],
            "Marker": "default.aurora5.6",
            "MaxRecords": 53,
            "EngineName": "aurora",
            "MajorEngineVersion": 5.6,
            "Tags": [
              {
                "Key": "key01",
                "Value": "value01"
              }
            ],
            "OptionGroupsList": [
              {
                "AllowsVpcAndNonVpcInstanceMemberships": true,
                "EngineName": "aurora",
                "MajorEngineVersion": 5.6,
                "OptionGroupArn": "arn:aws:rds:ap-south-1:111666065714:og:default:aurora-5-6",
                "OptionGroupDescription": "Default option group for aurora 5.6",
                "OptionGroupName": "default:aurora-5-6",
                "VpcId": "vpc-dfafe5b7",
                "Options": [
                  {
                    "DBSecurityGroupMemberships": {
                      "DBSecurityGroupName": "default.aurora5.6",
                      "Status": "available"
                    },
                    "OptionDescription": "Default option group for aurora 5.6",
                    "OptionName": "default:aurora-5-6",
                    "OptionSettings": [
                      {
                        "AllowedValues": "all",
                        "ApplyType": "new",
                        "DataType": "string",
                        "DefaultValue": "turbot-example",
                        "Description": "Default option group for aurora 5.6",
                        "IsCollection": true,
                        "IsModifiable": true,
                        "Name": "turbot-example",
                        "Value": "all"
                      }
                    ],
                    "OptionVersion": "au",
                    "Permanent": false,
                    "Persistent": false,
                    "Port": 1,
                    "VpcSecurityGroupMemberships": [
                      {
                        "Status": "ACTIVE",
                        "VpcSecurityGroupId": "sg-d9b64db3"
                      }
                    ]
                  }
                ]
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:og:default:aurora-5-6"
              ],
              "tags": {
                "Key01": "Value 01"
              },
              "title": "default:aurora-5-6",
              "custom": {
                "aws": {
                  "accountId": 111666065714,
                  "regionName": "ap-south-1"
                }
              }
            }
          }
        }
      ]
    },
    "optionGroupsList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/optionGroup"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "AllowsVpcAndNonVpcInstanceMemberships": true,
              "EngineName": "aurora",
              "MajorEngineVersion": 5.6,
              "OptionGroupArn": "arn:aws:rds:ap-south-1:111666065714:og:default:aurora-5-6",
              "OptionGroupDescription": "Default option group for aurora 5.6",
              "OptionGroupName": "default:aurora-5-6",
              "VpcId": "vpc-dfafe5b7",
              "Options": [
                {
                  "DBSecurityGroupMemberships": {
                    "DBSecurityGroupName": "default.aurora5.6",
                    "Status": "available"
                  },
                  "OptionDescription": "Default option group for aurora 5.6",
                  "OptionName": "default:aurora-5-6",
                  "OptionSettings": [
                    {
                      "AllowedValues": "all",
                      "ApplyType": "new",
                      "DataType": "string",
                      "DefaultValue": "turbot-example",
                      "Description": "Default option group for aurora 5.6",
                      "IsCollection": true,
                      "IsModifiable": true,
                      "Name": "turbot-example",
                      "Value": "all"
                    }
                  ],
                  "OptionVersion": "au",
                  "Permanent": false,
                  "Persistent": false,
                  "Port": 1,
                  "VpcSecurityGroupMemberships": [
                    {
                      "Status": "ACTIVE",
                      "VpcSecurityGroupId": "sg-d9b64db3"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "optionGroup": {
      "type": "object",
      "properties": {
        "AllowsVpcAndNonVpcInstanceMemberships": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "EngineName": {
          "$ref": "#/definitions/name"
        },
        "MajorEngineVersion": {
          "$ref": "#/definitions/name"
        },
        "OptionGroupArn": {
          "$ref": "#/definitions/optionGroupArn"
        },
        "OptionGroupDescription": {
          "$ref": "#/definitions/name"
        },
        "OptionGroupName": {
          "$ref": "#/definitions/name"
        },
        "VpcId": {
          "$ref": "#/definitions/vpcId"
        },
        "Options": {
          "$ref": "#/definitions/options"
        }
      },
      "tests": [
        {
          "description": "all values provided",
          "input": {
            "AllowsVpcAndNonVpcInstanceMemberships": true,
            "EngineName": "aurora",
            "MajorEngineVersion": 5.6,
            "OptionGroupArn": "arn:aws:rds:ap-south-1:111666065714:og:default:aurora-5-6",
            "OptionGroupDescription": "Default option group for aurora 5.6",
            "OptionGroupName": "default:aurora-5-6",
            "VpcId": "vpc-dfafe5b7",
            "Options": [
              {
                "DBSecurityGroupMemberships": {
                  "DBSecurityGroupName": "default.aurora5.6",
                  "Status": "available"
                },
                "OptionDescription": "Default option group for aurora 5.6",
                "OptionName": "default:aurora-5-6",
                "OptionSettings": [
                  {
                    "AllowedValues": "all",
                    "ApplyType": "new",
                    "DataType": "string",
                    "DefaultValue": "turbot-example",
                    "Description": "Default option group for aurora 5.6",
                    "IsCollection": true,
                    "IsModifiable": true,
                    "Name": "turbot-example",
                    "Value": "all"
                  }
                ],
                "OptionVersion": "au",
                "Permanent": false,
                "Persistent": false,
                "Port": 1,
                "VpcSecurityGroupMemberships": [
                  {
                    "Status": "ACTIVE",
                    "VpcSecurityGroupId": "sg-d9b64db3"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    "options": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/option"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "DBSecurityGroupMemberships": {
                "DBSecurityGroupName": "default.aurora5.6",
                "Status": "available"
              },
              "OptionDescription": "Default option group for aurora 5.6",
              "OptionName": "default:aurora-5-6",
              "OptionSettings": [
                {
                  "AllowedValues": "all",
                  "ApplyType": "new",
                  "DataType": "string",
                  "DefaultValue": "turbot-example",
                  "Description": "Default option group for aurora 5.6",
                  "IsCollection": true,
                  "IsModifiable": true,
                  "Name": "turbot-example",
                  "Value": "all"
                }
              ],
              "OptionVersion": "au",
              "Permanent": false,
              "Persistent": false,
              "Port": 1,
              "VpcSecurityGroupMemberships": [
                {
                  "Status": "ACTIVE",
                  "VpcSecurityGroupId": "sg-d9b64db3"
                }
              ]
            }
          ]
        }
      ]
    },
    "option": {
      "type": "object",
      "properties": {
        "DBSecurityGroupMemberships": {
          "$ref": "#/definitions/dbSecurityGroup"
        },
        "OptionDescription": {
          "$ref": "#/definitions/name"
        },
        "OptionName": {
          "$ref": "#/definitions/name"
        },
        "OptionSettings": {
          "$ref": "#/definitions/optionSettings"
        },
        "OptionVersion": {
          "$ref": "#/definitions/name"
        },
        "Permanent": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "Persistent": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "Port": {
          "$ref": "#/definitions/port"
        },
        "VpcSecurityGroupMemberships": {
          "$ref": "#/definitions/vpcSecurityGroupMemberships"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "DBSecurityGroupMemberships": {
              "DBSecurityGroupName": "default.aurora5.6,",
              "Status": "available"
            },
            "OptionDescription": "Default option group for aurora 5.6",
            "OptionName": "default:aurora-5-6",
            "OptionSettings": [
              {
                "AllowedValues": "all",
                "ApplyType": "new",
                "DataType": "string",
                "DefaultValue": "turbot-example",
                "Description": "Default option group for aurora 5.6",
                "IsCollection": true,
                "IsModifiable": true,
                "Name": "turbot-example",
                "Value": "all"
              }
            ],
            "OptionVersion": "au",
            "Permanent": false,
            "Persistent": false,
            "Port": 1,
            "VpcSecurityGroupMemberships": [
              {
                "Status": "ACTIVE",
                "VpcSecurityGroupId": "sg-d9b64db3"
              }
            ]
          }
        }
      ]
    },
    "vpcSecurityGroupMemberships": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/vpcSecurityGroupMembership"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "Status": "ACTIVE",
              "VpcSecurityGroupId": "sg-d9b64db3"
            }
          ]
        }
      ]
    },
    "optionSettings": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/optionSetting"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "AllowedValues": "all",
              "ApplyType": "new",
              "DataType": "string",
              "DefaultValue": "turbot-example",
              "Description": "Default option group for aurora 5.6",
              "IsCollection": true,
              "IsModifiable": true,
              "Name": "turbot-example",
              "Value": "all"
            }
          ]
        }
      ]
    },
    "optionSetting": {
      "type": "object",
      "properties": {
        "AllowedValues": {
          "$ref": "#/definitions/name"
        },
        "ApplyType": {
          "$ref": "#/definitions/name"
        },
        "DataType": {
          "$ref": "#/definitions/name"
        },
        "DefaultValue": {
          "$ref": "#/definitions/name"
        },
        "Description": {
          "$ref": "#/definitions/name"
        },
        "IsCollection": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "IsModifiable": {
          "$ref": "#/definitions/isClusterWriter"
        },
        "Name": {
          "$ref": "#/definitions/name"
        },
        "Value": {
          "$ref": "#/definitions/name"
        }
      },
      "tests": [
        {
          "description": "all values provided",
          "input": {
            "AllowedValues": "all",
            "ApplyType": "new",
            "DataType": "string",
            "DefaultValue": "turbot-example",
            "Description": "Default option group for aurora 5.6",
            "IsCollection": true,
            "IsModifiable": true,
            "Name": "turbot-example",
            "Value": "all"
          }
        }
      ]
    },
    "optionGroupArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:og:[-a-z:A-Z0-9]*?",
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:og:default:aurora-5-6"
        },
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:og:default:mysql-5-6"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11666065714:og:default:aurora-5-6",
          "expected": false
        }
      ]
    },
    "rds": {
      "allOf": [
        {
          "$ref": "turbot#/definitions/service"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "const": "RDS"
            },
            "turbot": {
              "type": "object",
              "properties": {
                "akas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/rdsAka"
                  }
                },
                "title": {
                  "const": "RDS"
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "aws": {
                      "$ref": "aws#/definitions/awsMetadata"
                    }
                  }
                }
              }
            }
          },
          "required": [
            "name",
            "turbot"
          ],
          "additionalProperties": true,
          "tests": [
            {
              "description": "All data are valid",
              "input": {
                "name": "RDS",
                "turbot": {
                  "akas": [
                    "arn:aws:rds:us-east-1:123456789012"
                  ],
                  "title": "RDS",
                  "custom": {
                    "aws": {
                      "accountId": 123456789012,
                      "regionName": "us-east-1"
                    }
                  }
                }
              }
            },
            {
              "description": "invalid - service name prefixed",
              "input": {
                "title": "AWS RDS"
              },
              "expected": false
            }
          ]
        }
      ]
    },
    "filters": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/name"
        },
        {
          "$ref": "#/definitions/values"
        }
      ],
      "tests": [
        {
          "input": [
            "aaa",
            [
              "123456789012"
            ],
            [
              "1234656sdfsdfs"
            ]
          ]
        },
        {
          "input": [
            "aaa",
            [
              "123456789012"
            ],
            [
              "12376782634"
            ]
          ]
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - string passed in values",
          "input": [
            "aab",
            "12345678912"
          ],
          "expected": false
        }
      ]
    },
    "values": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "tests": [
        {
          "input": [
            "570da01b",
            "570da01b"
          ]
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "name": {
      "type": "string",
      "tests": [
        {
          "input": "foo"
        },
        {
          "input": "00123"
        },
        {
          "input": "abcde"
        },
        {
          "input": "2017-03-15T01:36:41.958Z"
        },
        {
          "input": "Test.The-Kitchen_Sink"
        },
        {
          "description": "invalid - array passed",
          "input": [
            500
          ],
          "expected": false
        }
      ]
    },
    "maxRecords": {
      "type": "integer",
      "minimum": 20,
      "maximum": 100,
      "default": 100,
      "tests": [
        {
          "input": 50
        },
        {
          "description": "min value",
          "input": 20
        },
        {
          "description": "max value",
          "input": 100
        },
        {
          "description": "invalid - string type provided",
          "input": "Hello",
          "expected": false
        },
        {
          "description": "invalid - less than min value",
          "input": 10,
          "expected": false
        },
        {
          "description": "invalid - greater than max value",
          "input": 11111111111,
          "expected": false
        }
      ]
    },
    "allocatedStorage": {
      "type": "integer",
      "tests": [
        {
          "input": 12345
        },
        {
          "description": "null value",
          "input": null
        },
        {
          "description": "invalid - string type provided",
          "input": "Hello",
          "expected": false
        }
      ]
    },
    "associatedRoles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dbClusterRole"
      },
      "tests": [
        {
          "input": [
            {
              "FeatureName": "foo",
              "RoleArn": "arn:aws:iam::111666065714:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
              "Status": "PENDING"
            }
          ]
        }
      ]
    },
    "status": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "PENDING",
        "INVALID"
      ],
      "tests": [
        {
          "input": "INVALID"
        },
        {
          "input": "PENDING"
        },
        {
          "description": "invalid - not listed in options",
          "input": "reactive",
          "expected": false
        },
        {
          "description": "invalid - null value",
          "input": null,
          "expected": false
        },
        {
          "description": "invalid - status in lower case",
          "input": "active",
          "expected": false
        }
      ]
    },
    "availabilityZones": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "tests": [
        {
          "input": [
            "ap-south-1a",
            "ap-south-1b"
          ]
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "dbClusterRole": {
      "type": "object",
      "properties": {
        "FeatureName": {
          "$ref": "#/definitions/name"
        },
        "RoleArn": {
          "$ref": "#/definitions/roleArn"
        },
        "Status": {
          "$ref": "#/definitions/status"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "FeatureName": "foo",
            "RoleArn": "arn:aws:iam::111666065714:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
            "Status": "PENDING"
          }
        },
        {
          "description": "invalid - status is in lowercase",
          "input": {
            "FeatureName": "foo",
            "RoleArn": "arn:aws:iam::111666065714:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
            "Status": "pending"
          },
          "expected": false
        }
      ]
    },
    "roleArn": {
      "type": "string",
      "pattern": "arn:aws:iam::\\d{12}:role/aws-service-role/rds.amazonaws.com/[a-zA-Z]*?",
      "tests": [
        {
          "input": "arn:aws:iam::111666065714:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
        },
        {
          "input": "arn:aws:iam::111666065714:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS12"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:iam::1116660657:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
          "expected": false
        }
      ]
    },
    "isClusterWriter": {
      "type": "boolean",
      "tests": [
        {
          "input": true
        },
        {
          "input": false
        },
        {
          "input": 0
        },
        {
          "input": 1
        },
        {
          "description": "null value",
          "input": null
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - array type",
          "input": [
            true,
            false
          ],
          "expected": false
        }
      ]
    },
    "hostedZoneId": {
      "type": "string",
      "maxLength": 32,
      "tests": [
        {
          "input": "hello@hi.com"
        },
        {
          "input": "foo@123"
        },
        {
          "input": "00123"
        },
        {
          "input": "Test.The-Kitchen_Sink"
        },
        {
          "description": "empty string",
          "input": ""
        },
        {
          "description": "max length",
          "input": "12345678901234567890123456789012"
        },
        {
          "description": "route53 example",
          "input": "Z2YQB5RD63NC85"
        },
        {
          "description": "cloudfront distribution example",
          "input": "Z2FDTNDATAQYW2"
        },
        {
          "description": "Elastic Beanstalk example",
          "input": "ZL327KTPIQFUL"
        },
        {
          "description": "ELB load balancer example",
          "input": "ZZZZZZZZZZZ123X"
        },
        {
          "description": "Amazon S3 example",
          "input": "Z2O1EMRO9K5GLX"
        },
        {
          "description": "invalid - too long",
          "input": "1234567890123456789012345678901234567890123456789012345678",
          "expected": false
        }
      ]
    },
    "kmsKeyId": {
      "type": "string"
    },
    "port": {
      "type": "integer",
      "tests": [
        {
          "input": 9999
        },
        {
          "input": 11111
        },
        {
          "description": "minimum",
          "input": 1
        },
        {
          "description": "maximum",
          "input": 65535
        },
        {
          "description": "invalid - decimal value provided",
          "input": 4.5,
          "expected": false
        },
        {
          "description": "invalid - string type provided",
          "input": "three",
          "expected": false
        }
      ]
    },
    "preferredBackupWindow": {
      "type": "string",
      "pattern": "^\\d{2}:\\d{2}-\\d{2}:\\d{2}$",
      "tests": [
        {
          "input": "22:16-22:46"
        },
        {
          "input": "22:16-12:42"
        },
        {
          "describe": "invalid - time format is not maching",
          "input": "22:16-12:1",
          "expected": false
        }
      ]
    },
    "preferredMaintenanceWindow": {
      "type": "string",
      "pattern": "^\\w{3}:\\d{2}:\\d{2}-\\w{3}:\\d{2}:\\d{2}$",
      "tests": [
        {
          "input": "wed:11:23-wed:11:53"
        },
        {
          "input": "wed:11:23-wed:11:20"
        },
        {
          "describe": "invalid - time format is not maching",
          "input": "22:16-12:1",
          "expected": false
        }
      ]
    },
    "vpcSecurityGroupMembership": {
      "type": "object",
      "properties": {
        "Status": {
          "$ref": "#/definitions/status"
        },
        "VpcSecurityGroupId": {
          "$ref": "#/definitions/vpcSecurityGroupId"
        }
      },
      "tests": [
        {
          "input": {
            "Status": "ACTIVE",
            "VpcSecurityGroupId": "sg-d9b64db3"
          }
        }
      ]
    },
    "vpcSecurityGroupId": {
      "type": "string",
      "pattern": "^sg-[a-f0-9]{8}$",
      "tests": [
        {
          "input": "sg-d9b64db3"
        },
        {
          "input": "sg-f9a64cb4"
        },
        {
          "description": "invalid - can not start with any character",
          "input": "ad9b64db3",
          "expected": false
        }
      ]
    },
    "licenseModel": {
      "type": "string",
      "enum": [
        "license-included",
        "bring-your-own-license",
        "general-public-license"
      ],
      "tests": [
        {
          "input": "general-public-license"
        },
        {
          "input": "license-included"
        },
        {
          "description": "invalid - case sensitive",
          "input": "License-included",
          "expected": false
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        }
      ]
    },
    "sourceDBClusterSnapshotArn": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "arn:aws:rds:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:cluster-snapshot:[-a-zA-Z.0-9]*?"
        },
        {
          "type": "null"
        }
      ],
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:cluster-snapshot:rds:turbot-rds-test-1-1-2018-08-28-22-17"
        },
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:cluster-snapshot:rds:turbot-2018-08-28-22-17"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11166606571:cluster-snapshot:rds:turbot-rds-test-1-1-2018-08-28-22-17",
          "expected": false
        },
        {
          "description": "null value",
          "input": null
        },
        {
          "description": "empty string",
          "input": ""
        }
      ]
    },
    "subnetType": {
      "type": "string",
      "enum": [
        "Isolated",
        "Restricted",
        "Private",
        "Limited",
        "Direct",
        "Independent"
      ],
      "tests": [
        {
          "input": "Isolated"
        },
        {
          "input": "Independent"
        },
        {
          "description": "invalid - value not from allowed values",
          "input": "isolated",
          "expected": false
        }
      ]
    },
    "vpcId": {
      "type": "string"
    },
    "tagsMap": {
      "type": "object",
      "patternProperties": {
        "^(?:(?:(?!aws:)(?!rds:))[-a-zA-Z0-9 _.:/=+@]){1,128}$": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "additionalProperties": false,
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "foo": "bar"
          }
        },
        {
          "description": "valid - key min length",
          "input": {
            "a": "bar"
          }
        },
        {
          "description": "invalid - empty key",
          "input": {
            "": "bar"
          },
          "expected": false
        },
        {
          "description": "valid - key max length",
          "input": {
            "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567": "bar"
          }
        },
        {
          "description": "invalid - key too long",
          "input": {
            "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456781212": "bar"
          },
          "expected": false
        },
        {
          "description": "valid - empty",
          "input": {}
        }
      ]
    },
    "tagValue": {
      "allOf": [
        {
          "$ref": "#/definitions/tagString"
        },
        {
          "type": "string",
          "minLength": 0,
          "maxLength": 256
        }
      ],
      "tests": [
        {
          "description": "valid - empty string",
          "input": ""
        },
        {
          "description": "valid - max length",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456"
        },
        {
          "description": "invalid - too long",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567",
          "expected": false
        }
      ]
    },
    "tagString": {
      "type": "string",
      "pattern": "^((?!aws)(?!rds))[-a-zA-Z0-9 _.:\\/=+@]*$",
      "tests": [
        {
          "input": "Peter Dinklage as Tyrion Lannister"
        },
        {
          "input": "Filip Lozic as Young Nobleman"
        },
        {
          "input": "Test01._: /=.+-=._:/"
        }
      ]
    },
    "tagList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tag"
      },
      "minLength": 0,
      "tests": [
        {
          "description": "valid - empty list",
          "input": []
        },
        {
          "description": "valid - single item",
          "input": [
            {
              "Key": "foo",
              "Value": "bar"
            }
          ]
        },
        {
          "description": "valid - multiple items",
          "input": [
            {
              "Key": "one",
              "Value": 1
            },
            {
              "Key": "two",
              "Value": 2
            },
            {
              "Key": "three",
              "Value": 3
            },
            {
              "Key": "four",
              "Value": 4
            }
          ]
        },
        {
          "description": "invalid - missing value",
          "input": [
            {
              "Key": "one"
            },
            {
              "Key": "two",
              "Value": 2
            }
          ],
          "expected": false
        },
        {
          "description": "invalid - empty item",
          "input": [
            {
              "Key": "one",
              "Value": 1
            },
            null,
            {
              "Key": "two",
              "Value": 2
            }
          ],
          "expected": false
        }
      ]
    },
    "tag": {
      "type": "object",
      "properties": {
        "Key": {
          "$ref": "#/definitions/tagKey"
        },
        "Value": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "Key": "foo",
            "Value": "bar"
          }
        },
        {
          "description": "invalid - empty key",
          "input": {
            "Key": "",
            "Value": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - no key",
          "input": {
            "Value": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - no value",
          "input": {
            "Key": "foo"
          },
          "expected": false
        }
      ]
    },
    "tagKey": {
      "allOf": [
        {
          "$ref": "#/definitions/tagString"
        },
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        }
      ],
      "tests": [
        {
          "description": "valid - min length",
          "input": "a"
        },
        {
          "description": "valid - max length",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 12345678"
        },
        {
          "description": "invalid - empty string",
          "input": "",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456781",
          "expected": false
        }
      ]
    },
    "tagsTemplateTag": {
      "type": "object",
      "patternProperties": {
        "^((?!aws)(?!rds))[-a-zA-Z0-9 _.:/=+@]{1,128}$": {
          "$ref": "#/definitions/tagValue"
        }
      },
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false,
      "tests": [
        {
          "description": "valid - base case",
          "input": {
            "foo": "bar"
          }
        },
        {
          "description": "invalid - starts with \"aws:\"",
          "input": {
            "aws:test": "bar"
          },
          "expected": false
        },
        {
          "description": "invalid - below min properties",
          "input": {},
          "expected": false
        },
        {
          "description": "invalid - above max properties",
          "input": {
            "foo": "bar",
            "foo1": "bar1"
          },
          "expected": false
        }
      ]
    },
    "tagsTemplateTagList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tagsTemplateTag"
      },
      "minLength": 0,
      "tests": [
        {
          "description": "valid - empty list",
          "input": []
        },
        {
          "description": "valid - single item",
          "input": [
            {
              "foo": "bar"
            }
          ]
        },
        {
          "description": "valid - multiple items",
          "input": [
            {
              "foo": "bar"
            },
            {
              "foo1": "bar1"
            },
            {
              "foo2": "bar2"
            }
          ]
        },
        {
          "description": "invalid - empty item",
          "input": [
            {
              "foo": "bar"
            },
            null,
            {
              "foo2": "bar2"
            }
          ],
          "expected": false
        }
      ]
    },
    "rdsAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}$",
      "tests": [
        {
          "description": "base",
          "input": "arn:aws:rds:us-east-1:123123123123"
        },
        {
          "description": "invalid service name",
          "input": "arn:aws:Dms:us-east-1:123123123123",
          "expected": false
        },
        {
          "description": "invalid region name",
          "input": "arn:aws:rds:us-eastdk-74381:123456786354",
          "expected": false
        }
      ]
    },
    "subnets": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/subnet"
      },
      "tests": [
        {
          "description": "all details provided",
          "input": [
            {
              "SubnetIdentifier": "subnet-570da01b",
              "SubnetStatus": "Active",
              "SubnetAvailabilityZone": {
                "name": "ap-south-1b"
              }
            }
          ]
        }
      ]
    },
    "subnet": {
      "type": "object",
      "properties": {
        "SubnetIdentifier": {
          "$ref": "#/definitions/subnetIdentifier"
        },
        "SubnetStatus": {
          "$ref": "#/definitions/name"
        },
        "SubnetAvailabilityZone": {
          "$ref": "#/definitions/subnetAvailabilityZone"
        },
        "SubnetOutpost": {
          "$ref": "#/definitions/subnetOutpost"
        }
      },
      "tests": [
        {
          "description": "all details provided",
          "input": {
            "SubnetIdentifier": "subnet-570da01b",
            "SubnetStatus": "Active",
            "SubnetAvailabilityZone": {
              "name": "ap-south-1b"
            }
          }
        },
        {
          "description": "invalid - array passed instead of string",
          "input": {
            "SubnetIdentifier": "subnt-570da01b",
            "SubnetStatus": "Active",
            "SubnetAvailabilityZone": {
              "name": [
                "ap-south-1b"
              ]
            }
          },
          "expected": false
        }
      ]
    },
    "subnetOutpost": {
      "type": "object",
      "properties": {
        "Arn": {
          "$ref": "#/definitions/outpostArn"
        }
      }
    },
    "subnetAvailabilityZone": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/name"
        }
      },
      "tests": [
        {
          "input": {
            "name": "ap-south-1b"
          }
        },
        {
          "description": "invalid - array passed instead of string",
          "input": {
            "name": [
              "ap-s"
            ]
          },
          "expected": false
        }
      ]
    },
    "dbSubnetGroupArn": {
      "type": "string",
      "pattern": "arn:aws(-us-gov|-cn)?:rds:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:subgrp:[-a-zA-Z.0-9]*?",
      "tests": [
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:subgrp:default"
        },
        {
          "input": "arn:aws:rds:ap-south-1:111666065714:subgrp:rohit-12"
        },
        {
          "description": "invalid - input not expected",
          "input": "hi hi",
          "expected": false
        },
        {
          "description": "invalid - AWS account id is wrong",
          "input": "arn:aws:rds:ap-south-1:11166606571:subgrp:rohit-12",
          "expected": false
        }
      ]
    }
  },
  "policy": {
    "types": {
      "dbClusterActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster, based on the `AWS > RDS > DB Cluster > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Snapshot and delete inactive with 1 day warning",
            "Enforce: Snapshot and delete inactive with 3 days warning",
            "Enforce: Snapshot and delete inactive with 7 days warning",
            "Enforce: Snapshot and delete inactive with 14 days warning",
            "Enforce: Snapshot and delete inactive with 30 days warning",
            "Enforce: Snapshot and delete inactive with 60 days warning",
            "Enforce: Snapshot and delete inactive with 90 days warning",
            "Enforce: Snapshot and delete inactive with 180 days warning",
            "Enforce: Snapshot and delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "dbClusterActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbClusterActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "The number of days since the AWS RDS db cluster\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbClusterActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/dbClusterActive",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "The age after which the AWS RDS db cluster\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbClusterActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbClusterActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\ndbClusters to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "dbClusterApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster is not approved based on `AWS > RDS > DB Cluster > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Snapshot and delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "dbClusterApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbClusterApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "A list of AWS regions in which AWS RDS db clusters are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db cluster is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > RDS > DB Cluster > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsApprovedRegionsDefault\")\n}\n"
      },
      "dbClusterApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbClusterApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Determine whether the AWS RDS db cluster is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db cluster is not approved, it will be subject to the action specified in the `AWS > RDS > DB Cluster > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > RDS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > RDS > Enabled"
        }
      },
      "dbClusterApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbClusterApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "The policy allows you to set db clusters to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db cluster is not matched by the approved list, it will be subject to the action specified in the `AWS > RDS > DB Cluster > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "dbClusterCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS RDS db cluster into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Cluster > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "dbClusterConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "dbClusterConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/dbClusterConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "dbClusterConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/dbClusterConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "dbClusterRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS db clusters are supported for use.\n\nAny db clusters in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "dbClusterSchedule": {
        "title": "Schedule",
        "icon": "fal-clock",
        "parent": "#/resource/types/dbCluster",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Set a schedule for starting and stopping an AWS RDS db cluster.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\ndb cluster has a turbot_custom_schedule tag, then the schedule specified by\nthe tag will be in effect.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Business hours (8:00am - 6:00pm on weekdays)",
            "Enforce: Extended business hours (7:00am - 11:00pm on weekdays)",
            "Enforce: Stop for night (stop at 10:00pm every day)",
            "Enforce: Stop for weekend (stop at 10:00pm on Friday)"
          ],
          "example": [
            "Enforce: Business hours (8:00am - 6:00pm on weekdays)"
          ],
          "default": "Skip"
        }
      },
      "dbClusterScheduleTag": {
        "title": "Schedule Tag",
        "icon": "fal-clock",
        "parent": "#/resource/types/dbCluster",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Allow setting a schedule for starting and stopping an RDS db cluster via the\nturbot_custom_schedule tag. If the schedule is invalid, no actions will be\ntaken against the dbCluster.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\ndb cluster has a turbot_custom_schedule, then the schedule specified by the\ntag will be in effect.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Schedule per turbot_custom_schedule tag"
          ],
          "example": [
            "Enforce: Schedule per turbot_custom_schedule tag"
          ],
          "default": "Skip"
        }
      },
      "dbClusterTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster tags are not updated based on the `AWS > RDS > DB Cluster > Tags > *` policies.\n\nThe control ensure AWS RDS db cluster tags include tags defined in `AWS > RDS > DB Cluster > Tags > Template`.\n\nTags not defined in DB Cluster Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "dbClusterTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/dbClusterTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbCluster"
        ],
        "description": "The template is used to generate the keys and values for AWS RDS db cluster.\n\nTags not defined in DB Cluster Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "dbClusterUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbCluster",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS RDS db clusters that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > RDS > DB Cluster > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "dbClusterUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/dbClusterUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 40
        }
      },
      "dbClusterParameterGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster parameter group, based on the `AWS > RDS > DB Cluster Parameter Group > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Parameter Group > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "dbClusterParameterGroupActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbClusterParameterGroupActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "The number of days since the AWS RDS db cluster parameter group\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Parameter Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbClusterParameterGroupActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/dbClusterParameterGroupActive",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "The age after which the AWS RDS db cluster parameter group\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Parameter Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbClusterParameterGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster parameter group is not approved based on `AWS > RDS > DB Cluster Parameter Group > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "dbClusterParameterGroupApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbClusterParameterGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "A list of AWS regions in which AWS RDS db cluster parameter groups are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db cluster parameter group is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > RDS > DB Cluster Parameter Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsApprovedRegionsDefault\")\n}\n"
      },
      "dbClusterParameterGroupApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbClusterParameterGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Determine whether the AWS RDS db cluster parameter group is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db cluster parameter group is not approved, it will be subject to the action specified in the `AWS > RDS > DB Cluster Parameter Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > RDS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > RDS > Enabled"
        }
      },
      "dbClusterParameterGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS RDS db cluster parameter group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Cluster Parameter Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "dbClusterParameterGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "dbClusterParameterGroupConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/dbClusterParameterGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "dbClusterParameterGroupConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/dbClusterParameterGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "dbClusterParameterGroupRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS db cluster parameter groups are supported for use.\n\nAny db cluster parameter groups in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "dbClusterParameterGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster parameter group tags are not updated based on the `AWS > RDS > DB Cluster Parameter Group > Tags > *` policies.\n\nThe control ensure AWS RDS db cluster parameter group tags include tags defined in `AWS > RDS > DB Cluster Parameter Group > Tags > Template`.\n\nTags not defined in DB Cluster Parameter Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "dbClusterParameterGroupTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/dbClusterParameterGroupTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbClusterParameterGroup"
        ],
        "description": "The template is used to generate the keys and values for AWS RDS db cluster parameter group.\n\nTags not defined in DB Cluster Parameter Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "dbClusterParameterGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbClusterParameterGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS RDS db cluster parameter groups that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > RDS > DB Cluster Parameter Group > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "dbClusterParameterGroupUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/dbClusterParameterGroupUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 50
        }
      },
      "dbClusterSnapshotManualActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster snapshot [manual], based on the `AWS > RDS > DB Cluster Snapshot [Manual] > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Snapshot [Manual] > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbClusterSnapshotManualActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "The number of days since the AWS RDS db cluster snapshot [manual]\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Snapshot [Manual] > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/dbClusterSnapshotManualActive",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "The age after which the AWS RDS db cluster snapshot [manual]\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Snapshot [Manual] > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbClusterSnapshotManualActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\ndbClusterSnapshotManuals to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Cluster Snapshot [Manual] > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster snapshot [manual] is not approved based on `AWS > RDS > DB Cluster Snapshot [Manual] > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbClusterSnapshotManualApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "A list of AWS regions in which AWS RDS db cluster snapshot [manual]s are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db cluster snapshot [manual] is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > RDS > DB Cluster Snapshot [Manual] > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsApprovedRegionsDefault\")\n}\n"
      },
      "dbClusterSnapshotManualApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbClusterSnapshotManualApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Determine whether the AWS RDS db cluster snapshot [manual] is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db cluster snapshot [manual] is not approved, it will be subject to the action specified in the `AWS > RDS > DB Cluster Snapshot [Manual] > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > RDS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > RDS > Enabled"
        }
      },
      "dbClusterSnapshotManualApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbClusterSnapshotManualApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "The policy allows you to set db cluster snapshot [manual]s to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db cluster snapshot [manual] is not matched by the approved list, it will be subject to the action specified in the `AWS > RDS > DB Cluster Snapshot [Manual] > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS RDS db cluster snapshot [manual] into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Cluster Snapshot [Manual] > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "dbClusterSnapshotManualConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "dbClusterSnapshotManualConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/dbClusterSnapshotManualConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "dbClusterSnapshotManualConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/dbClusterSnapshotManualConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "dbClusterSnapshotManualRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS db cluster snapshot [manual]s are supported for use.\n\nAny db cluster snapshot [manual]s in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "dbClusterSnapshotManualTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "Determine the action to take when an AWS RDS db cluster snapshot [manual] tags are not updated based on the `AWS > RDS > DB Cluster Snapshot [Manual] > Tags > *` policies.\n\nThe control ensure AWS RDS db cluster snapshot [manual] tags include tags defined in `AWS > RDS > DB Cluster Snapshot [Manual] > Tags > Template`.\n\nTags not defined in DB Cluster Snapshot [Manual] Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/dbClusterSnapshotManualTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "The template is used to generate the keys and values for AWS RDS db cluster snapshot [manual].\n\nTags not defined in DB Cluster Snapshot [Manual] Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "dbClusterSnapshotManualTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Manage trusted access for AWS RDS DB Cluster Snapshot [Manual]s.\n\nAWS allows RDS DB Cluster Snapshot [Manual]s to be shared with specific AWS accounts.\nThis policy allows you to configure whether such sharing is allowed, and to which accounts.\n\nIf set to `Enforce`, access to non-trusted accounts will be removed.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Trusted Access > Accounts",
            "Enforce: Trusted Access > Accounts"
          ],
          "example": [
            "Check: Trusted Access > Accounts"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualTrustedAccessAccounts": {
        "title": "Accounts",
        "icon": "fal-user-check",
        "parent": "#/policy/types/dbClusterSnapshotManualTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/dbClusterSnapshotManual"
        ],
        "description": "A list of AWS account IDs that are allowed to have access",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^[0-9]{12}$|^\\*$|^all$)"
          }
        },
        "defaultTemplate": "{% if $.accounts | length == 0 %}[]{% endif %}{% for item in $.accounts %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  accounts: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsTrustedAccounts\")\n}\n"
      },
      "dbClusterSnapshotManualUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbClusterSnapshotManual",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS RDS db cluster snapshot [manual]s that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > RDS > DB Cluster Snapshot [Manual] > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "dbClusterSnapshotManualUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/dbClusterSnapshotManualUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 100
        }
      },
      "dbInstanceActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Determine the action to take when an AWS RDS db instance, based on the `AWS > RDS > DB Instance > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Instance > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Snapshot and delete inactive with 1 day warning",
            "Enforce: Snapshot and delete inactive with 3 days warning",
            "Enforce: Snapshot and delete inactive with 7 days warning",
            "Enforce: Snapshot and delete inactive with 14 days warning",
            "Enforce: Snapshot and delete inactive with 30 days warning",
            "Enforce: Snapshot and delete inactive with 60 days warning",
            "Enforce: Snapshot and delete inactive with 90 days warning",
            "Enforce: Snapshot and delete inactive with 180 days warning",
            "Enforce: Snapshot and delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbInstanceActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "The number of days since the AWS RDS db instance\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Instance > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/dbInstanceActive",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "The age after which the AWS RDS db instance\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Instance > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbInstanceActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\ndbInstances to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Instance > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Determine the action to take when an AWS RDS db instance is not approved based on `AWS > RDS > DB Instance > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Stop unapproved",
            "Enforce: Stop unapproved if new",
            "Enforce: Snapshot and delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbInstanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "A list of AWS regions in which AWS RDS db instances are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db instance is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > RDS > DB Instance > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsApprovedRegionsDefault\")\n}\n"
      },
      "dbInstanceApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbInstanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Determine whether the AWS RDS db instance is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db instance is not approved, it will be subject to the action specified in the `AWS > RDS > DB Instance > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > RDS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > RDS > Enabled"
        }
      },
      "dbInstanceApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbInstanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "The policy allows you to set db instances to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db instance is not matched by the approved list, it will be subject to the action specified in the `AWS > RDS > DB Instance > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceApprovedInstanceClasses": {
        "title": "Instance Classes",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbInstanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "A list of instance classes that the AWS RDS db instance is approved to use.\n\nThe expected format is an array of instance classes. You may use the `*` and `?` wildcard characters (and [more](https://github.com/micromatch/micromatch#matching-features)).\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db instance is not matched by the approved list, it will be subject to the action specified in the `AWS > RDS > DB Instance > Approved` policy.\n\n```\nexample:\n  db.t2.large\n```\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9.?*]+$"
          }
        }
      },
      "dbInstanceApprovedDatabaseEngines": {
        "title": "Database Engines",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbInstanceApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "A list of database engines that the AWS RDS db instance is approved to use.\n\nThe expected format is an array of database engines. You may use the `*` and `?` wildcard characters (and [more](https://github.com/micromatch/micromatch#matching-features)).\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db instance is not matched by the approved list, it will be subject to the action specified in the `AWS > RDS > DB Instance > Approved` policy.\n\n```\nexample:\n  postgres\n```\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "array",
          "default": [
            "*"
          ],
          "items": {
            "type": "string",
            "pattern": "^[a-z0-9.?*-]+$"
          }
        }
      },
      "dbInstanceEncryptionAtRest": {
        "title": "Encryption at Rest",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/dbInstanceApproved",
        "targets": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the Encryption at Rest settings required for `AWS > RDS > DB Instance`.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > RDS > DB Instance > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action\n",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "None or higher",
            "AWS managed key",
            "AWS managed key or higher",
            "Customer managed key",
            "Encryption at Rest > Customer Managed Key"
          ],
          "example": [
            "None or higher"
          ],
          "default": "None or higher"
        }
      },
      "dbInstanceEncryptionAtRestCustomerManagedKey": {
        "title": "Customer Managed Key",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/dbInstanceEncryptionAtRest",
        "targets": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the KMS key ID for encryption at rest.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > RDS > DB Instance > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action\n\nPlease make sure the key defined in the template has required permissions.\n\n```\nexample:\n  alias/aws/ebs\n  ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:key/ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:alias/aws/ebs\n```\n",
        "schema": {
          "anyOf": [
            {
              "type": "string",
              "pattern": "^alias/[a-zA-Z0-9:/_-]{1,249}$"
            },
            {
              "type": "string",
              "pattern": "^[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key/[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:alias/[a-zA-Z0-9:/_-]{1,249}$"
            }
          ],
          "tests": [
            {
              "description": "valid - if keyArn",
              "input": "arn:aws:kms:us-east-1:039305405804:key/ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasName",
              "input": "alias/aws/ebs"
            },
            {
              "description": "valid - if keyId",
              "input": "ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasArn",
              "input": "arn:aws:kms:us-east-1:039305405804:alias/aws/ebs"
            }
          ]
        },
        "defaultTemplate": "{{ $.defaultKey }}",
        "defaultTemplateInput": "{\n  defaultKey: policy(uri: \"aws-kms#/policy/types/keyDefaultCustomerManagedKey\")\n}\n"
      },
      "dbInstanceCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS RDS db instance into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Instance > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "dbInstanceConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "dbInstanceConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/dbInstanceConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "dbInstanceConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/dbInstanceConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "dbInstanceParameterGroup": {
        "title": "Parameter Group",
        "icon": "fal-object-group",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Determine whether to check or enforce a specific Parameter Group for this DB Instance.\n\nUse the `Parameter Group > Name` sub-policy to set which Parameter Group to configure for this instance.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Set to Parameter Group > Name",
            "Enforce: Set to Parameter Group > Name",
            "Enforce: Set to Parameter Group > Name (Create if missing)"
          ],
          "example": [
            "Check: Set to Parameter Group > Name"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceParameterGroupName": {
        "title": "Name",
        "icon": "fal-brackets-curly",
        "parent": "#/policy/types/dbInstanceParameterGroup",
        "category": "turbot#/control/categories/other",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "The name of a DB Parameter Group for this DB Instance.\n\nIf the parent `Parameter Group` policy is set to `Enforce: Set to Parameter Group > Name (Create if missing)` a new parameter group with this name will be created if it does not already exist.\n",
        "schema": {
          "type": "string",
          "pattern": "^([a-z])[a-z0-9-.]{0,62}$"
        },
        "defaultTemplate": "turbot-{{ $.item.DBInstanceIdentifier }}",
        "defaultTemplateInput": "{\n  item: dbInstance { DBInstanceIdentifier }\n}\n"
      },
      "dbInstancePubliclyAccessible": {
        "title": "Publicly Accessible",
        "icon": "fal-cog",
        "description": "Ensure the RDS instance is not publicly accessible.",
        "parent": "#/resource/types/dbInstance",
        "targets": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: DB Instance is not publicly accessible",
            "Enforce: DB Instance is not publicly accessible"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS db instances are supported for use.\n\nAny db instances in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "instanceSchedule": {
        "title": "Schedule",
        "icon": "fal-clock",
        "parent": "#/resource/types/dbInstance",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Set a schedule for starting and stopping an AWS RDS db instance.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\nthe tag will be in effect.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Business hours (8:00am - 6:00pm on weekdays)",
            "Enforce: Extended business hours (7:00am - 11:00pm on weekdays)",
            "Enforce: Stop for night (stop at 10:00pm every day)",
            "Enforce: Stop for weekend (stop at 10:00pm on Friday)"
          ],
          "example": [
            "Enforce: Business hours (8:00am - 6:00pm on weekdays)"
          ],
          "default": "Skip"
        }
      },
      "instanceScheduleTag": {
        "title": "Schedule Tag",
        "icon": "fal-clock",
        "parent": "#/resource/types/dbInstance",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "category": "turbot#/control/categories/resourceSchedule",
        "description": "Allow setting a schedule for starting and stopping an RDS db instance via the\nturbot_custom_schedule tag. If the schedule is invalid, no actions will be\ntaken against the dbInstance.\n\n**Note** If both \"Schedule\" and \"Schedule Tag\" are set to enforce and the\ndb instance has a turbot_custom_schedule, then the schedule specified by the\ntag will be in effect.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Schedule per turbot_custom_schedule tag"
          ],
          "example": [
            "Enforce: Schedule per turbot_custom_schedule tag"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "Determine the action to take when an AWS RDS db instance tags are not updated based on the `AWS > RDS > DB Instance > Tags > *` policies.\n\nThe control ensure AWS RDS db instance tags include tags defined in `AWS > RDS > DB Instance > Tags > Template`.\n\nTags not defined in DB Instance Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/dbInstanceTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbInstance"
        ],
        "description": "The template is used to generate the keys and values for AWS RDS db instance.\n\nTags not defined in DB Instance Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "dbInstanceUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbInstance",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS RDS db instances that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > RDS > DB Instance > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "dbInstanceUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/dbInstanceUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 40
        }
      },
      "dbParameterGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Determine the action to take when an AWS RDS db parameter group, based on the `AWS > RDS > DB Parameter Group > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Parameter Group > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "dbParameterGroupActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbParameterGroupActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "The number of days since the AWS RDS db parameter group\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Parameter Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbParameterGroupActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/dbParameterGroupActive",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "The age after which the AWS RDS db parameter group\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Parameter Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbParameterGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Determine the action to take when an AWS RDS db parameter group is not approved based on `AWS > RDS > DB Parameter Group > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "dbParameterGroupApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbParameterGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "A list of AWS regions in which AWS RDS db parameter groups are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db parameter group is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > RDS > DB Parameter Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsApprovedRegionsDefault\")\n}\n"
      },
      "dbParameterGroupApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbParameterGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Determine whether the AWS RDS db parameter group is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db parameter group is not approved, it will be subject to the action specified in the `AWS > RDS > DB Parameter Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > RDS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > RDS > Enabled"
        }
      },
      "dbParameterGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS RDS db parameter group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Parameter Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "dbParameterGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "dbParameterGroupConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/dbParameterGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "dbParameterGroupConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/dbParameterGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "dbParameterGroupRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS db parameter groups are supported for use.\n\nAny db parameter groups in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "dbParameterGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "Determine the action to take when an AWS RDS db parameter group tags are not updated based on the `AWS > RDS > DB Parameter Group > Tags > *` policies.\n\nThe control ensure AWS RDS db parameter group tags include tags defined in `AWS > RDS > DB Parameter Group > Tags > Template`.\n\nTags not defined in DB Parameter Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "dbParameterGroupTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/dbParameterGroupTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbParameterGroup"
        ],
        "description": "The template is used to generate the keys and values for AWS RDS db parameter group.\n\nTags not defined in DB Parameter Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "dbParameterGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbParameterGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS RDS db parameter groups that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > RDS > DB Parameter Group > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "dbParameterGroupUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/dbParameterGroupUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 50
        }
      },
      "dbSnapshotManualActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Determine the action to take when an AWS RDS db snapshot [manual], based on the `AWS > RDS > DB Snapshot [Manual] > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Snapshot [Manual] > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbSnapshotManualActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "The number of days since the AWS RDS db snapshot [manual]\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Snapshot [Manual] > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/dbSnapshotManualActive",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "The age after which the AWS RDS db snapshot [manual]\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Snapshot [Manual] > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/dbSnapshotManualActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\ndbSnapshotManuals to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > DB Snapshot [Manual] > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Determine the action to take when an AWS RDS db snapshot [manual] is not approved based on `AWS > RDS > DB Snapshot [Manual] > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbSnapshotManualApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "A list of AWS regions in which AWS RDS db snapshot [manual]s are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db snapshot [manual] is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > RDS > DB Snapshot [Manual] > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsApprovedRegionsDefault\")\n}\n"
      },
      "dbSnapshotManualApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbSnapshotManualApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Determine whether the AWS RDS db snapshot [manual] is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db snapshot [manual] is not approved, it will be subject to the action specified in the `AWS > RDS > DB Snapshot [Manual] > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > RDS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > RDS > Enabled"
        }
      },
      "dbSnapshotManualApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/dbSnapshotManualApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "The policy allows you to set db snapshot [manual]s to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS RDS db snapshot [manual] is not matched by the approved list, it will be subject to the action specified in the `AWS > RDS > DB Snapshot [Manual] > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualEncryptionAtRest": {
        "title": "Encryption at Rest",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/dbSnapshotManualApproved",
        "targets": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the Encryption at Rest settings required for `AWS > RDS > DB Snapshot [Manual]`.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > RDS > DB Snapshot [Manual] > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action\n",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "None or higher",
            "AWS managed key",
            "AWS managed key or higher",
            "Customer managed key",
            "Encryption at Rest > Customer Managed Key"
          ],
          "example": [
            "None or higher"
          ],
          "default": "None or higher"
        }
      },
      "dbSnapshotManualEncryptionAtRestCustomerManagedKey": {
        "title": "Customer Managed Key",
        "icon": "fal-shield-alt",
        "parent": "#/policy/types/dbSnapshotManualEncryptionAtRest",
        "targets": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceEncryptionAtRest",
        "description": "Define the KMS key ID for encryption at rest.\n\nEncryption at Rest refers specifically to the encryption of data when written\nto an underlying storage system. This control determines whether the resource\nis encrypted at rest, and sets encryption to your desired level.\n\nThe [Encryption at Rest](https://turbot.com/v5/docs/concepts/guardrails/encryption-at-rest)\ncontrol compares the encryption settings against the encryption policies for the resource\n(`AWS > RDS > DB Snapshot [Manual] > Encryption at Rest  > *`),\nraises an alarm, and takes the defined enforcement action\n\nPlease make sure the key defined in the template has required permissions.\n\n```\nexample:\n  alias/aws/ebs\n  ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:key/ddc06e04-ce5f-4995-c758-c2b6c510e8fd\n  arn:aws:kms:us-east-1:123456789012:alias/aws/ebs\n```\n",
        "schema": {
          "anyOf": [
            {
              "type": "string",
              "pattern": "^alias/[a-zA-Z0-9:/_-]{1,249}$"
            },
            {
              "type": "string",
              "pattern": "^[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:key/[-a-z0-9-]{1,255}$"
            },
            {
              "type": "string",
              "pattern": "^arn:aws(-us-gov|-cn)?:kms:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:alias/[a-zA-Z0-9:/_-]{1,249}$"
            }
          ],
          "tests": [
            {
              "description": "valid - if keyArn",
              "input": "arn:aws:kms:us-east-1:039305405804:key/ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasName",
              "input": "alias/aws/ebs"
            },
            {
              "description": "valid - if keyId",
              "input": "ddc06e04-ce5f-4995-b758-c2b6c510e8fd"
            },
            {
              "description": "valid - if aliasArn",
              "input": "arn:aws:kms:us-east-1:039305405804:alias/aws/ebs"
            }
          ]
        },
        "defaultTemplate": "{{ $.defaultKey }}",
        "defaultTemplateInput": "{\n  defaultKey: policy(uri: \"aws-kms#/policy/types/keyDefaultCustomerManagedKey\")\n}\n"
      },
      "dbSnapshotManualCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS RDS db snapshot [manual] into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > DB Snapshot [Manual] > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "dbSnapshotManualConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "dbSnapshotManualConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/dbSnapshotManualConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "dbSnapshotManualConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/dbSnapshotManualConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "dbSnapshotManualRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS db snapshot [manual]s are supported for use.\n\nAny db snapshot [manual]s in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "dbSnapshotManualTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "Determine the action to take when an AWS RDS db snapshot [manual] tags are not updated based on the `AWS > RDS > DB Snapshot [Manual] > Tags > *` policies.\n\nThe control ensure AWS RDS db snapshot [manual] tags include tags defined in `AWS > RDS > DB Snapshot [Manual] > Tags > Template`.\n\nTags not defined in DB Snapshot [Manual] Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/dbSnapshotManualTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "The template is used to generate the keys and values for AWS RDS db snapshot [manual].\n\nTags not defined in DB Snapshot [Manual] Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "dbSnapshotManualTrustedAccess": {
        "title": "Trusted Access",
        "icon": "fal-shield",
        "parent": "#/resource/types/dbSnapshotManual",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "category": "turbot#/control/categories/securityTrustedAccess",
        "description": "Manage trusted access for AWS RDS DB Snapshot [Manual]s.\n\nAWS allows RDS DB Snapshot [Manual]s to be shared with specific AWS accounts.\nThis policy allows you to configure whether such sharing is allowed, and to which accounts.\n\nIf set to `Enforce`, access to non-trusted accounts will be removed.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Trusted Access > Accounts",
            "Enforce: Trusted Access > Accounts"
          ],
          "example": [
            "Check: Trusted Access > Accounts"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualTrustedAccessAccounts": {
        "title": "Accounts",
        "icon": "fal-user-check",
        "parent": "#/policy/types/dbSnapshotManualTrustedAccess",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "#/resource/types/dbSnapshotManual"
        ],
        "description": "A list of AWS account IDs that are allowed to have access",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "(?:^[0-9]{12}$|^\\*$|^all$)"
          }
        },
        "defaultTemplate": "{% if $.accounts | length == 0 %}[]{% endif %}{% for item in $.accounts %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  accounts: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsTrustedAccounts\")\n}\n"
      },
      "dbSnapshotManualUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/dbSnapshotManual",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS RDS db snapshot [manual]s that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > RDS > DB Snapshot [Manual] > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "dbSnapshotManualUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/dbSnapshotManualUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 100
        }
      },
      "optionGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Determine the action to take when an AWS RDS option group, based on the `AWS > RDS > Option Group > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > Option Group > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "optionGroupActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/optionGroupActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "The number of days since the AWS RDS option group\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > Option Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "optionGroupActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/optionGroupActive",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "The age after which the AWS RDS option group\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > Option Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "optionGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Determine the action to take when an AWS RDS option group is not approved based on `AWS > RDS > Option Group > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "optionGroupApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/optionGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "A list of AWS regions in which AWS RDS option groups are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS option group is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > RDS > Option Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsApprovedRegionsDefault\")\n}\n"
      },
      "optionGroupApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/optionGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Determine whether the AWS RDS option group is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS option group is not approved, it will be subject to the action specified in the `AWS > RDS > Option Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > RDS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > RDS > Enabled"
        }
      },
      "optionGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS RDS option group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > Option Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "optionGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "optionGroupConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/optionGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "optionGroupConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/optionGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "optionGroupRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS option groups are supported for use.\n\nAny option groups in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "optionGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "Determine the action to take when an AWS RDS option group tags are not updated based on the `AWS > RDS > Option Group > Tags > *` policies.\n\nThe control ensure AWS RDS option group tags include tags defined in `AWS > RDS > Option Group > Tags > Template`.\n\nTags not defined in Option Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "optionGroupTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/optionGroupTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/optionGroup"
        ],
        "description": "The template is used to generate the keys and values for AWS RDS option group.\n\nTags not defined in Option Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "optionGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/optionGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS RDS option groups that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > RDS > Option Group > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "optionGroupUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/optionGroupUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 20
        }
      },
      "rdsCustomEventPatterns": {
        "title": "RDS",
        "icon": "fal-file-invoice",
        "description": "The CloudWatch Events event pattern used by the AWS RDS module to specify\nwhich events to forward to the Turbot Event Handlers.\n",
        "category": "turbot#/control/categories/configured",
        "parent": "aws#/policy/types/eventHandlersEventsRulesCustomEventPatterns",
        "targets": "aws#/resource/types/region",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  }
                }
              },
              "value": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "detail-type": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "detail": {
                    "type": "object",
                    "property": {
                      "eventName": {
                        "type": "array"
                      }
                    },
                    "required": [
                      "eventName"
                    ]
                  }
                },
                "required": [
                  "source"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          "default": [
            {
              "type": {
                "title": "RDS",
                "name": "rds"
              },
              "value": {
                "source": [
                  "aws.rds"
                ],
                "detail-type": [
                  "AWS API Call via CloudTrail"
                ],
                "detail": {
                  "eventName": [
                    "AddTagsToResource",
                    "CopyDBClusterSnapshot",
                    "CopyDBParameterGroup",
                    "CopyDBSnapshot",
                    "CopyOptionGroup",
                    "CreateDBCluster",
                    "CreateDBClusterParameterGroup",
                    "CreateDBClusterSnapshot",
                    "CreateDBInstance",
                    "CreateDBParameterGroup",
                    "CreateDBSecurityGroup",
                    "CreateDBSnapshot",
                    "CreateDBSubnetGroup",
                    "CreateOptionGroup",
                    "DeleteDBCluster",
                    "DeleteDBClusterParameterGroup",
                    "DeleteDBClusterSnapshot",
                    "DeleteDBInstance",
                    "DeleteDBParameterGroup",
                    "DeleteDBSnapshot",
                    "DeleteDBSubnetGroup",
                    "DeleteOptionGroup",
                    "FailoverDBCluster",
                    "ModifyDBCluster",
                    "ModifyDBClusterParameterGroup",
                    "ModifyDBClusterSnapshotAttribute",
                    "ModifyDBInstance",
                    "ModifyDBParameterGroup",
                    "ModifyDBSnapshot",
                    "ModifyDBSnapshotAttribute",
                    "ModifyDBSubnetGroup",
                    "ModifyOptionGroup",
                    "RebootDBInstance",
                    "RemoveTagsFromResource",
                    "ResetDBClusterParameterGroup",
                    "ResetDBParameterGroup",
                    "RestoreDBClusterFromS3",
                    "RestoreDBClusterFromSnapshot",
                    "RestoreDBClusterToPointInTime",
                    "RestoreDBInstanceFromDBSnapshot",
                    "RestoreDBInstanceFromS3",
                    "RestoreDBInstanceToPointInTime",
                    "RevokeDBSecurityGroupIngress",
                    "StartDBInstance",
                    "StopDBInstance",
                    "StartDBCluster",
                    "StopDBCluster"
                  ]
                }
              }
            }
          ]
        }
      },
      "rdsEnabled": {
        "title": "Enabled",
        "icon": "fal-traffic-light-go",
        "description": "Enabled RDS.",
        "parent": "#/resource/types/rds",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Enabled: Metadata Only",
            "Disabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Disabled"
        }
      },
      "rdsApiEnabled": {
        "title": "API Enabled",
        "icon": "fal-lock-alt",
        "description": "Configure whether the AWS RDS API is enabled.\n\n**Note:** Disabling the service disables the API for ALL users\nand roles, and Turbot will have no access to the API.\n",
        "parent": "#/resource/types/rds",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > RDS > Enabled"
          ],
          "default": "Enabled"
        }
      },
      "rdsPermissions": {
        "title": "Permissions",
        "icon": "fal-traffic-light-go",
        "description": "Configure whether permissions policies are in effect for AWS RDS.\nThis setting does not affect account level permissions (AWS/Admin, AWS/Owner, etc).\n\n**Note:** The behavior of this policy depends on the value of `AWS > Permissions`.\"\n",
        "parent": "#/resource/types/rds",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled",
            "Enabled if AWS > RDS > Enabled & AWS > RDS > API Enabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Enabled if AWS > RDS > Enabled & AWS > RDS > API Enabled"
        }
      },
      "rdsPermissionsLockdown": {
        "title": "Lockdown",
        "icon": "fal-lock",
        "parent": "#/policy/types/rdsPermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions"
      },
      "rdsPermissionsLockdownApiBoundary": {
        "title": "API Boundary",
        "description": "Configure whether the AWS RDS API is enabled for\nall users and roles in turbot-managed boundary policies.\n\n**Note:** Disabling the service disables the API for ALL users\nand roles, and Turbot will have no access to the API.\n",
        "icon": "fal-tachometer-alt-average",
        "parent": "#/policy/types/rdsPermissionsLockdown",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled if AWS > RDS > API Enabled"
          ],
          "example": [
            "Enabled if AWS > RDS > API Enabled"
          ],
          "default": "Enabled if AWS > RDS > API Enabled"
        }
      },
      "rdsPermissionsLockdownEngineTypes": {
        "title": "Engine Types",
        "icon": "fal-lock",
        "description": "Configure whether lockdown policies are enabled to prohibit modification of Engine Types.",
        "parent": "#/policy/types/rdsPermissionsLockdown",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "array",
          "example": [
            [
              "aurora",
              "aurora-mysql",
              "chimera"
            ]
          ]
        },
        "defaultTemplate": "{% if $.engineTypes.items[0].value | length == 0 %} ['*'] {% endif %}{% for item in $.engineTypes.items[0].value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": [
          "{\n  item: account {\n      Id\n  }\n}\n",
          "{\n  engineTypes: policyValues(filter:\"policyTypeLevel:self resourceId:{{ $.item.Id }} policyTypeId:'tmod:@turbot/aws-rds/policy/types/dbInstanceApprovedDatabaseEngines'\") {\n    items {\n      value\n      }\n    }\n}\n"
        ]
      },
      "rdsPermissionsLevels": {
        "title": "Levels",
        "icon": "fal-layer-group",
        "description": "Define the permissions levels that can be used to grant access to an AWS account.\nPermissions levels defined will appear in the UI to assign access to Turbot users.\nThis policy provides a default for `Permissions > Levels` in each service,\nhowever you can explicitly override the setting for each service if desired\n",
        "parent": "#/policy/types/rdsPermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Metadata",
              "ReadOnly",
              "Operator",
              "Admin",
              "Owner"
            ]
          }
        },
        "defaultTemplate": "{% if $.availableLevels.items[0].value | length == 0 %} [] {% endif %}{% for item in $.availableLevels.items[0].value %}- {{ item }}\n{% endfor %}",
        "defaultTemplateInput": [
          "{\n  item: account {\n    turbot{\n      id\n    }\n  }\n}\n",
          "{\n  availableLevels: policyValues(filter:\"policyTypeLevel:self resourceId:{{ $.item.turbot.id }} policyTypeId:'tmod:@turbot/aws-iam#/policy/types/permissionsLevelsDefault'\") {\n    items {\n      value\n    }\n  }\n}\n"
        ]
      },
      "rdsPermissionsLevelsModifiers": {
        "title": "Modifiers",
        "icon": "fal-user-edit",
        "description": "A map of AWS API to Turbot Permission Level used to customize Turbot's\nstandard permissions. You can add, remove or redefine the mapping of AWS\nAPI operations to Turbot permissions levels here.\n\n**Note:** Modifiers are cumulative - if you add a permission to the Metadata level,\nit is also added to ReadOnly, Operator and Admin. Modifier policies set here apply ONLY to the AWS level\n\n```\nexample:\n  - \"glacier:createvault\": admin\n  - \"glacier:ListVaults\": metadata\n  - \"s3:DeleteBucket\": none\n```\n",
        "parent": "#/policy/types/rdsPermissionsLevels",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "$ref": "aws-iam#/definitions/awsModifierList"
        }
      },
      "rdsPermissionsLevelsSubnetGroupAdministration": {
        "title": "Subnet Group Administration",
        "icon": "fal-user-shield",
        "description": "Determines which Turbot permissions level can manage Subnet Group Administration.",
        "parent": "#/policy/types/rdsPermissionsLevels",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "schema": {
          "type": "string",
          "enum": [
            "None",
            "Admin"
          ],
          "example": [
            "None"
          ],
          "default": "None"
        }
      },
      "awsCompiledServicePermissions": {
        "title": "@turbot/aws-rds",
        "icon": "fal-calculator",
        "description": "A calculated policy that Turbot uses to create a compiled\nlist of ALL permissions for AWS RDS that is used as input\nto the control that manages the IAM stack.\n",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledServicePermissions",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "$ref": "aws-iam#/definitions/awsRightDefinitionList"
        }
      },
      "awsCompiledLockdownStatements": {
        "title": "@turbot/aws-rds",
        "icon": "fal-traffic-light-go",
        "description": "A calculated policy that Turbot uses to create a compiled list of\nALL lockdown policy statements for AWS RDS that is used as input\nto the stack that manages the Turbot IAM permissions objects.\n",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLockdownStatements",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "type": "array"
        }
      },
      "awsLevelsCompiled": {
        "title": "@turbot/aws-rds",
        "description": "A calculated policy that Turbot uses to create a compiled list of\nALL permissions for AWS RDS that is used as input to the stack\nthat manages the Turbot IAM permissions objects.\n",
        "icon": "fal-calculator",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevels",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "$ref": "aws-iam#/definitions/awsLevelDefinitionList"
        }
      },
      "awsCompiledApiBoundary": {
        "title": "@turbot/aws-rds",
        "description": "A read-only policy generated by Turbot that lists the APIs that\nshould be added to the turbot-managed (hard) boundary policy,\nthereby enabling them to be assigned to users and roles.\nThis value will change depending on the value of the value of the\n`AWS > RDS > Permissions > Lockdown > API Boundary` policy\n",
        "icon": "fal-border-outer",
        "parent": "aws-iam#/policy/types/iamPermissionsCompiledLevelsApiBoundary",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iamPermissions",
        "readOnly": true,
        "schema": {
          "type": "array"
        }
      },
      "rdsRegionsDefault": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/rds",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS resources are supported for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS RDS resources' Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/regionsDefault\") {\n    value\n  }\n}\n"
      },
      "rdsApprovedRegionsDefault": {
        "title": "Approved Regions [Default]",
        "icon": "fal-check-double",
        "parent": "#/resource/types/rds",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS resources are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n\nThis policy is the default value for all AWS RDS resources' Approved > Regions policies.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws#/policy/types/approvedRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "rdsStack": {
        "title": "Stack",
        "icon": "fal-layer-group",
        "parent": "#/resource/types/rds",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure a custom stack on AWS, per the custom `Stack > Source`.\n\nA Turbot `Stack` is a set of resources configured by Turbot, as specified\nvia Terraform source.  Stacks are responsible for the creation and deletion\nof multiple resources. Once created, stack resources are responsible for\nconfiguring themselves from the stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Configured",
            "Enforce: Configured"
          ],
          "default": "Skip"
        }
      },
      "rdsStackSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/rdsStack",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Terraform HCL source used to configure this stack.\n\nA Turbot `Stack` is a set of resources configured by Turbot, as specified\nvia Terraform source.  Stacks are responsible for the creation and deletion\nof multiple resources. Once created, stack resources are responsible for\nconfiguring themselves from the stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "rdsStackVariables": {
        "title": "Variables",
        "icon": "fal-pen",
        "parent": "#/policy/types/rdsStack",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Terraform variables in Terraform HCL that will be used as\ninputs to the stack as a [.tfvars file](https://www.terraform.io/docs/configuration/variables.html#variable-definitions-tfvars-files).\n\nA Turbot `Stack` is a set of resources configured by Turbot,\nas specified  via Terraform source.  Stacks are responsible\nfor the creation and deletion of multiple resources. Once created,\nstack resources are responsible for configuring themselves from\nthe stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "rdsStackSecretVariables": {
        "title": "Secret Variables",
        "icon": "fal-pen",
        "parent": "#/policy/types/rdsStack",
        "category": "turbot#/control/categories/configured",
        "secret": true,
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Terraform secret variables in Terraform HCL that will be used as\ninputs to the stack as a [.tfvars file](https://www.terraform.io/docs/configuration/variables.html#variable-definitions-tfvars-files).\n\nA Turbot `Stack` is a set of resources configured by Turbot,\nas specified  via Terraform source.  Stacks are responsible\nfor the creation and deletion of multiple resources. Once created,\nstack resources are responsible for configuring themselves from\nthe stack source via their `Configured` control.\n",
        "schema": {
          "type": "string",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "rdsStackTerraformVersion": {
        "title": "Terraform Version",
        "icon": "fal-bring-forward",
        "parent": "#/policy/types/rdsStack",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Version of Terraform to use for this stack.\nSpecify an [npm-style semver](https://docs.npmjs.com/misc/semver) string to\ndetermine which version of the Terraform container\nTurbot will use to run this stack.\n\nA Turbot `Stack` is a set of resources configured by Turbot,\nas specified  via Terraform source.  Stacks are responsible\nfor the creation and deletion of multiple resources. Once created,\nstack resources are responsible for configuring themselves from\nthe stack source via their `Configured` control.\n",
        "schema": {
          "type": "string"
        },
        "defaultTemplate": "{% if $.terraformVersion %}\"{{$.terraformVersion}}\"{% else %}\"\"{% endif %}",
        "defaultTemplateInput": "{\n  terraformVersion: policy(uri:\"tmod:@turbot/turbot#/policy/types/stackTerraformVersion\")\n}\n"
      },
      "rdsTagsTemplate": {
        "title": "Tags Template [Default]",
        "icon": "fal-tags",
        "description": "A template used to generate the keys and values for AWS RDS resources.\n\nBy default, all RDS resource Tags > Template policies will use this value.\n",
        "parent": "#/resource/types/rds",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/resourceTags",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws#/policy/types/defaultTagsTemplate\") {\n    value\n  }\n}\n"
      },
      "rdsTrustedAccounts": {
        "title": "Trusted Accounts [Default]",
        "icon": "fal-handshake",
        "parent": "#/resource/types/rds",
        "category": "turbot#/control/categories/securityTrustedAccess",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "List of AWS Accounts that are trusted for access in the AWS RDS policy.\n\nThis policy is used by the Trusted Access\ncontrol to determine which members of type \"account\" are allowed\nto be granted access. You may use the '*' and '?' wildcard characters.\n\n```\nexample:\n  - \"013122550996\"\n  - \"560741234067\"\n```\n\n**Note**: Setting the policy to `Empty` array will remove all accounts.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[0-9]{12}|^\\*$"
          }
        },
        "defaultTemplate": "{% if $.trustedAccounts.value | length == 0 %}[]{% else %}{% for item in $.trustedAccounts.value %}- '{{ item }}'\n{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  trustedAccounts: policyValue(uri:\"tmod:@turbot/aws#/policy/types/trustedAccounts\") {\n    value\n  }\n}\n"
      },
      "subnetGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Determine the action to take when an AWS RDS subnet group, based on the `AWS > RDS > Subnet Group > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > Subnet Group > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "subnetGroupActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/subnetGroupActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "The number of days since the AWS RDS subnet group\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > Subnet Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "subnetGroupActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/subnetGroupActive",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "The age after which the AWS RDS subnet group\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > RDS > Subnet Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "subnetGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Determine the action to take when an AWS RDS subnet group is not approved based on `AWS > RDS > Subnet Group > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "subnetGroupApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/subnetGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "A list of AWS regions in which AWS RDS subnet groups are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS subnet group is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > RDS > Subnet Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-rds#/policy/types/rdsApprovedRegionsDefault\")\n}\n"
      },
      "subnetGroupApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/subnetGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Determine whether the AWS RDS subnet group is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS RDS subnet group is not approved, it will be subject to the action specified in the `AWS > RDS > Subnet Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > RDS > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > RDS > Enabled"
        }
      },
      "subnetGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS RDS subnet group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > RDS > Subnet Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "subnetGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "subnetGroupConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/subnetGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "subnetGroupConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/subnetGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "subnetGroupRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS RDS subnet groups are supported for use.\n\nAny subnet groups in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "subnetGroupManagement": {
        "title": "Management",
        "icon": "fal-object-group",
        "description": "If enabled, users with the RDS/Admin role can manage DB subnet groups.",
        "parent": "#/resource/types/subnetGroup",
        "targets": "aws#/resource/types/account",
        "category": "turbot#/control/categories/other",
        "schema": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "example": [
            "Enabled"
          ],
          "default": "Disabled"
        }
      },
      "subnetGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "Determine the action to take when an AWS RDS subnet group tags are not updated based on the `AWS > RDS > Subnet Group > Tags > *` policies.\n\nThe control ensure AWS RDS subnet group tags include tags defined in `AWS > RDS > Subnet Group > Tags > Template`.\n\nTags not defined in Subnet Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "subnetGroupTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/subnetGroupTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/subnetGroup"
        ],
        "description": "The template is used to generate the keys and values for AWS RDS subnet group.\n\nTags not defined in Subnet Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-rds#/policy/types/rdsTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "subnetGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/subnetGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS RDS subnet groups that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS > RDS > Subnet Group > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "subnetGroupUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/subnetGroupUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 50
        }
      }
    }
  },
  "resource": {
    "types": {
      "dbCluster": {
        "title": "DB Cluster",
        "icon": "fal-tasks",
        "description": "DB Cluster resource in AWS RDS service.",
        "parent": "#/resource/types/rds",
        "category": "turbot#/resource/categories/databaseServer",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.DBClusterIdentifier }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:rds:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:cluster:{{ $.DBClusterIdentifier }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "DBClusterIdentifier": "fsd-sdfds",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "ap-south-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "fsd-sdfds",
              "akas": [
                "arn:aws:rds:ap-south-1:123456789012:cluster:fsd-sdfds"
              ],
              "resourceParentAka": "arn:aws::ap-south-1:123456789012"
            }
          }
        ],
        "terraform": {
          "type": "aws_rds_cluster",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.DBClusterIdentifier }}",
          "propertyMap": {
            "cluster_identifier": "DBClusterIdentifier"
          },
          "metadataMap": {
            "master_password": "terraform.password",
            "skip_final_snapshot": "terraform.skipFinalSnapshot",
            "final_snapshot_identifier": "terraform.finalSnapshotIdentifier"
          },
          "stateDefaults": {
            "skip_final_snapshot": true
          }
        },
        "schema": {
          "$ref": "#/definitions/dbCluster"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbCluster"
            },
            {
              "type": "object",
              "required": [
                "DBClusterIdentifier"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbCluster"
            },
            {
              "type": "object",
              "properties": {
                "DBClusterIdentifier": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "dbClusterParameterGroup": {
        "title": "DB Cluster Parameter Group",
        "icon": "fal-tasks",
        "description": "DB Cluster Parameter Group resource in AWS RDS service.",
        "parent": "#/resource/types/rds",
        "category": "turbot#/resource/categories/database",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.DBClusterParameterGroupName }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:rds:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:cluster-pg:{{ $.DBClusterParameterGroupName }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "DBClusterParameterGroupName": "default.aurora5.6",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "default.aurora5.6",
              "akas": [
                "arn:aws:rds:us-east-1:123456789012:cluster-pg:default.aurora5.6"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012"
            }
          }
        ],
        "terraform": {
          "type": "aws_rds_cluster_parameter_group",
          "stateIdTemplate": "{{ $.DBClusterParameterGroupName }}",
          "propertyMap": {
            "name": "DBClusterParameterGroupName"
          }
        },
        "schema": {
          "$ref": "#/definitions/dbClusterParameterGroup"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbClusterParameterGroup"
            },
            {
              "type": "object",
              "required": [
                "DBClusterParameterGroupName"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbClusterParameterGroup"
            },
            {
              "type": "object",
              "properties": {
                "DBClusterParameterGroupName": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "dbClusterSnapshotManual": {
        "title": "DB Cluster Snapshot [Manual]",
        "icon": "fal-archive",
        "description": "DB Cluster Manual Snapshot resource in AWS RDS service.",
        "parent": "#/resource/types/rds",
        "category": "turbot#/resource/categories/storageObject",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.DBClusterSnapshotIdentifier }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:rds:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:cluster-snapshot:{{ $.DBClusterSnapshotIdentifier }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "DBClusterSnapshotIdentifier": "test01",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 111666065714,
                    "regionName": "ap-south-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "test01",
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:cluster-snapshot:test01"
              ],
              "resourceParentAka": "arn:aws::ap-south-1:111666065714"
            }
          }
        ],
        "terraform": {
          "type": "aws_db_cluster_snapshot",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.DBClusterSnapshotIdentifier }}",
          "propertyMap": {
            "db_cluster_snapshot_identifier": "DBClusterSnapshotIdentifier"
          }
        },
        "schema": {
          "$ref": "#/definitions/dbClusterSnapshotManual"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbClusterSnapshotManual"
            },
            {
              "type": "object",
              "required": [
                "DBClusterSnapshotIdentifier"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbClusterSnapshotManual"
            },
            {
              "type": "object",
              "properties": {
                "DBClusterSnapshotIdentifier": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "dbInstance": {
        "title": "DB Instance",
        "icon": "fal-database",
        "description": "DB Instance resource in AWS RDS service.",
        "parent": "#/resource/types/rds",
        "category": "turbot#/resource/categories/databaseServer",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.DBInstanceIdentifier }}",
          "akas": "- {% if $.DBInstanceArn %}\"{{ $.DBInstanceArn }}\"{% else %}\"arn:{{ $.turbot.custom.aws.partition }}:rds:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:db:{{ $.DBInstanceIdentifier }}\"{% endif %}\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "DBInstanceIdentifier": "turbot-rds-test-1-1",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 111666065714,
                    "regionName": "ap-south-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "turbot-rds-test-1-1",
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:db:turbot-rds-test-1-1"
              ],
              "resourceParentAka": "arn:aws::ap-south-1:111666065714"
            }
          }
        ],
        "terraform": {
          "type": "aws_db_instance",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.DBInstanceIdentifier }}",
          "propertyMap": {
            "name": "DBName",
            "arn": "DBInstanceArn"
          },
          "metadataMap": {
            "password": "terraform.password",
            "skip_final_snapshot": "terraform.skipFinalSnapshot",
            "final_snapshot_identifier": "terraform.finalSnapshotIdentifier"
          },
          "stateDefaults": {
            "skip_final_snapshot": true
          }
        },
        "schema": {
          "$ref": "#/definitions/dbInstance"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbInstance"
            },
            {
              "type": "object",
              "required": [
                "DBInstanceIdentifier"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbInstance"
            },
            {
              "type": "object",
              "properties": {
                "DBInstanceIdentifier": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "dbParameterGroup": {
        "title": "DB Parameter Group",
        "icon": "fal-tasks",
        "description": "DB Parameter Group resource in AWS RDS service.",
        "parent": "#/resource/types/rds",
        "category": "turbot#/resource/categories/database",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "akas": "- {% if $.DBParameterGroupArn %}\"{{ $.DBParameterGroupArn }}\"{% else %}\"arn:{{ $.turbot.custom.aws.partition }}:rds:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:pg:{{ $.DBParameterGroupName }}\"{% endif %}\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}",
          "title": "{{$.DBParameterGroupName}}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "DBParameterGroupName": "default.aurora5.6",
              "DBParameterGroupArn": "arn:aws:rds:us-east-1:123456789012:pg:default.aurora5.6",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:rds:us-east-1:123456789012:pg:default.aurora5.6"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012",
              "title": "default.aurora5.6"
            }
          }
        ],
        "terraform": {
          "type": "aws_db_parameter_group",
          "stateIdTemplate": "{{ $.DBParameterGroupName }}",
          "propertyMap": {
            "name": "DBParameterGroupName",
            "arn": "DBParameterGroupArn"
          }
        },
        "schema": {
          "$ref": "#/definitions/dbParameterGroup"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbParameterGroup"
            },
            {
              "type": "object",
              "required": [
                "DBParameterGroupName"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbParameterGroup"
            },
            {
              "type": "object",
              "properties": {
                "DBParameterGroupName": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "dbSnapshotManual": {
        "title": "DB Snapshot [Manual]",
        "icon": "fal-archive",
        "description": "DB Snapshot [Manual] resource in AWS RDS service.",
        "parent": "#/resource/types/rds",
        "category": "turbot#/resource/categories/storageObject",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.DBSnapshotIdentifier }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:rds:{{ $.turbot.custom.aws.regionName }}:{{$.turbot.custom.aws.accountId}}:snapshot:{{ $.DBSnapshotIdentifier }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "DBSnapshotIdentifier": "my-snap",
              "DBInstanceIdentifier": "my-db",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 111666065714,
                    "regionName": "us-west-2",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "my-snap",
              "akas": [
                "arn:aws:rds:us-west-2:111666065714:snapshot:my-snap"
              ],
              "resourceParentAka": "arn:aws::us-west-2:111666065714"
            }
          }
        ],
        "terraform": {
          "type": "aws_db_snapshot",
          "calculatedAka": true,
          "stateIdTemplate": "{{ $.DBSnapshotIdentifier }}",
          "propertyMap": {
            "db_snapshot_identifier": "DBSnapshotIdentifier",
            "db_instance_identifier": "DBInstanceIdentifier"
          }
        },
        "schema": {
          "$ref": "#/definitions/dbSnapshotManual"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbSnapshotManual"
            },
            {
              "type": "object",
              "required": [
                "DBSnapshotIdentifier",
                "DBInstanceIdentifier"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbSnapshotManual"
            },
            {
              "type": "object",
              "properties": {
                "DBSnapshotIdentifier": {
                  "type": "null"
                },
                "DBInstanceIdentifier": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "optionGroup": {
        "title": "Option Group",
        "icon": "fal-object-group",
        "description": "Option Group resource in AWS RDS service.",
        "parent": "#/resource/types/rds",
        "category": "turbot#/resource/categories/database",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "title": "{{ $.OptionGroupName }}",
          "akas": "-  {% if $.OptionGroupArn %}\"{{ $.OptionGroupArn }}\"{% else %}\"arn:{{ $.turbot.custom.aws.partition }}:rds:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:og:{{ $.OptionGroupName }}\"{% endif %}\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "OptionGroupName": "default:aurora-5-6",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 111666065714,
                    "regionName": "ap-south-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "default:aurora-5-6",
              "akas": [
                "arn:aws:rds:ap-south-1:111666065714:og:default:aurora-5-6"
              ],
              "resourceParentAka": "arn:aws::ap-south-1:111666065714"
            }
          }
        ],
        "terraform": {
          "type": "aws_db_option_group",
          "stateIdTemplate": "{{ $.OptionGroupName }}",
          "propertyMap": {
            "name": "OptionGroupName"
          }
        },
        "schema": {
          "$ref": "#/definitions/rdsOptionGroup"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/rdsOptionGroup"
            },
            {
              "type": "object",
              "required": [
                "OptionGroupName"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/rdsOptionGroup"
            },
            {
              "type": "object",
              "properties": {
                "OptionGroupName": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "rds": {
        "title": "RDS",
        "icon": "fal-database",
        "description": "AWS RDS Service.",
        "parent": "aws#/resource/types/aws",
        "category": "turbot#/resource/categories/cloudService",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "akas": "- \"arn:aws:rds:{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}\"\n",
          "resourceParentAka": "arn:aws::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}",
          "title": "RDS"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - All data provided",
            "input": {
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:rds:us-east-1:123456789012"
              ],
              "resourceParentAka": "arn:aws::us-east-1:123456789012",
              "title": "RDS"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/rds"
        }
      },
      "subnetGroup": {
        "title": "Subnet Group",
        "icon": "fal-object-group",
        "description": "Subnet Group resource in AWS RDS service.",
        "parent": "#/resource/types/rds",
        "category": "turbot#/resource/categories/database",
        "resourceParents": "aws#/resource/types/region",
        "metadataTemplates": {
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:rds:{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}:subgrp:{{$.DBSubnetGroupName}}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}::{{$.turbot.custom.aws.regionName}}:{{$.turbot.custom.aws.accountId}}",
          "title": "{{$.DBSubnetGroupName}}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "DBSubnetGroupName": "default",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 111666065714,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:rds:us-east-1:111666065714:subgrp:default"
              ],
              "resourceParentAka": "arn:aws::us-east-1:111666065714",
              "title": "default"
            }
          }
        ],
        "terraform": {
          "type": "aws_db_subnet_group",
          "stateIdTemplate": "{{ $.DBSubnetGroupName }}",
          "propertyMap": {
            "name": "DBSubnetGroupName"
          }
        },
        "schema": {
          "$ref": "#/definitions/dbSubnetGroup"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbSubnetGroup"
            },
            {
              "type": "object",
              "required": [
                "DBSubnetGroupName"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/dbSubnetGroup"
            },
            {
              "type": "object",
              "properties": {
                "DBSubnetGroupName": {
                  "type": "null"
                }
              }
            }
          ]
        }
      }
    }
  },
  "permission": {
    "types": {
      "rds": {
        "title": "RDS",
        "parent": "aws#/permission/types/aws",
        "targets": [
          "aws#/resource/types/account"
        ],
        "category": "turbot#/control/categories/iam"
      }
    }
  },
  "build": "20210423165359613"
}