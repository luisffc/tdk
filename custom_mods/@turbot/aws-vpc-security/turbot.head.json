{
  "$id": "tmod:@turbot/aws-vpc-security",
  "title": "@turbot/aws-vpc-security",
  "author": "Turbot HQ, Inc",
  "version": "5.5.1",
  "license": "For LICENSE see https://turbot.com/license",
  "peerDependencies": {
    "@turbot/aws": "^5.0.0",
    "@turbot/turbot": "^5.22.0",
    "@turbot/turbot-iam": "^5.1.0",
    "@turbot/aws-iam": "^5.1.0",
    "@turbot/aws-ec2": "^5.0.0",
    "@turbot/aws-kms": "^5.0.0",
    "@turbot/aws-vpc-core": "^5.0.0"
  },
  "scripts": {
    "prepack": "./build.sh"
  },
  "data": [
    {
      "permission": "ec2:AcceptTransitGatewayPeeringAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AcceptTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment|transitGatewayAttachmentCrossAccount",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AcceptVpcEndpointConnections",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AcceptVpcPeeringConnection",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AllocateAddress",
      "grant": "Admin",
      "resourceType": "elasticIp",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can allocate new elastic IP addresses; this is considered safe as the proper routing still needs to be configured for public access."
    },
    {
      "permission": "ec2:AssociateAddress",
      "grant": "Admin",
      "resourceType": "elasticIp",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can associate elastic IP addresses; this is considered safe as the proper routing still needs to be configured for public access."
    },
    {
      "permission": "ec2:AssociateDhcpOptions",
      "grant": "Whitelist",
      "resourceType": "dhcpOptions|vpc",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsDhcpOptionsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AssociateRouteTable",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AssociateSubnetCidrBlock",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AssociateTransitGatewayRouteTable",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AssociateVpcCidrBlock",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AttachClassicLinkVpc",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:AttachInternetGateway",
      "grant": "Whitelist",
      "resourceType": "internetGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsIgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AttachVpnGateway",
      "grant": "Whitelist",
      "resourceType": "vpnGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AuthorizeSecurityGroupEgress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:AuthorizeSecurityGroupIngress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateCustomerGateway",
      "grant": "Whitelist",
      "resourceType": "customerGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsCgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateDefaultSubnet",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateDefaultVpc",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateDhcpOptions",
      "grant": "Whitelist",
      "resourceType": "dhcpOptions",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsDhcpOptionsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateEgressOnlyInternetGateway",
      "grant": "Whitelist",
      "resourceType": "egressOnlyInternetGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateFlowLogs",
      "grant": "Whitelist",
      "resourceType": "flowLog",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsFlowLogsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateInternetGateway",
      "grant": "Whitelist",
      "resourceType": "internetGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsIgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateLocalGatewayRoute",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateLocalGatewayRouteTableVpcAssociation",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateNatGateway",
      "grant": "Whitelist",
      "resourceType": "natGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNatGatewayAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateNetworkAcl",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateNetworkAclEntry",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateRoute",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateRoute",
      "grant": "Whitelist",
      "resourceType": "route",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateRouteTable",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateSecurityGroup",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateSubnet",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateTags",
      "grant": "Operator",
      "resourceType": "vpc|subnet|elasticIp|flowLog|routeTable|securityGroup|internetGateway|vpnGateway|vpcEndpoint|natGateway|dhcpOptions|networkAcl|vpcPeeringConnection|transitGateway|customerGateway|vpnConnection|vpcEndpointService|transitGatewayAttachment|transitGatewayRouteTable|transitGatewayAttachmentCrossAccount",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Tags are low risk for management in Turbot since accounts are the isolation boundary; not tags."
    },
    {
      "permission": "ec2:CreateTransitGateway",
      "grant": "Admin",
      "resourceType": "transitGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateTransitGatewayPeeringAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateTransitGatewayRouteTable",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpc",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpcEndpoint",
      "grant": "Whitelist",
      "resourceType": "vpcEndpoint",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpcEndpointConnectionNotification",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "User is required to also have AWS/SNS/Operator role assigned for this action."
    },
    {
      "permission": "ec2:CreateVpcEndpointServiceConfiguration",
      "grant": "Whitelist",
      "resourceType": "vpcEndpointService",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "Allows cross-account access."
    },
    {
      "permission": "ec2:CreateVpcPeeringConnection",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpnConnection",
      "grant": "Whitelist",
      "resourceType": "vpnConnection|transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpnConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpnConnectionRoute",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpnConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:CreateVpnGateway",
      "grant": "Whitelist",
      "resourceType": "vpnGateway",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteCustomerGateway",
      "grant": "Whitelist",
      "resourceType": "customerGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsCgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteDhcpOptions",
      "grant": "Whitelist",
      "resourceType": "dhcpOptions",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsDhcpOptionsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteEgressOnlyInternetGateway",
      "grant": "Whitelist",
      "resourceType": "egressOnlyInternetGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteFlowLogs",
      "grant": "Whitelist",
      "resourceType": "flowLog",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsFlowLogsAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteInternetGateway",
      "grant": "Whitelist",
      "resourceType": "internetGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsIgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteLocalGatewayRoute",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
      "grant": "Admin",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteNatGateway",
      "grant": "Whitelist",
      "resourceType": "natGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNatGatewayAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteNetworkAcl",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteNetworkAclEntry",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteRoute",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteRoute",
      "grant": "Whitelist",
      "resourceType": "route",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteRouteTable",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteSecurityGroup",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteSubnet",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTags",
      "grant": "Operator",
      "resourceType": "vpc|subnet|elasticIp|flowLog|routeTable|securityGroup|internetGateway|vpnGateway|vpcEndpoint|natGateway|dhcpOptions|networkAcl|vpcPeeringConnection|transitGateway|customerGateway|vpnConnection|vpcEndpointService|transitGatewayAttachment|transitGatewayRouteTable|transitGatewayAttachmentCrossAccount",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Tags are low risk for management in Turbot since accounts are the isolation boundary; not tags. Most deletions are denied to operator but tags are a low risk management activity even for deletion."
    },
    {
      "permission": "ec2:DeleteTransitGateway",
      "grant": "Admin",
      "resourceType": "transitGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTransitGatewayPeeringAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTransitGatewayRouteTable",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment|transitGatewayAttachmentCrossAccount",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpc",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpcEndpointConnectionNotifications",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "User is required to also have AWS/SNS/Operator role assigned for this action."
    },
    {
      "permission": "ec2:DeleteVpcEndpointServiceConfigurations",
      "grant": "Whitelist",
      "resourceType": "vpcEndpointService",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "Allows cross-account access."
    },
    {
      "permission": "ec2:DeleteVpcEndpoints",
      "grant": "Whitelist",
      "resourceType": "vpcEndpoint",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpcPeeringConnection",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpnConnection",
      "grant": "Whitelist",
      "resourceType": "vpnConnection|transitGatewayAttachment",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpnConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpnConnectionRoute",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpnConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DeleteVpnGateway",
      "grant": "Whitelist",
      "resourceType": "vpnGateway",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DescribeAddresses",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeCustomerGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeDhcpOptions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeEgressOnlyInternetGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeFlowLogs",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeInternetGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayRouteTables",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGatewayVirtualInterfaces",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeLocalGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeMovingAddresses",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeNatGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeNetworkAcls",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribePrefixLists",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeRouteTables",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSecurityGroupReferences",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSecurityGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeStaleSecurityGroups",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeSubnets",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeTags",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcAttribute",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcClassicLink",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcClassicLinkDnsSupport",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointConnectionNotifications",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointConnections",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointServiceConfigurations",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointServicePermissions",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpointServices",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcEndpoints",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcPeeringConnection",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcPeeringConnections",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpcs",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpnConnections",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DescribeVpnGateways",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DetachInternetGateway",
      "grant": "Whitelist",
      "resourceType": "internetGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsIgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DetachVpnGateway",
      "grant": "Whitelist",
      "resourceType": "vpnGateway",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVgwAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DisableVgwRoutePropagation",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DisableVpcClassicLink",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:DisableVpcClassicLinkDnsSupport",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:DisassociateAddress",
      "grant": "Admin",
      "resourceType": "elasticIp",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can disassociate elastic IP addresses."
    },
    {
      "permission": "ec2:DisassociateRouteTable",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DisassociateSubnetCidrBlock",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:DisassociateTransitGatewayRouteTable",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:DisassociateVpcCidrBlock",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:EnableTransitGatewayRouteTablePropagation",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:EnableVgwRoutePropagation",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:EnableVpcClassicLink",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:EnableVpcClassicLinkDnsSupport",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:ExportTransitGatewayRoutes",
      "grant": "Admin",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifySubnetAttribute",
      "grant": "Whitelist",
      "resourceType": "subnet",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSubnetAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment|transitGatewayAttachmentCrossAccount",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpcAttribute",
      "grant": "Whitelist",
      "resourceType": "vpc",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpcEndpoint",
      "grant": "Whitelist",
      "resourceType": "vpcEndpoint",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpcEndpointConnectionNotification",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "User is required to also have AWS/SNS/Operator role assigned for this action."
    },
    {
      "permission": "ec2:ModifyVpcEndpointServiceConfiguration",
      "grant": "Whitelist",
      "resourceType": "vpcEndpointService",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "Allows cross-account access."
    },
    {
      "permission": "ec2:ModifyVpcEndpointServicePermissions",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": "Allows cross-account access."
    },
    {
      "permission": "ec2:ModifyVpcPeeringConnectionOptions",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpcTenancy",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsVpcAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ModifyVpnConnection",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Create",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Allows to create the transit gateway attachment via vpn connection."
    },
    {
      "permission": "ec2:ModifyVpnConnection",
      "grant": "Admin",
      "resourceType": "vpnConnection",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:MoveAddressToVpc",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:RejectTransitGatewayPeeringAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:RejectTransitGatewayVpcAttachment",
      "grant": "Admin",
      "resourceType": "transitGatewayAttachment|transitGatewayAttachmentCrossAccount",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:RejectVpcEndpointConnections",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsEndpointAdministration",
      "help": ""
    },
    {
      "permission": "ec2:RejectVpcPeeringConnection",
      "grant": "Whitelist",
      "resourceType": "vpcPeeringConnection",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsPeeringConnectionAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ReleaseAddress",
      "grant": "Admin",
      "resourceType": "elasticIp",
      "operationType": "Delete",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "Admins can release elastic IP addresses."
    },
    {
      "permission": "ec2:ReplaceNetworkAclAssociation",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ReplaceNetworkAclEntry",
      "grant": "Whitelist",
      "resourceType": "networkAcl",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsNetworkAclAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ReplaceRoute",
      "grant": "Whitelist",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:ReplaceRouteTableAssociation",
      "grant": "Whitelist",
      "resourceType": "routeTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsRouteTableAdministration",
      "help": ""
    },
    {
      "permission": "ec2:RestoreAddressToClassic",
      "grant": "None",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": "EC2 classic should not be used"
    },
    {
      "permission": "ec2:RevokeSecurityGroupEgress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:RevokeSecurityGroupIngress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": ""
    },
    {
      "permission": "ec2:SearchLocalGatewayRoutes",
      "grant": "Metadata",
      "resourceType": "",
      "operationType": "",
      "fullCmdbUpdate": "",
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:SearchTransitGatewayRoutes",
      "grant": "Metadata",
      "resourceType": "transitGatewayRouteTable",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "",
      "help": ""
    },
    {
      "permission": "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": "Admin can update the description field only."
    },
    {
      "permission": "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
      "grant": "Whitelist",
      "resourceType": "securityGroup",
      "operationType": "Update",
      "fullCmdbUpdate": true,
      "eventPermission": "",
      "dependency": "vpcServicePermissionsLevelsSecurityGroupAdministration",
      "help": "Admin can update the description field only."
    }
  ],
  "action": {
    "types": {
      "networkAclDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/networkAcl",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS VPC network acl from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/networkAcl/delete",
          "bundle": "functions/networkAcl/delete/dist/index.zip",
          "memory": 1024,
          "hash": "5d00a0e231"
        }
      },
      "networkAclRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS VPC service Network ACL resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Network ACL resources in the CMDB.\n",
        "events": [
          "ec2:CreateNetworkAcl",
          "ec2:CreateNetworkAclEntry",
          "ec2:CreateTags",
          "ec2:DeleteNetworkAcl",
          "ec2:DeleteNetworkAclEntry",
          "ec2:DeleteTags",
          "ec2:ReplaceNetworkAclAssociation",
          "ec2:ReplaceNetworkAclEntry"
        ]
      },
      "networkAclUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Update the tags for AWS VPC network acl tags.",
        "function": {
          "src": "functions/networkAcl/updateTags",
          "bundle": "functions/networkAcl/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "53f085d288"
        }
      },
      "flowLogDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/flowLog",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS VPC flow log from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/flowLog/delete",
          "bundle": "functions/flowLog/delete/dist/index.zip",
          "memory": 1024,
          "hash": "926ac0c308"
        }
      },
      "flowLogRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS VPC service Flow Log resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Flow Log resources in the CMDB.\n",
        "events": [
          "ec2:CreateFlowLogs",
          "ec2:CreateTags",
          "ec2:DeleteFlowLogs",
          "ec2:DeleteTags"
        ]
      },
      "flowLogUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Update the tags for AWS VPC flow log tags.",
        "function": {
          "src": "functions/flowLog/updateTags",
          "bundle": "functions/flowLog/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "dd5e51833f"
        }
      },
      "securityGroupDelete": {
        "title": "Delete",
        "icon": "fal-trash-alt",
        "parent": "#/resource/types/securityGroup",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "category": "turbot#/control/categories/other",
        "description": "Delete the AWS VPC security group from the cloud provider, as well as the CMDB.",
        "function": {
          "src": "functions/securityGroup/delete",
          "bundle": "functions/securityGroup/delete/dist/index.zip",
          "memory": 1024,
          "hash": "e60e043895"
        }
      },
      "securityGroupRevokeUnapprovedRules": {
        "title": "Revoke Unapproved Rules",
        "icon": "fal-trash-alt",
        "description": "Revoke the unapproved ingress or egress rules from the VPC security group.",
        "parent": "#/resource/types/securityGroup",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/other",
        "function": {
          "src": "functions/securityGroup/revokeUnapprovedRules",
          "bundle": "functions/securityGroup/revokeUnapprovedRules/dist/index.zip",
          "memory": 1024,
          "hash": "3285d70187"
        }
      },
      "securityGroupRouter": {
        "title": "Router",
        "icon": "fal-random",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/cmdb",
        "maintenanceRestriction": "anytime",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Process events for AWS VPC service Security Group resources.\n\nThe router receives events from the event handler and creates, updates, or deletes Security Group resources in the CMDB.\n",
        "events": [
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CreateSecurityGroup",
          "ec2:CreateTags",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteTags",
          "ec2:RevokeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
          "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
        ]
      },
      "securityGroupUpdateTags": {
        "title": "Update Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Update the tags for AWS VPC security group tags.",
        "function": {
          "src": "functions/securityGroup/updateTags",
          "bundle": "functions/securityGroup/updateTags/dist/index.zip",
          "memory": 1024,
          "hash": "53f085d288"
        }
      }
    }
  },
  "control": {
    "types": {
      "networkAclActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Take an action when an AWS VPC network acl is not active based on the\n`AWS > VPC > Network ACL > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Network ACL > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkAclActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/networkAclCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "networkAclApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Take an action when an AWS VPC network acl is not approved based on `AWS > VPC > Network ACL > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkAclApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/networkAclCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "networkAclCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Record and synchronize details for the AWS VPC network acl into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Network ACL > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkAclCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/networkAcl/cmdb",
          "bundle": "functions/networkAcl/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "429a37d031"
        }
      },
      "networkAclConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Maintain AWS > VPC > Network ACL configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "networkAclDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws-vpc-core#/resource/types/vpc"
        ],
        "description": "Discover all AWS VPC network acl resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > VPC > Network ACL > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkAclCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/networkAclCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/networkAcl/discovery",
          "bundle": "functions/networkAcl/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "d7c7dafad2"
        }
      },
      "networkAclTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/networkAcl",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Take an action when an AWS VPC network acl tags is not updated based on the `AWS > VPC > Network ACL > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > VPC > Network ACL > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkAclTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "networkAclUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS VPC network acl resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > VPC > Network ACL > Usage` policy, and set the limit with the `AWS > VPC > Network ACL > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/networkAclUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "flowLogActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Take an action when an AWS VPC flow log is not active based on the\n`AWS > VPC > Flow Log > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Flow Log > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/flowLogActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/flowLogCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "flowLogApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Take an action when an AWS VPC flow log is not approved based on `AWS > VPC > Flow Log > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/flowLogApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/flowLogCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "flowLogCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Record and synchronize details for the AWS VPC flow log into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Flow Log > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/flowLogCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/flowLog/cmdb",
          "bundle": "functions/flowLog/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "2719746d67"
        }
      },
      "flowLogConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Maintain AWS > VPC > Flow Log configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "flowLogDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws-vpc-core#/resource/types/subnet",
          "aws-vpc-core#/resource/types/vpc",
          "aws-ec2#/resource/types/networkInterface"
        ],
        "description": "Discover all AWS VPC flow log resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > VPC > Flow Log > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/flowLogCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/flowLogCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/flowLog/discovery",
          "bundle": "functions/flowLog/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "35f48bab52"
        }
      },
      "flowLogTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/flowLog",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Take an action when an AWS VPC flow log tags is not updated based on the `AWS > VPC > Flow Log > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > VPC > Flow Log > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/flowLogTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "flowLogUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS VPC flow log resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > VPC > Flow Log > Usage` policy, and set the limit with the `AWS > VPC > Flow Log > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/flowLogUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "securityGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Take an action when an AWS VPC security group is not active based on the\n`AWS > VPC > Security Group > Active > *` policies.\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Security Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n\nNote the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/securityGroupActive",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Active set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/securityGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD"
          }
        ]
      },
      "securityGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Take an action when an AWS VPC security group is not approved based on `AWS > VPC > Security Group > Approved > * policies`.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/securityGroupApproved",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Approved set to Skip"
          },
          {
            "control": {
              "uri": "#/control/types/securityGroupCmdb",
              "states": [
                "tbd"
              ]
            },
            "state": "tbd",
            "reason": "CMDB control is in TBD state"
          }
        ]
      },
      "securityGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Record and synchronize details for the AWS VPC security group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Security Group > Regions` policy, the CMDB control will delete the resource from the CMDB. (**Note**: Setting CMDB to Skip will also pause these changes.)\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/securityGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          }
        ],
        "function": {
          "src": "functions/securityGroup/cmdb",
          "bundle": "functions/securityGroup/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "17662099d9"
        }
      },
      "securityGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Maintain AWS > VPC > Security Group configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "securityGroupDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "aws-vpc-core#/resource/types/vpc"
        ],
        "description": "Discover all AWS VPC security group resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > VPC > Security Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/securityGroupCmdb",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Skip"
          },
          {
            "policy": {
              "uri": "#/policy/types/securityGroupCmdb",
              "values": [
                "Enforce: Disabled"
              ]
            },
            "state": "skipped",
            "reason": "CMDB set to Enforce: Disabled"
          }
        ],
        "function": {
          "src": "functions/securityGroup/discovery",
          "bundle": "functions/securityGroup/discovery/dist/index.zip",
          "memory": 512,
          "timeout": 300,
          "hash": "a06679785e"
        }
      },
      "securityGroupEgressRules": {
        "title": "Egress Rules",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/other"
      },
      "securityGroupEgressRulesApproved": {
        "title": "Approved",
        "icon": "fal-coins",
        "description": "Configure Security Group Rules checking. This control defines whether to\nverify the security group egress rules are approved, as well as the\nsubsequent action to take on unapproved items. Rules for all `Approved`\npolicies will be compiled in `Approved > Compiled Rules` and then\nevaluated.\n\nIf set to `Enforce: Delete unapproved`, any unapproved rules will be\nrevoked from the security group.\n",
        "parent": "#/control/types/securityGroupEgressRules",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved"
      },
      "securityGroupIngressRules": {
        "title": "Ingress Rules",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/other"
      },
      "securityGroupIngressRulesApproved": {
        "title": "Approved",
        "icon": "fal-coins",
        "description": "Configure Security Group Rules checking. This control defines whether to\nverify the security group ingress rules are approved, as well as the\nsubsequent action to take on unapproved items. Rules for all `Approved`\npolicies will be compiled in `Approved > Compiled Rules` and then\nevaluated.\n\nIf set to `Enforce: Delete unapproved`, any unapproved rules will be\nrevoked from the security group.\n",
        "parent": "#/control/types/securityGroupIngressRules",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved"
      },
      "securityGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "category": "turbot#/control/categories/resourceTags",
        "parent": "#/resource/types/securityGroup",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Take an action when an AWS VPC security group tags is not updated based on the `AWS > VPC > Security Group > Tags > * policies`.\n\nIf the resource is not updated with the tags defined in `AWS > VPC > Security Group > Tags > Template`, this control raises an alarm and takes the defined enforcement action.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/securityGroupTags",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Tags set to skip"
          }
        ]
      },
      "securityGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The Usage control determines whether the number of AWS VPC security group resources exceeds the configured usage limit for this region.\n\nYou can configure the behavior of this control with the  `AWS > VPC > Security Group > Usage` policy, and set the limit with the `AWS > VPC > Security Group > Usage > Limit` policy.\n",
        "precheck": [
          {
            "policy": {
              "uri": "#/policy/types/securityGroupUsage",
              "values": [
                "Skip"
              ]
            },
            "state": "skipped",
            "reason": "Usage set to skip"
          }
        ]
      },
      "securityGroupRuleCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/securityGroupRule",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/securityGroupRule"
        ],
        "description": "Record and synchronize details for the AWS VPC security group rules into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to \"Enforce: Disabled\". (Note: Setting CMDB to Skip will also pause these changes.)\n",
        "function": {
          "src": "functions/securityGroupRule/cmdb",
          "bundle": "functions/securityGroupRule/cmdb/dist/index.zip",
          "memory": 512,
          "hash": "3f0ef83283"
        }
      },
      "securityGroupRuleConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/securityGroupRule",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/securityGroupRule"
        ],
        "description": "Maintain AWS > VPC  > Security Group Rule configuration\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "container": {
          "type": "tmod:@turbot/turbot#/container/types/factory"
        }
      },
      "securityGroupRuleDiscovery": {
        "title": "Discovery",
        "icon": "fab-searchengin",
        "parent": "#/resource/types/securityGroupRule",
        "category": "turbot#/control/categories/cmdbDiscovery",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Discover all AWS VPC security group rules resources and add them to the CMDB.\n\nThe [Discovery](https://turbot.com/v5/docs/concepts/guardrails/discovery) control is responsible for finding resources of a specific type. It periodically searches for new resources and saves them to the CMDB. Once discovered, resources are then responsible for tracking changes to themselves through the [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control.\n\nNote that Discovery and CMDB controls also use the Regions policy associated with the resource. If the region is not in `AWS > VPC > Security Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n",
        "function": {
          "src": "functions/securityGroupRule/discovery",
          "bundle": "functions/securityGroupRule/discovery/dist/index.zip",
          "memory": 512,
          "hash": "f61f2f87fd"
        }
      }
    }
  },
  "definitions": {
    "networkAclAssociationId": {
      "type": "string",
      "pattern": "^aclassoc-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "aclassoc-adf253e1"
        },
        {
          "input": "aclassoc-91f253dd"
        },
        {
          "description": "invalid - should always start with aclassoc",
          "input": "id-b61106d4",
          "expected": false
        },
        {
          "description": "invalid - too short",
          "input": "aclassoc-63a540",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "aclassoc-63a5400a63a5400a63a5400a",
          "expected": false
        }
      ]
    },
    "networkAclId": {
      "type": "string",
      "pattern": "^acl-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "acl-adf253e1"
        },
        {
          "input": "acl-91f253dd"
        },
        {
          "description": "invalid - should always start with acl",
          "input": "id-b61106d4",
          "expected": false
        },
        {
          "description": "invalid - too short",
          "input": "acl-63a540",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "acl-63a5400a63a5400a63a5400a",
          "expected": false
        }
      ]
    },
    "networkAclAssociation": {
      "type": "object",
      "properties": {
        "NetworkAclAssociationId": {
          "$ref": "#/definitions/networkAclAssociationId"
        },
        "NetworkAclId": {
          "$ref": "#/definitions/networkAclId"
        },
        "SubnetId": {
          "$ref": "aws-vpc-core#/definitions/subnetId"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "NetworkAclAssociationId": "aclassoc-aef253e2",
            "NetworkAclId": "acl-e07f269a",
            "SubnetId": "subnet-6ffa5241"
          }
        }
      ]
    },
    "portRange": {
      "type": "object",
      "properties": {
        "From": {
          "$ref": "aws-vpc-core#/definitions/fromPort"
        },
        "To": {
          "$ref": "aws-vpc-core#/definitions/toPort"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "From": 0,
            "To": 65535
          }
        }
      ]
    },
    "ruleAction": {
      "type": "string",
      "enum": [
        "allow",
        "deny"
      ],
      "tests": [
        {
          "input": "allow"
        },
        {
          "input": "deny"
        },
        {
          "description": "invalid - not in the list",
          "input": "hello123",
          "expected": false
        },
        {
          "description": "invalid - upper case",
          "input": "DENY",
          "expected": false
        },
        {
          "description": "invalid - array type provided",
          "input": [
            "allow",
            "deny"
          ],
          "expected": false
        }
      ]
    },
    "ruleNumber": {
      "type": "integer",
      "minimum": 1,
      "maximum": 32767,
      "tests": [
        {
          "input": 100
        },
        {
          "description": "minimum value",
          "input": 1
        },
        {
          "description": "maximum value",
          "input": 32766
        },
        {
          "description": "invalid - higher than the maximum",
          "input": 32768,
          "expected": false
        }
      ]
    },
    "networkAclEntry": {
      "type": "object",
      "properties": {
        "CidrBlock": {
          "$ref": "aws#/definitions/cidrBlock"
        },
        "Egress": {
          "$ref": "aws-vpc-core#/definitions/genericBoolean"
        },
        "Ipv6CidrBlock": {
          "$ref": "aws#/definitions/ipv6CidrBlock"
        },
        "PortRange": {
          "$ref": "#/definitions/portRange"
        },
        "Protocol": {
          "$ref": "aws-vpc-core#/definitions/baseString"
        },
        "RuleAction": {
          "$ref": "#/definitions/ruleAction"
        },
        "RuleNumber": {
          "$ref": "#/definitions/ruleNumber"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "CidrBlock": "0.0.0.0/0",
            "Egress": true,
            "Ipv6CidrBlock": "::/0",
            "PortRange": {
              "From": 0,
              "To": 65535
            },
            "RuleAction": "deny",
            "RuleNumber": 32766
          }
        }
      ]
    },
    "networkAcl": {
      "type": "object",
      "properties": {
        "Associations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkAclAssociation"
          }
        },
        "IsDefault": {
          "$ref": "aws-vpc-core#/definitions/genericBoolean"
        },
        "Entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkAclEntry"
          }
        },
        "NetworkAclId": {
          "$ref": "#/definitions/networkAclId"
        },
        "Tags": {
          "$ref": "aws#/definitions/tagList"
        },
        "VpcId": {
          "$ref": "aws-vpc-core#/definitions/vpcId"
        },
        "OwnerId": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/networkAclAka"
              }
            },
            "title": {
              "$ref": "#/definitions/networkAclId"
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "NetworkAclId": "acl-a12bad4c",
            "Associations": [
              {
                "NetworkAclAssociationId": "aclassoc-acf253e0",
                "NetworkAclId": "acl-e07f269a",
                "SubnetId": "subnet-add22093"
              },
              {
                "NetworkAclAssociationId": "aclassoc-91f253dd",
                "NetworkAclId": "acl-e07f269a",
                "SubnetId": "subnet-0a58f46d"
              }
            ],
            "IsDefault": true,
            "Entries": [
              {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "Protocol": -1,
                "RuleAction": "allow",
                "RuleNumber": 100
              }
            ],
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "title": "acl-a12bad4c",
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:network-acl/acl-adf253e1"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "invalid - Missing NetworkAclId",
          "input": {
            "Associations": [
              {
                "NetworkAclAssociationId": "aclassoc-acf253e0",
                "NetworkAclId": "acl-e07f269a",
                "SubnetId": "subnet-add22093"
              },
              {
                "NetworkAclAssociationId": "aclassoc-91f253dd",
                "NetworkAclId": "acl-e07f269a",
                "SubnetId": "subnet-0a58f46d"
              }
            ],
            "IsDefault": true,
            "Entries": [
              {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "Protocol": -1,
                "RuleAction": "allow",
                "RuleNumber": 100
              }
            ],
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "title": "acl-a12bad4c",
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:network-acl/acl-adf253e1"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "invalid - Missing turbot data",
          "input": {
            "NetworkAclId": "acl-a12bad4c",
            "Associations": [
              {
                "NetworkAclAssociationId": "aclassoc-acf253e0",
                "NetworkAclId": "acl-e07f269a",
                "SubnetId": "subnet-add22093"
              },
              {
                "NetworkAclAssociationId": "aclassoc-91f253dd",
                "NetworkAclId": "acl-e07f269a",
                "SubnetId": "subnet-0a58f46d"
              }
            ],
            "IsDefault": true,
            "Entries": [
              {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "Protocol": -1,
                "RuleAction": "allow",
                "RuleNumber": 100
              }
            ],
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "Facebook"
              }
            ],
            "VpcId": "vpc-27eb185d"
          }
        }
      ]
    },
    "networkAclAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:network-acl/acl-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-gov-east-1:111122223333:network-acl/acl-adf253e1"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:111122223333:network-acls/acl-adf253e1",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:use-east-1:111122223333:network-acls/acl-adf253e1",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:111122223333hhfh:network-acls/acl-adf253e1",
          "expected": false
        }
      ]
    },
    "flowLog": {
      "type": "object",
      "properties": {
        "CreationTime": {
          "$ref": "turbot#/definitions/isoTimestamp"
        },
        "DeliverLogsErrorMessage": {
          "type": "string"
        },
        "DeliverLogsPermissionArn": {
          "type": "string"
        },
        "DeliverLogsStatus": {
          "type": "string"
        },
        "FlowLogId": {
          "$ref": "#/definitions/flowLogId"
        },
        "FlowLogStatus": {
          "$ref": "#/definitions/flowLogStatus"
        },
        "LogGroupName": {
          "type": "string"
        },
        "LogDestinationType": {
          "type": "string"
        },
        "LogDestination": {
          "type": "string"
        },
        "TrafficType": {
          "$ref": "#/definitions/trafficType"
        },
        "VpcId": {
          "$ref": "aws-vpc-core#/definitions/vpcId"
        },
        "LogFormat": {
          "type": "string"
        },
        "ResourceId": {
          "type": "string"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/flowLogAka"
              }
            },
            "title": {
              "$ref": "#/definitions/flowLogId"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties",
          "input": {
            "FlowLogId": "fl-1234567890abcdef0",
            "FlowLogStatus": "ACTIVE",
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:flow-log/fl-1234567890abcdef0"
              ],
              "title": "fl-1234567890abcdef0",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "Invalid - missing FlowLogId",
          "input": {
            "FlowLogStatus": "ACTIVE",
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:flow-log/fl-1234567890abcdef0"
              ],
              "title": "fl-1234567890abcdef0",
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "Invalid - missing turbot data",
          "input": {
            "FlowLogId": "fl-1234567890abcdef0",
            "FlowLogStatus": "ACTIVE",
            "VpcId": "vpc-27eb185d"
          }
        }
      ]
    },
    "flowLogId": {
      "type": "string",
      "pattern": "^fl-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "base case",
          "input": "fl-1234567890abcdef0"
        },
        {
          "description": "invalid - incorrect type",
          "input": [],
          "expected": false
        }
      ]
    },
    "flowLogStatus": {
      "type": "string"
    },
    "flowLogAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:flow-log/fl-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:123456789012:flow-log/fl-1234567890abcdef0"
        }
      ]
    },
    "trafficType": {
      "type": "string"
    },
    "userIdGroupPairsDescription": {
      "type": "string",
      "maxLength": 255,
      "pattern": "^[a-zA-Z0-9.,+@=_{}!$*;[\\]()\\/:\\s-]*$",
      "tests": [
        {
          "input": "launch-wizard-1 created 2018-08-03T19:49:29.327+05:30"
        },
        {
          "input": "launch-wizard-2 created 2018-08-06T11:56:06.427+05:30"
        }
      ]
    },
    "userIdGroupPair": {
      "type": "object",
      "properties": {
        "Description": {
          "$ref": "#/definitions/userIdGroupPairsDescription"
        },
        "GroupId": {
          "$ref": "aws-vpc-core#/definitions/securityGroupId"
        },
        "GroupName": {
          "$ref": "aws-vpc-core#/definitions/baseString"
        },
        "UserId": {
          "$ref": "aws#/definitions/accountId"
        },
        "VpcId": {
          "$ref": "aws-vpc-core#/definitions/vpcId"
        },
        "VpcPeeringConnectionId": {
          "$ref": "aws-vpc-core#/definitions/vpcPeeringConnectionId"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "GroupId": "sg-cc7a7387",
            "UserId": 144683916086
          }
        }
      ]
    },
    "ipRanges": {
      "type": "object",
      "properties": {
        "CidrIp": {
          "oneOf": [
            {
              "$ref": "aws#/definitions/cidrBlock"
            },
            {
              "$ref": "aws-vpc-core#/definitions/securityGroupId"
            }
          ]
        },
        "Description": {
          "$ref": "#/definitions/userIdGroupPairsDescription"
        }
      },
      "tests": [
        {
          "description": "provided IP Cidrblock in CidrIp",
          "input": {
            "CidrIp": "0.0.0.0/0",
            "Description": "Hello123"
          }
        },
        {
          "description": "provided securityGroupId in CidrIp",
          "input": {
            "CidrIp": "sg-0b143ca14d7ae4255",
            "Description": "Hello123"
          }
        }
      ]
    },
    "ipv6Ranges": {
      "type": "object",
      "properties": {
        "CidrIpv6": {
          "oneOf": [
            {
              "$ref": "aws#/definitions/ipv6CidrBlock"
            },
            {
              "$ref": "aws-vpc-core#/definitions/securityGroupId"
            }
          ]
        },
        "Description": {
          "$ref": "#/definitions/userIdGroupPairsDescription"
        }
      },
      "tests": [
        {
          "description": "provided securitygroup in CidrIpv6",
          "input": {
            "CidrIpv6": "sg-094881c6fa6cea7dc",
            "Description": "Hello123"
          }
        },
        {
          "description": "provided IPv6 Cidrblock in CidrIpv6",
          "input": {
            "CidrIpv6": "::/0",
            "Description": "Hello123"
          }
        }
      ]
    },
    "prefixListId": {
      "type": "string",
      "pattern": "^pl-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "input": "pl-63a5400a"
        },
        {
          "input": "pl-63a5400a6fa6cea7d"
        },
        {
          "description": "invalid - should always start with pl",
          "input": "id-b61106d4",
          "expected": false
        },
        {
          "description": "invalid - too short",
          "input": "pl-63a540",
          "expected": false
        },
        {
          "description": "invalid - too long",
          "input": "pl-63a5400a63a5400a63a5400a",
          "expected": false
        }
      ]
    },
    "prefixListIds": {
      "type": "object",
      "properties": {
        "Description": {
          "$ref": "#/definitions/userIdGroupPairsDescription"
        },
        "PrefixListId": {
          "$ref": "#/definitions/prefixListId"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "Description": "Hello123",
            "PrefixListId": "pl-63a5400a"
          }
        }
      ]
    },
    "ipPermissions": {
      "type": "object",
      "properties": {
        "FromPort": {
          "$ref": "aws-vpc-core#/definitions/fromPort"
        },
        "UserIdGroupPairs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userIdGroupPair"
          }
        },
        "IpProtocol": {
          "$ref": "aws-vpc-core#/definitions/baseString"
        },
        "IpRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ipRanges"
          }
        },
        "Ipv6Ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ipv6Ranges"
          }
        },
        "PrefixListIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prefixListIds"
          }
        },
        "ToPort": {
          "$ref": "aws-vpc-core#/definitions/toPort"
        }
      },
      "tests": [
        {
          "description": "base case",
          "input": {
            "FromPort": 1433,
            "UserIdGroupPairs": [
              {
                "GroupId": "sg-cc7a7387",
                "UserId": 144683916086
              }
            ],
            "IpProtocol": "TCP",
            "IpRanges": [
              {
                "CidrIp": "0.0.0.0/0",
                "Description": "Hello123"
              }
            ],
            "Ipv6Ranges": [
              {
                "CidrIpv6": "::/0",
                "Description": "Hello123"
              }
            ],
            "PrefixListIds": [
              {
                "Description": "Hello123",
                "PrefixListId": "pl-63a5400a"
              }
            ],
            "ToPort": 1521
          }
        }
      ]
    },
    "securityGroup": {
      "type": "object",
      "properties": {
        "Description": {
          "$ref": "aws-vpc-core#/definitions/baseString"
        },
        "GroupId": {
          "$ref": "aws-vpc-core#/definitions/securityGroupId"
        },
        "GroupName": {
          "$ref": "aws-vpc-core#/definitions/baseString"
        },
        "IpPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ipPermissions"
          }
        },
        "IpPermissionsEgress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ipPermissions"
          }
        },
        "OwnerId": {
          "$ref": "aws#/definitions/accountId"
        },
        "Tags": {
          "$ref": "aws#/definitions/tagList"
        },
        "VpcId": {
          "$ref": "aws-vpc-core#/definitions/vpcId"
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/securityGroupAka"
              }
            },
            "title": {
              "$ref": "aws-vpc-core#/definitions/baseString"
            },
            "tags": {
              "$ref": "aws#/definitions/tagsMap"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                },
                "createTimestamp": {
                  "$ref": "turbot#/definitions/isoTimestamp"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties given",
          "input": {
            "GroupId": "sg-0b143ca14d7ae4255",
            "Description": "launch-wizard-2 created 2018-08-06T11:56:06.427+05:30",
            "GroupName": "launch-wizard-2",
            "IpPermissions": [
              {
                "FromPort": 22,
                "IpProtocol": "tcp",
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ],
                "Ipv6Ranges": [],
                "PrefixListIds": [],
                "ToPort": 22,
                "UserIdGroupPairs": []
              }
            ],
            "OwnerId": 144683916086,
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:security-group/sg-0b143ca14d7ae4255"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "Invalid - turbot property missing",
          "input": {
            "GroupId": "sg-0b143ca14d7ae4255",
            "Description": "launch-wizard-2 created 2018-08-06T11:56:06.427+05:30",
            "GroupName": "launch-wizard-2",
            "IpPermissions": [
              {
                "FromPort": 22,
                "IpProtocol": "tcp",
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ],
                "Ipv6Ranges": [],
                "PrefixListIds": [],
                "ToPort": 22,
                "UserIdGroupPairs": []
              }
            ],
            "OwnerId": 144683916086,
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "VpcId": "vpc-27eb185d"
          }
        },
        {
          "description": "Invalid - groupname property missing",
          "input": {
            "GroupId": "sg-0b143ca14d7ae4255",
            "Description": "launch-wizard-2 created 2018-08-06T11:56:06.427+05:30",
            "IpPermissions": [
              {
                "FromPort": 22,
                "IpProtocol": "tcp",
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ],
                "Ipv6Ranges": [],
                "PrefixListIds": [],
                "ToPort": 22,
                "UserIdGroupPairs": []
              }
            ],
            "OwnerId": 144683916086,
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:security-group/sg-0b143ca14d7ae4255"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "Invalid - groupId property missing",
          "input": {
            "Description": "launch-wizard-2 created 2018-08-06T11:56:06.427+05:30",
            "GroupName": "launch-wizard-2",
            "IpPermissions": [
              {
                "FromPort": 22,
                "IpProtocol": "tcp",
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ],
                "Ipv6Ranges": [],
                "PrefixListIds": [],
                "ToPort": 22,
                "UserIdGroupPairs": []
              }
            ],
            "OwnerId": 144683916086,
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "VpcId": "vpc-27eb185d",
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:security-group/sg-0b143ca14d7ae4255"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        },
        {
          "description": "Invalid - vpcid property missing",
          "input": {
            "GroupId": "sg-0b143ca14d7ae4255",
            "Description": "launch-wizard-2 created 2018-08-06T11:56:06.427+05:30",
            "GroupName": "launch-wizard-2",
            "IpPermissions": [
              {
                "FromPort": 22,
                "IpProtocol": "tcp",
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ],
                "Ipv6Ranges": [],
                "PrefixListIds": [],
                "ToPort": 22,
                "UserIdGroupPairs": []
              }
            ],
            "OwnerId": 144683916086,
            "Tags": [
              {
                "Key": "Env",
                "Value": "Test"
              },
              {
                "Key": "App",
                "Value": "turbot"
              }
            ],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:security-group/sg-0b143ca14d7ae4255"
              ],
              "tags": {
                "Env": "Test",
                "App": "Facebook"
              },
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1"
                }
              }
            }
          }
        }
      ]
    },
    "securityGroupAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:security-group/sg-[0-9a-f]{8}(?:[0-9a-f]{9})?$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:111122223333:security-group/sg-0b143ca14d7ae4255"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:111122223333:securityGroup/sg-cc7a7387",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:usa-east-1:111122223333:security-group/sg-cc7a7387",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:111122223333hhfh:security-group/sg-cc7a7387",
          "expected": false
        }
      ]
    },
    "securityGroupRule": {
      "type": "object",
      "properties": {
        "GroupId": {
          "$ref": "aws-vpc-core#/definitions/securityGroupId"
        },
        "GroupName": {
          "$ref": "aws-vpc-core#/definitions/baseString"
        },
        "FromPort": {
          "$ref": "aws-vpc-core#/definitions/fromPort"
        },
        "ToPort": {
          "$ref": "aws-vpc-core#/definitions/toPort"
        },
        "IpProtocol": {
          "$ref": "aws-vpc-core#/definitions/baseString"
        },
        "CidrBlock": {
          "oneOf": [
            {
              "$ref": "aws#/definitions/cidrBlock"
            },
            {
              "type": "null"
            }
          ]
        },
        "Ipv6CidrBlock": {
          "oneOf": [
            {
              "$ref": "aws#/definitions/ipv6CidrBlock"
            },
            {
              "type": "null"
            }
          ]
        },
        "UserIdGroupPair": {
          "oneOf": [
            {
              "$ref": "aws-vpc-core#/definitions/securityGroupId"
            },
            {
              "type": "null"
            }
          ]
        },
        "PrefixListIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/prefixListIds"
          }
        },
        "turbot": {
          "type": "object",
          "properties": {
            "akas": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/securityGroupRuleAka"
              }
            },
            "title": {
              "$ref": "aws-vpc-core#/definitions/baseString"
            },
            "custom": {
              "type": "object",
              "properties": {
                "aws": {
                  "$ref": "aws#/definitions/awsMetadata"
                }
              }
            }
          }
        }
      },
      "additionalProperties": true,
      "tests": [
        {
          "description": "Valid - All properties given",
          "input": {
            "GroupId": "sg-0b143ca14d7ae4255",
            "GroupName": "launch-wizard-2",
            "Type": "ingress",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "IpRanges": [
              {
                "CidrIp": "0.0.0.0/0"
              }
            ],
            "Ipv6Ranges": [],
            "PrefixListIds": [],
            "ToPort": 22,
            "UserIdGroupPairs": [],
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:security-group/sg-0b143ca14d7ae4255:abcd1234"
              ],
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1",
                  "partition": "aws"
                }
              }
            }
          }
        },
        {
          "description": "Invalid - groupname property missing",
          "input": {
            "GroupId": "sg-0b143ca14d7ae4255",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "IpRange": "0.0.0.0/0",
            "Ipv6Range": [],
            "PrefixListId": [],
            "ToPort": 22,
            "turbot": {
              "akas": [
                "arn:aws:ec2:us-east-1:111122223333:security-group/sg-0b143ca14d7ae4255"
              ],
              "custom": {
                "aws": {
                  "accountId": 123456789012,
                  "regionName": "us-east-1",
                  "partition": "aws"
                }
              }
            }
          },
          "expected": false
        }
      ]
    },
    "securityGroupRuleAka": {
      "type": "string",
      "pattern": "^arn:aws(-us-gov|-cn)?:ec2:[a-z]{2}(-gov)?-[a-z]+-[0-9]:[0-9]{12}:security-group/sg-[0-9a-f]{8}(?:[0-9a-f]{9})?:[a-zA-Z0-9.,+@=_{}!$*;[\\]()\\/:\\s-]*$",
      "tests": [
        {
          "description": "Valid - Base case",
          "input": "arn:aws:ec2:us-east-1:111122223333:security-group/sg-0b143ca14d7ae4255:a123f433"
        },
        {
          "description": "Invalid - Malformed resource collection",
          "input": "arn:aws:ec2:us-east-1:111122223333:securityGroup/sg-cc7a7387",
          "expected": false
        },
        {
          "description": "Invalid - Malformed region name",
          "input": "arn:aws:ec2:usa-east-1:111122223333:security-group/sg-cc7a7387",
          "expected": false
        },
        {
          "description": "Invalid - Malformed account ID",
          "input": "arn:aws:ec2:us-east-1:111122223333hhfh:security-group/sg-cc7a7387",
          "expected": false
        }
      ]
    }
  },
  "policy": {
    "types": {
      "networkAclActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Determine the action to take when an AWS VPC network acl, based on the `AWS > VPC > Network ACL > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Network ACL > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "networkAclActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/networkAclActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "The number of days since the AWS VPC network acl\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Network ACL > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "networkAclActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/networkAclActive",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "The age after which the AWS VPC network acl\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Network ACL > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "networkAclApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Determine the action to take when an AWS VPC network acl is not approved based on `AWS > VPC > Network ACL > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "networkAclApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/networkAclApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "A list of AWS regions in which AWS VPC network acls are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC network acl is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > VPC > Network ACL > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceApprovedRegionsDefault\")\n}\n"
      },
      "networkAclApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/networkAclApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Determine whether the AWS VPC network acl is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC network acl is not approved, it will be subject to the action specified in the `AWS > VPC > Network ACL > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > VPC > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > VPC > Enabled"
        }
      },
      "networkAclCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws-vpc-core#/resource/types/vpc"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC network acl into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Network ACL > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "networkAclConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "networkAclConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/networkAclConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "networkAclConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/networkAclConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "networkAclRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC network acls are supported for use.\n\nAny network acls in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "networkAclTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "Determine the action to take when an AWS VPC network acl tags are not updated based on the `AWS > VPC > Network ACL > Tags > *` policies.\n\nThe control ensure AWS VPC network acl tags include tags defined in `AWS > VPC > Network ACL > Tags > Template`.\n\nTags not defined in Network ACL Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "networkAclTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/networkAclTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/networkAcl"
        ],
        "description": "The template is used to generate the keys and values for AWS VPC network acl.\n\nTags not defined in Network ACL Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "networkAclUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/networkAcl",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS  network acls that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS >  > Network ACL > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "networkAclUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/networkAclUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 1000
        }
      },
      "vpcSecurityCustomEventPatterns": {
        "title": "@turbot/aws-vpc-security",
        "icon": "fal-file-invoice",
        "parent": "aws#/policy/types/eventHandlersEventsRulesCustomEventPatterns",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "The CloudWatch Events event pattern used by the AWS VPC Security module to specify\nwhich events to forward to the Turbot Event Handlers.\n",
        "category": "turbot#/control/categories/configured",
        "schema": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "flowLogActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Determine the action to take when an AWS VPC flow log, based on the `AWS > VPC > Flow Log > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Flow Log > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "flowLogActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/flowLogActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "The number of days since the AWS VPC flow log\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Flow Log > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "flowLogActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/flowLogActive",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "The age after which the AWS VPC flow log\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Flow Log > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "flowLogActiveBudget": {
        "title": "Budget",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/flowLogActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "The impact of the budget state on the active control. This policy allows you to force\nflowLogs to inactive based on the current budget state, as reflected in\n`AWS > Account > Budget > State`\n\nThe Active control determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated compliance\nenvironment, it's common to end up with a wide range of alarms that are difficult\nand time consuming to clear. The Active control brings automated, well-defined\ncontrol to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Flow Log > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if Budget > State is Over or higher",
            "Force inactive if Budget > State is Critical or higher",
            "Force inactive if Budget > State is Shutdown"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "flowLogApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Determine the action to take when an AWS VPC flow log is not approved based on `AWS > VPC > Flow Log > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "flowLogApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/flowLogApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "A list of AWS regions in which AWS VPC flow logs are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC flow log is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > VPC > Flow Log > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceApprovedRegionsDefault\")\n}\n"
      },
      "flowLogApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/flowLogApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Determine whether the AWS VPC flow log is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC flow log is not approved, it will be subject to the action specified in the `AWS > VPC > Flow Log > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > VPC > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > VPC > Enabled"
        }
      },
      "flowLogApprovedBudget": {
        "title": "Budget",
        "icon": "fal-check-double",
        "parent": "#/policy/types/flowLogApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "The policy allows you to set flow logs to unapproved based on the current budget state, as reflected in `AWS > Account > Budget > State`\n\nThis policy will be evaluated by the Approved control. If an AWS VPC flow log is not matched by the approved list, it will be subject to the action specified in the `AWS > VPC > Flow Log > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Unapproved if Budget > State is Over or higher",
            "Unapproved if Budget > State is Critical or higher",
            "Unapproved if Budget > State is Shutdown"
          ],
          "example": [
            "Unapproved if Budget > State is Shutdown"
          ],
          "default": "Skip"
        }
      },
      "flowLogCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC flow log into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Flow Log > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "flowLogConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "flowLogConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/flowLogConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "flowLogConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/flowLogConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "flowLogRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC flow logs are supported for use.\n\nAny flow logs in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "flowLogTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "Determine the action to take when an AWS VPC flow log tags are not updated based on the `AWS > VPC > Flow Log > Tags > *` policies.\n\nThe control ensure AWS VPC flow log tags include tags defined in `AWS > VPC > Flow Log > Tags > Template`.\n\nTags not defined in Flow Log Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "flowLogTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/flowLogTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/flowLog"
        ],
        "description": "The template is used to generate the keys and values for AWS VPC flow log.\n\nTags not defined in Flow Log Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "flowLogUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/flowLog",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS  flow logs that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS >  > Flow Log > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "flowLogUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/flowLogUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 2
        }
      },
      "securityGroupActive": {
        "title": "Active",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Determine the action to take when an AWS VPC security group, based on the `AWS > VPC > Security Group > Active > *` policies.\n\nThe control determines whether the resource is in active use, and if not,\nhas the ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Security Group > Active > *`), raises an alarm, and takes the defined enforcement\naction. Each Active sub-policy can calculate a status of active, inactive\nor skipped. Generally, if the resource appears to be Active for any reason\nit will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered\nUnapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Active",
            "Enforce: Delete inactive with 1 day warning",
            "Enforce: Delete inactive with 3 days warning",
            "Enforce: Delete inactive with 7 days warning",
            "Enforce: Delete inactive with 14 days warning",
            "Enforce: Delete inactive with 30 days warning",
            "Enforce: Delete inactive with 60 days warning",
            "Enforce: Delete inactive with 90 days warning",
            "Enforce: Delete inactive with 180 days warning",
            "Enforce: Delete inactive with 365 days warning"
          ],
          "example": [
            "Check: Active"
          ],
          "default": "Skip"
        }
      },
      "securityGroupActiveLastModified": {
        "title": "Last Modified",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/securityGroupActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "The number of days since the AWS VPC security group\nwas last modified before it is considered inactive.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Security Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if last modified <= 1 day",
            "Active if last modified <= 3 days",
            "Active if last modified <= 7 days",
            "Active if last modified <= 14 days",
            "Active if last modified <= 30 days",
            "Active if last modified <= 60 days",
            "Active if last modified <= 90 days",
            "Active if last modified <= 180 days",
            "Active if last modified <= 365 days",
            "Force active if last modified <= 1 day",
            "Force active if last modified <= 3 days",
            "Force active if last modified <= 7 days",
            "Force active if last modified <= 14 days",
            "Force active if last modified <= 30 days",
            "Force active if last modified <= 60 days",
            "Force active if last modified <= 90 days",
            "Force active if last modified <= 180 days",
            "Force active if last modified <= 365 days"
          ],
          "example": [
            "Active if last modified <= 90 days"
          ],
          "default": "Skip"
        }
      },
      "securityGroupActiveAge": {
        "title": "Age",
        "icon": "fab-creative-commons-sampling",
        "category": "turbot#/control/categories/resourceActive",
        "parent": "#/policy/types/securityGroupActive",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "The age after which the AWS VPC security group\nis no longer considered active. If a create time is unavailable, the time Turbot discovered the resource is used.\n\nThe [Active](https://turbot.com/v5/docs/concepts/guardrails/active)\ncontrol determines whether the resource is in active use, and if not, has\nthe ability to delete / cleanup the resource. When running an automated\ncompliance environment, it's common to end up with a wide range of alarms\nthat are difficult and time consuming to clear. The Active control brings\nautomated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the\nresource (`AWS > VPC > Security Group > Active > *`),\nraises an alarm, and takes the defined enforcement action. Each Active\nsub-policy can calculate a status of active, inactive or skipped. Generally,\nif the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved\nfor any reason it will be considered Unapproved.\n\nSee [Active](https://turbot.com/v5/docs/concepts/guardrails/active) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Force inactive if age > 1 day",
            "Force inactive if age > 3 days",
            "Force inactive if age > 7 days",
            "Force inactive if age > 14 days",
            "Force inactive if age > 30 days",
            "Force inactive if age > 60 days",
            "Force inactive if age > 90 days",
            "Force inactive if age > 180 days",
            "Force inactive if age > 365 days"
          ],
          "example": [
            "Force inactive if age > 90 days"
          ],
          "default": "Skip"
        }
      },
      "securityGroupActiveAttached": {
        "title": "Attached",
        "icon": "fab-creative-commons-sampling",
        "parent": "#/policy/types/securityGroupActive",
        "category": "turbot#/control/categories/resourceActive",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Determine whether the Security Group is active, based on whether it is attached to any other resource types.\n\nThe Active control determines whether the resource is in active use, and if not, has the ability to delete / cleanup the resource. When running an automated compliance environment, it's common to end up with a wide range of alarms that are difficult and time consuming to clear. The Active control brings automated, well-defined control to this process.\n\nThe Active control checks the status of all defined Active policies for the resource (`AWS > VPC > Security Group > Active > *`), raises an alarm, and takes the defined enforcement action. Each Active sub-policy can calculate a status of active, inactive or skipped. Generally, if the resource appears to be Active for any reason it will be considered Active.\n**Note** the contrast with Approved, where if the resource appears to be Unapproved for any reason it will be considered Unapproved.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Active if attached",
            "Force active if attached",
            "Force inactive if unattached"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "securityGroupApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Determine the action to take when an AWS VPC security group is not approved based on `AWS > VPC > Security Group > Approved > *` policies.\n\nThe Approved control checks the status of the defined Approved sub-policies for the resource. If the resource is not approved according to any of these policies, this control raises an alarm and takes the defined enforcement action.\n\nFor any enforcement actions that specify `if new`, e.g., `Enforce: Delete unapproved if new`, this control will only take the enforcement actions for resources created within the last 60 minutes.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved if new"
          ],
          "example": [
            "Check: Approved"
          ],
          "default": "Skip"
        }
      },
      "securityGroupApprovedRegions": {
        "title": "Regions",
        "icon": "fal-check-double",
        "parent": "#/policy/types/securityGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "A list of AWS regions in which AWS VPC security groups are approved for use.\n\nThe expected format is an array of regions names. You may use the '*' and '?' wildcard characters.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC security group is created in a region that is not in the approved list, it will be subject to the action specified in the `AWS > VPC > Security Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions | length == 0 %} [] {% endif %}{% for item in $.regions %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policy(uri: \"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceApprovedRegionsDefault\")\n}\n"
      },
      "securityGroupApprovedUsage": {
        "title": "Usage",
        "icon": "fal-check-double",
        "parent": "#/policy/types/securityGroupApproved",
        "category": "turbot#/control/categories/resourceApproved",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Determine whether the AWS VPC security group is allowed to exist.\n\nThis policy will be evaluated by the Approved control. If an AWS VPC security group is not approved, it will be subject to the action specified in the `AWS > VPC > Security Group > Approved` policy.\n\nSee [Approved](https://turbot.com/v5/docs/concepts/guardrails/approved) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Not approved",
            "Approved",
            "Approved if AWS > VPC > Enabled"
          ],
          "example": [
            "Not approved"
          ],
          "default": "Approved if AWS > VPC > Enabled"
        }
      },
      "securityGroupCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "aws-vpc-core#/resource/types/vpc"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC security group into the CMDB.\n\nThe [CMDB](https://turbot.com/v5/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB.\nAll policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Security Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "securityGroupConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "securityGroupConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/securityGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "securityGroupConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/securityGroupConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      },
      "securityGroupEgressRules": {
        "title": "Egress Rules",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved"
      },
      "securityGroupEgressRulesApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "description": "Configure Security Group Egress Rule checking. This policy defines whether\nto verify the security group egress rules are approved, as well as the\nsubsequent action to take on unapproved items. Rules for all `Approved`\npolicies will be compiled in `Approved > Compiled Rules` and then\nevaluated.\n\nIf set to `Enforce: Delete unapproved`, any unapproved rules will be\nrevoked from the security group.\n",
        "parent": "#/policy/types/securityGroupEgressRules",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "securityGroupEgressRulesApprovedRules": {
        "title": "Rules",
        "icon": "fal-clipboard-list-check",
        "description": "An [Object Control List (OCL)](https://turbot.com/v5/docs/reference/ocl)\nwith a list of filter rules to approve or reject security group rules.\n\nNote that the Approved control does not operate directly from this policy,\nbut from the `Approved > Compiled Rules`. The rules are processed in order,\nand any built-in Turbot rules will appear first in the list of compiled\nrules.\n\nExamples:\n  ```\n  Allow HTTP and HTTPS rules for RFC1918 private space\n  APPROVE $.turbot.fromPort:=80 $.turbot.toPort:=80 $.turbot.cidr:<=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16\n  APPROVE $.turbot.fromPort:=443 $.turbot.toPort:=443 $.turbot.cidr:<=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16\n\n  Allow all rules from security groups in this account\n  APPROVE $.UserIdGroupPairs.+.UserId:\"969297701313\"\n\n  Reject any rule from 0.0.0.0/0\n  REJECT $.turbot.cidr:0.0.0.0/0\n  ```\n",
        "parent": "#/policy/types/securityGroupEgressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "default": "# Approve unmatched rules\nAPPROVE *",
          "x-schema-form": {
            "type": "textarea"
          }
        }
      },
      "securityGroupEgressRulesApprovedMinimumBitmask": {
        "title": "Minimum Bitmask",
        "icon": "fal-arrows-h",
        "description": "Defines the smallest allowed bitmask (largest range of IP addresses) that\ncan be granted access in any single custom security group egress rule.\n\nExamples:\n  - IPv4\n    - 32 - Restrict rules to a single IP address\n    - 24 - Restrict rules to a /24 CIDR block\n    - 0 - Unlimited size\n  - IPv6\n    - 256 - Restrict rules to a single IP address\n    - 32 - Restrict rules to a /32 CIDR block\n\nApplies to non-Turbot managed Security Groups.\n",
        "parent": "#/policy/types/securityGroupEgressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 256,
          "default": 0
        }
      },
      "securityGroupEgressRulesApprovedProhibitedPorts": {
        "title": "Prohibited Ports",
        "icon": "fal-ban",
        "description": "A YAML list of ports that are prohibited and may not be used for egress\nin custom security groups. For example, 21 might be prohibited to prevent\nthe use of FTP. This list is also applied to ICMP rules, so should be\nchecked against valid ICMP numbers.\n\nApplies to non-Turbot managed Security Groups.\n\nExamples:\n  - 21 # FTP\n  - 25 # SMTP\n",
        "parent": "#/policy/types/securityGroupEgressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "default": []
        }
      },
      "securityGroupEgressRulesApprovedCidrRanges": {
        "title": "CIDR Ranges",
        "icon": "fal-sitemap",
        "description": "Custom Security Group egress rules may only be added within the specified\nCIDR address ranges. Acceptable values are valid CIDR blocks. If this list\nis empty, no CIDR address ranges are permitted.\n\nApplies to non-Turbot managed Security Groups.\n\nExamples:\n  - 10.0.0.0/8\n  - 172.16.0.0/12\n  - ::/0\n  - 2600:1f18:2368:f300::/56\n  - 2001:db8:1234:1a00:3304:8879:34cf:4071\n",
        "parent": "#/policy/types/securityGroupEgressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "aws#/definitions/cidrBlock"
              },
              {
                "$ref": "aws#/definitions/ipv6CidrBlock"
              }
            ]
          },
          "default": [
            "0.0.0.0/0",
            "::/0"
          ]
        }
      },
      "securityGroupEgressRulesApprovedMaximumPortRange": {
        "title": "Maximum Port Range",
        "icon": "fal-container-storage",
        "description": "The maximum number of ports that may be opened by any single egress rule\nin a security group.\n\nExamples:\n  - 1 - Allow a single port only (e.g. 8080)\n  - 4 - Allow up to 4 ports (e.g. 8080-8083)\n  - -1 - Allow unlimited number of ports, including -1 for all.\n\nApplies to non-Turbot managed Security Groups.\n",
        "parent": "#/policy/types/securityGroupEgressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "integer",
          "minimum": -1,
          "maximum": 65535,
          "default": -1
        }
      },
      "securityGroupEgressRulesApprovedCompiledRules": {
        "title": "Compiled Rules",
        "icon": "fal-clipboard-list-check",
        "readOnly": true,
        "description": "A read-only [Object Control List\n(OCL)](https://turbot.com/v5/docs/reference/ocl) with a list of compiled\nfilter rules to approve or reject security group rules.\n\nThis policy is generated by Turbot.\n",
        "parent": "#/policy/types/securityGroupEgressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string"
        }
      },
      "securityGroupIngressRules": {
        "title": "Ingress Rules",
        "icon": "fal-exchange-alt",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved"
      },
      "securityGroupIngressRulesApproved": {
        "title": "Approved",
        "icon": "fal-check-double",
        "description": "Configure Security Group Ingress Rule checking. This policy defines whether\nto verify the security group ingress rules are approved, as well as the\nsubsequent action to take on unapproved items. Rules for all `Approved`\npolicies will be compiled in `Approved > Compiled Rules` and then\nevaluated.\n\nIf set to `Enforce: Delete unapproved`, any unapproved rules will be\nrevoked from the security group.\n",
        "parent": "#/policy/types/securityGroupIngressRules",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Approved",
            "Enforce: Delete unapproved"
          ],
          "example": [
            "Skip"
          ],
          "default": "Skip"
        }
      },
      "securityGroupIngressRulesApprovedRules": {
        "title": "Rules",
        "icon": "fal-clipboard-list-check",
        "description": "An [Object Control List (OCL)](https://turbot.com/v5/docs/reference/ocl)\nwith a list of filter rules to approve or reject security group rules.\n\nNote that the Approved control does not operate directly from this policy,\nbut from the `Approved > Compiled Rules`. The rules are processed in order,\nand any built-in Turbot rules will appear first in the list of compiled\nrules.\n\nExamples:\n  ```\n  Allow HTTP and HTTPS rules for RFC1918 private space\n  APPROVE $.turbot.fromPort:=80 $.turbot.toPort:=80 $.turbot.cidr:<=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16\n  APPROVE $.turbot.fromPort:=443 $.turbot.toPort:=443 $.turbot.cidr:<=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16\n\n  Allow all rules from security groups in this account\n  APPROVE $.UserIdGroupPairs.+.UserId:\"969297701313\"\n\n  Reject any rule from 0.0.0.0/0\n  REJECT $.turbot.cidr:0.0.0.0/0\n  ```\n",
        "parent": "#/policy/types/securityGroupIngressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string",
          "default": "# Approve unmatched rules\nAPPROVE *",
          "x-schema-form": {
            "type": "textarea"
          }
        }
      },
      "securityGroupIngressRulesApprovedMinimumBitmask": {
        "title": "Minimum Bitmask",
        "icon": "fal-arrows-h",
        "description": "Defines the smallest allowed bitmask (largest range of IP addresses) that\ncan be granted access in any single custom security group ingress rule.\n\nExamples:\n  - IPv4\n    - 32 - Restrict rules to a single IP address\n    - 24 - Restrict rules to a /24 CIDR block\n    - 0 - Unlimited size\n  - IPv6\n    - 256 - Restrict rules to a single IP address\n    - 32 - Restrict rules to a /32 CIDR block\n\nApplies to non-Turbot managed Security Groups.\n",
        "parent": "#/policy/types/securityGroupIngressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 256,
          "default": 0
        }
      },
      "securityGroupIngressRulesApprovedProhibitedPorts": {
        "title": "Prohibited Ports",
        "icon": "fal-ban",
        "description": "A YAML list of ports that are prohibited and may not be used for ingress\nin custom security groups. For example, 21 might be prohibited to prevent\nthe use of FTP. This list is also applied to ICMP rules, so should be\nchecked against valid ICMP numbers.\n\nApplies to non-Turbot managed Security Groups.\n\nExamples:\n  - 21 # FTP\n  - 25 # SMTP\n",
        "parent": "#/policy/types/securityGroupIngressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "default": []
        }
      },
      "securityGroupIngressRulesApprovedCidrRanges": {
        "title": "CIDR Ranges",
        "icon": "fal-sitemap",
        "description": "Custom Security Group ingress rules may only be added within the specified\nCIDR address ranges. Acceptable values are valid CIDR blocks. If this list\nis empty, no CIDR address ranges are permitted.\n\nApplies to non-Turbot managed Security Groups.\n\nExamples:\n  - 10.0.0.0/8\n  - 172.16.0.0/12\n",
        "parent": "#/policy/types/securityGroupIngressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "aws#/definitions/cidrBlock"
              },
              {
                "$ref": "aws#/definitions/ipv6CidrBlock"
              }
            ]
          },
          "default": [
            "0.0.0.0/0",
            "::/0"
          ]
        }
      },
      "securityGroupIngressRulesApprovedMaximumPortRange": {
        "title": "Maximum Port Range",
        "icon": "fal-container-storage",
        "description": "The maximum number of ports that may be opened by any single ingress rule\nin a security group.\n\nExamples:\n  1 - Allow a single port only (e.g. 8080)\n  4 - Allow up to 4 ports (e.g. 8080-8083)\n  -1 - Allow unlimited number of ports, including -1 for all.\n\nApplies to non-Turbot managed Security Groups.\n",
        "parent": "#/policy/types/securityGroupIngressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "integer",
          "minimum": -1,
          "maximum": 65535,
          "default": -1
        }
      },
      "securityGroupIngressRulesApprovedCompiledRules": {
        "title": "Compiled Rules",
        "icon": "fal-clipboard-list-check",
        "readOnly": true,
        "description": "A read-only [Object Control List\n(OCL)](https://turbot.com/v5/docs/reference/ocl) with a list of compiled\nfilter rules to approve or reject security group rules.\n\nThis policy is generated by Turbot.\n",
        "parent": "#/policy/types/securityGroupIngressRulesApproved",
        "targets": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceApproved",
        "schema": {
          "type": "string"
        }
      },
      "securityGroupRegions": {
        "title": "Regions",
        "icon": "fal-globe",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/cloudLocation",
        "targets": [
          "aws#/resource/types/account"
        ],
        "description": "A list of AWS regions in which AWS VPC security groups are supported for use.\n\nAny security groups in a region not listed here will not be recorded in CMDB.\n\nThe expected format is an array of regions names. You may use the '*' and\n'?' wildcard characters.\n",
        "schema": {
          "$ref": "aws#/definitions/regionNameMatcherList"
        },
        "defaultTemplate": "{% if $.regions.value | length == 0 %} [] {% endif %}{% for item in $.regions.value %}- '{{ item }}'\n{% endfor %}",
        "defaultTemplateInput": "{\n  regions: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceRegionsDefault\") {\n    value\n  }\n}\n"
      },
      "securityGroupTags": {
        "title": "Tags",
        "icon": "fal-tags",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Determine the action to take when an AWS VPC security group tags are not updated based on the `AWS > VPC > Security Group > Tags > *` policies.\n\nThe control ensure AWS VPC security group tags include tags defined in `AWS > VPC > Security Group > Tags > Template`.\n\nTags not defined in Security Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Tags are correct",
            "Enforce: Set tags"
          ],
          "example": [
            "Check: Tags are correct"
          ],
          "default": "Skip"
        }
      },
      "securityGroupTagsTemplate": {
        "title": "Template",
        "icon": "fal-tags",
        "parent": "#/policy/types/securityGroupTags",
        "category": "turbot#/control/categories/resourceTags",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "The template is used to generate the keys and values for AWS VPC security group.\n\nTags not defined in Security Group Tags Template will not be modified or deleted. Setting a tag value to `undefined` will result in the tag being deleted.\n\nSee [Tags](https://turbot.com/v5/docs/concepts/guardrails/tagging) for more information.\n",
        "schema": {
          "$ref": "aws#/definitions/tagsTemplateInput",
          "example": [
            {
              "foo": "bar",
              "environment": "prod"
            },
            [
              {
                "foo123": "bar"
              },
              {
                "environment": "dev"
              }
            ],
            [
              {
                "cost-center": "zz123"
              },
              {
                "delete-me": "undefined"
              }
            ]
          ]
        },
        "defaultTemplate": "{%- if $.defaultTags.value | length == 0 %} [] {%- elif $.defaultTags.value != undefined %}{{ $.defaultTags.value | dump | safe }}{%- else %}{% for item in $.defaultTags.value %}- {{ item }}{% endfor %}{% endif %}",
        "defaultTemplateInput": [
          "{\n  account {\n    turbot {\n      id\n    }\n  }\n}\n",
          "{\n  defaultTags: policyValue(uri:\"tmod:@turbot/aws-vpc-core#/policy/types/vpcServiceTagsTemplate\" resourceId: \"{{ $.account.turbot.id }}\") {\n    value\n  }\n}\n"
        ]
      },
      "securityGroupUsage": {
        "title": "Usage",
        "icon": "fal-hand-holding-usd",
        "parent": "#/resource/types/securityGroup",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Configure the number of AWS  security groups that can be used for this region and the current consumption against the limit.\n\nYou can configure the behavior of the control with this  `AWS >  > Security Group > Usage` policy.\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Check: Usage <= 85% of Limit",
            "Check: Usage <= 100% of Limit"
          ],
          "example": [
            "Check: Usage <= 85% of Limit"
          ],
          "default": "Skip"
        }
      },
      "securityGroupUsageLimit": {
        "title": "Limit",
        "icon": "fal-hand-holding-usd",
        "parent": "#/policy/types/securityGroupUsage",
        "category": "turbot#/control/categories/resourceUsage",
        "targets": [
          "aws#/resource/types/region"
        ],
        "description": "Maximum number of items that can be created for this region.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 2500
        }
      },
      "securityGroupRuleCmdb": {
        "title": "CMDB",
        "icon": "fal-coins",
        "parent": "#/resource/types/securityGroupRule",
        "category": "turbot#/control/categories/cmdb",
        "targets": [
          "#/resource/types/securityGroup"
        ],
        "description": "Configure whether to record and synchronize details for the AWS VPC security group rules into the CMDB.\n\nThe [CMDB](https://turbot.com/docs/concepts/guardrails/cmdb) control is responsible for populating and updating all the attributes for that resource type in the Turbot CMDB. All policies and controls in Turbot are based around the resource, so usually the CMDB policy is set to **\"Enforce: Enabled\"**.\n\nIf set to Skip then all changes to the CMDB are paused - no new resources will be discovered, no updates will be made and deleted resources will not be removed.\n\nTo cleanup resources and stop tracking changes, set this policy to **\"Enforce: Disabled\"**.\n\nCMDB controls also use the Regions policy associated with the resource. If region is not in `AWS > VPC > Security Group > Regions` policy, the CMDB control will delete the resource from the CMDB.\n\n(**Note**: Setting CMDB to **\"Skip\"** will also pause these changes.)\n",
        "schema": {
          "type": "string",
          "enum": [
            "Skip",
            "Enforce: Enabled",
            "Enforce: Disabled"
          ],
          "example": [
            "Skip"
          ],
          "default": "Enforce: Enabled"
        }
      },
      "securityGroupRuleConfigured": {
        "title": "Configured",
        "icon": "fal-cogs",
        "parent": "#/resource/types/securityGroupRule",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/securityGroupRule"
        ],
        "description": "Determine how to configure this resource.\n\n**Note**: If the resource is managed by another stack, then the Skip/Check/Enforce values here are ignored\nand inherit from the stack that owns it\n",
        "schema": {
          "enum": [
            "Skip (unless claimed by a stack)",
            "Check: Per Configured > Source (unless claimed by a stack)",
            "Enforce: Per Configured > Source (unless claimed by a stack)"
          ],
          "default": "Skip (unless claimed by a stack)"
        }
      },
      "securityGroupRuleConfiguredSource": {
        "title": "Source",
        "icon": "fal-file-alt",
        "parent": "#/policy/types/securityGroupRuleConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/securityGroupRule"
        ],
        "description": "A HCL or JSON format Terraform configuration source used to configure this resource",
        "schema": {
          "type": "string",
          "default": "{\"resource\": {}}\n",
          "x-schema-form": {
            "type": "code",
            "language": "hcl"
          }
        }
      },
      "securityGroupRuleConfiguredPrecedence": {
        "title": "Claim Precedence",
        "icon": "fal-sort-amount-down",
        "parent": "#/policy/types/securityGroupRuleConfigured",
        "category": "turbot#/control/categories/configured",
        "targets": [
          "#/resource/types/securityGroupRule"
        ],
        "description": "An ordered list of who is allowed to claim a resource.\nA stack cannot claim a resource if it is already claimed by another\nstack at a higher level of precedence.\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTemplate": "{%- if $.defaultPrecedence | length == 0 %}[]{%- else %}{% for item in $.defaultPrecedence %}- '{{ item }}'{% endfor %}{% endif %}",
        "defaultTemplateInput": "{\n  defaultPrecedence: policy(uri:\"tmod:@turbot/turbot#/policy/types/claimPrecedenceDefault\")\n}\n"
      }
    }
  },
  "resource": {
    "types": {
      "networkAcl": {
        "title": "Network ACL",
        "icon": "fal-cloud",
        "parent": "aws-vpc-core#/resource/types/vpcService",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "aws-vpc-core#/resource/types/vpc",
        "metadataTemplates": {
          "title": "{{ $.NetworkAclId }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:network-acl/{{ $.NetworkAclId }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:vpc/{{ $.VpcId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "NetworkAclId": "acl-adf253e1",
              "VpcId": "vpc-a01106c2",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:network-acl/acl-adf253e1"
              ],
              "title": "acl-adf253e1",
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:vpc/vpc-a01106c2"
            }
          }
        ],
        "terraform": {
          "type": "aws_network_acl",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.NetworkAclId}}",
          "propertyMap": {
            "id": "NetworkAclId",
            "vpc_id": "VpcId"
          }
        },
        "schema": {
          "$ref": "#/definitions/networkAcl"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/networkAcl"
            },
            {
              "type": "object",
              "required": [
                "NetworkAclId",
                "VpcId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/networkAcl"
            },
            {
              "type": "object",
              "properties": {
                "NetworkAclId": {
                  "type": "null"
                },
                "VpcId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "flowLog": {
        "title": "Flow Log",
        "icon": "fal-file-search",
        "description": "AWS VPC Flow Log resource",
        "parent": "aws-vpc-core#/resource/types/vpcService",
        "category": "turbot#/resource/categories/managementTools",
        "resourceParents": [
          "aws-vpc-core#/resource/types/subnet",
          "aws-vpc-core#/resource/types/vpc",
          "aws-ec2#/resource/types/networkInterface"
        ],
        "terraform": {
          "calculatedAka": true,
          "type": "aws_flow_log",
          "stateIdTemplate": "{{$.FlowLogId}}",
          "propertyMap": {
            "id": "FlowLogId",
            "vpc_id": "ResourceId"
          }
        },
        "metadataTemplates": {
          "title": "{{ $.FlowLogId }}",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:flow-log/{{ $.FlowLogId }}\"\n",
          "resourceParentAka": "{% if $.ResourceId.startsWith(\"vpc-\") %}\"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:vpc/{{ $.ResourceId }}\"{% elif $.ResourceId.startsWith(\"subnet-\") %}\"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:subnet/{{ $.ResourceId }}\"{% else %}\"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:network-interface/{{ $.ResourceId }}\"{% endif %}\n"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "FlowLogId": "fl-09c95b47b09d21eca",
              "ResourceId": "eni-00977abe39d5c146d",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "fl-09c95b47b09d21eca",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:flow-log/fl-09c95b47b09d21eca"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:network-interface/eni-00977abe39d5c146d"
            }
          },
          {
            "description": "Valid - ResourceId as VpcId",
            "input": {
              "FlowLogId": "fl-09c95b47b09d21eca",
              "ResourceId": "vpc-a01106c2",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "fl-09c95b47b09d21eca",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:flow-log/fl-09c95b47b09d21eca"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:vpc/vpc-a01106c2"
            }
          },
          {
            "description": "Valid - ResourceId as SubnetId",
            "input": {
              "FlowLogId": "fl-09c95b47b09d21eca",
              "ResourceId": "subnet-61f88a2b",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "title": "fl-09c95b47b09d21eca",
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:flow-log/fl-09c95b47b09d21eca"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:subnet/subnet-61f88a2b"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/flowLog"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/flowLog"
            },
            {
              "type": "object",
              "required": [
                "FlowLogId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/flowLog"
            },
            {
              "type": "object",
              "properties": {
                "FlowLogId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "securityGroup": {
        "title": "Security Group",
        "icon": "fal-lock",
        "parent": "aws-vpc-core#/resource/types/vpcService",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "aws-vpc-core#/resource/types/vpc",
        "metadataTemplates": {
          "title": "{% if $.GroupName %}\"{{ $.GroupName }}\"{% else %}\"{{$.GroupId}}\"{% endif %}\n",
          "akas": "- \"arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:security-group/{{ $.GroupId }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:vpc/{{ $.VpcId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "GroupName": "test02",
              "GroupId": "sg-0118cadd2076b4b88",
              "VpcId": "vpc-a01106c2",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": 123456789012,
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:123456789012:security-group/sg-0118cadd2076b4b88"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:123456789012:vpc/vpc-a01106c2",
              "title": "test02"
            }
          }
        ],
        "terraform": {
          "type": "aws_security_group",
          "calculatedAka": true,
          "stateIdTemplate": "{{$.GroupId}}",
          "propertyMap": {
            "id": "GroupId",
            "name": "GroupName",
            "vpc_id": "VpcId"
          },
          "stateDefaults": {
            "revoke_rules_on_delete": false
          }
        },
        "schema": {
          "$ref": "#/definitions/securityGroup"
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/securityGroup"
            },
            {
              "type": "object",
              "required": [
                "GroupName",
                "GroupId",
                "VpcId"
              ]
            }
          ]
        },
        "updateSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/securityGroup"
            },
            {
              "type": "object",
              "properties": {
                "GroupId": {
                  "type": "null"
                },
                "VpcId": {
                  "type": "null"
                }
              }
            }
          ]
        }
      },
      "securityGroupRule": {
        "title": "Security Group Rule",
        "icon": "fal-lock",
        "parent": "aws-vpc-core#/resource/types/vpcService",
        "category": "turbot#/resource/categories/networking",
        "resourceParents": "#/resource/types/securityGroup",
        "metadataTemplates": {
          "title": "{% set hashCode %}{{ $.GroupId }}_{{ $.Type }}_{% if $.IpProtocol == '-1' %}{{ $.IpProtocol }}{% else %}{{ $.IpProtocol }}{% if $.FromPort %}_{{ $.FromPort }}_{{ $.ToPort }}{% endif %}{% endif %}{% if $.CidrBlock %}_{{ $.CidrBlock | replace('/', '' ) }}{% elif $.Ipv6CidrBlock %}_{{ $.Ipv6CidrBlock | replace('/', '' ) | replace(':', '')  }}{% elif $.Self %}_{{ $.GroupId }}{% elif $.UserIdGroupPair %}_{{ $.UserIdGroupPair }}{% endif %}{% endset %}{{ hashCode }}",
          "akas": "- \"{% set hashCode %}{{ $.GroupId }}_{{ $.Type }}_{% if $.IpProtocol == '-1' %}{{ $.IpProtocol }}{% else %}{{ $.IpProtocol }}{% if $.FromPort %}_{{ $.FromPort }}_{{ $.ToPort }}{% endif %}{% endif %}{% if $.CidrBlock %}_{{ $.CidrBlock | replace('/', '' ) }}{% elif $.Ipv6CidrBlock %}_{{ $.Ipv6CidrBlock | replace('/', '' ) | replace(':', '')  }}{% elif $.Self %}_{{ $.GroupId }}{% elif $.UserIdGroupPair %}_{{ $.UserIdGroupPair }}{% endif %}{% endset %}arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:security-group/{{ $.GroupId }}:{{ hashCode }}\"\n",
          "resourceParentAka": "arn:{{ $.turbot.custom.aws.partition }}:ec2:{{ $.turbot.custom.aws.regionName }}:{{ $.turbot.custom.aws.accountId }}:security-group/{{ $.GroupId }}"
        },
        "metadataTemplateTests": [
          {
            "description": "Valid - Base test",
            "input": {
              "IpRanges": [
                {
                  "CidrIp": "0.0.0.0/0"
                }
              ],
              "cidr_block": "0.0.0.0/0",
              "IpProtocol": "-1",
              "Ipv6Ranges": [],
              "PrefixListIds": [],
              "UserIdGroupPairs": [],
              "GroupId": "sg-01ff3e85e09a74e67",
              "GroupName": "test02",
              "Type": "egress",
              "turbot": {
                "custom": {
                  "aws": {
                    "accountId": "624358524054",
                    "regionName": "us-east-1",
                    "partition": "aws"
                  }
                }
              }
            },
            "expect": {
              "akas": [
                "arn:aws:ec2:us-east-1:624358524054:security-group/sg-01ff3e85e09a74e67:2216917308"
              ],
              "resourceParentAka": "arn:aws:ec2:us-east-1:624358524054:security-group/sg-01ff3e85e09a74e67",
              "title": "test02:2216917308"
            }
          }
        ],
        "schema": {
          "$ref": "#/definitions/securityGroupRule"
        },
        "terraform": {
          "type": "aws_security_group_rule",
          "stateIdTemplate": "{% set hashCode %}{{ $.GroupId }}_{{ $.Type }}_{% if $.IpProtocol == '-1' %}{{ $.IpProtocol }}{% else %}{{ $.IpProtocol }}{% if $.FromPort %}_{{ $.FromPort }}_{{ $.ToPort }}{% endif %}{% endif %}{% if $.CidrBlock %}_{{ $.CidrBlock | replace('/', '' ) }}{% elif $.Ipv6CidrBlock %}_{{ $.Ipv6CidrBlock | replace('/', '' ) | replace(':', '')  }}{% elif $.Self %}_{{ $.GroupId }}{% elif $.UserIdGroupPair %}_{{ $.UserIdGroupPair }}{% endif %}{% endset %}{{ hashCode }}",
          "propertyMap": {
            "security_group_id": "GroupId",
            "type": "Type",
            "protocol": "IpProtocol"
          },
          "optionalPropertyMap": {
            "to_port": "ToPort",
            "from_port": "FromPort",
            "cidr_blocks": "CidrBlock",
            "ipv6_cidr_blocks": "Ipv6CidrBlock",
            "source_security_group_id": "UserIdGroupPair",
            "self": "Self"
          },
          "stateDefaults": {
            "self": false
          },
          "resourcePerElement": [
            "CidrBlock",
            "Ipv6CidrBlock",
            "UserIdGroupPair"
          ]
        },
        "createSchema": {
          "allOf": [
            {
              "$ref": "#/definitions/securityGroupRule"
            },
            {
              "type": "object",
              "required": [
                "GroupId",
                "Type",
                "IpProtocol"
              ]
            }
          ]
        }
      }
    }
  },
  "build": "20210521143624968"
}